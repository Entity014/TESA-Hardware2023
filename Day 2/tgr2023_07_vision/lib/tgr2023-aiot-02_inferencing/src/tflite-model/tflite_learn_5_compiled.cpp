/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.11.2023 05:05:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368192;
#else
constexpr int kTensorArenaSize = 367168;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0017377932090312243, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 40746, -40323, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00012497957504820079, 0.00012684629473369569, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 83,-44,-54,107,-72,4,-57,69,127,-22,-47,-5,-20,75,-44,32,110,-90,-40,-97,97,77,90,-63,-58,-82,-60,77,11,-87,-2,66, 
  /* [1][0][][] */ 51,80,77,-68,-80,80,-9,14,-41,-25,41,103,119,47,33,0,-42,4,-67,-97,-81,36,27,115,84,73,-50,-6,104,-113,-127,-19, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0033492865040898323, 0.0033993120305240154, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -521, 245, 247, -129, -313, 253, -299, 181, -228, 363, 230, -694, 257, 197, -555, -428, -284, 429, 90, -146, -295, 122, -501, 124, -302, -341, -301, -283, -478, -87, 1002, -314, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3098752939840779e-05, 4.298101703170687e-05, 4.2368901631562039e-05, 4.1021947254193947e-05, 4.1799561586230993e-05, 4.1874540329445153e-05, 4.2291085264878348e-05, 4.1355237044626847e-05, 4.0362974687013775e-05, 4.7551562602166086e-05, 4.3587911932263523e-05, 4.2799449147423729e-05, 4.1710649384185672e-05, 4.1662857256596908e-05, 4.3525178625714034e-05, 4.3194304453209043e-05, 3.9900805859360844e-05, 4.6614892198704183e-05, 4.7000892664073035e-05, 4.5290147681953385e-05, 4.4916345359524712e-05, 4.4279597204877064e-05, 4.4042244553565979e-05, 3.9257371099665761e-05, 4.1654144297353923e-05, 4.1978972149081528e-05, 4.2572806705720723e-05, 4.2928702896460891e-05, 4.2663919884944335e-05, 4.0255898056784645e-05, 4.7150286263786256e-05, 4.2209918319713324e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -46,-63,91,-4,91,-24,-102,-111,48,-109,-122,-14,48,-4,-51,40,-68,-45,-74,-66,-82,-117,-9,95,-125,-3,63,-61,97,-7,-34,-89,72,-74,-105,53,-124,-93,-97,15,62,-99,-109,87,37,-121,96,-33,4,-67,-41,85,-85,-58,-109,93,15,57,107,-122,-87,69,-60,34,-12,2,57,81,44,86,73,-127,88,-112,29,71,-116,0,-74,20,40,8,81,-17,-73,-55,-98,91,16,102,-22,-114,3,58,17,11, 
  /* [1][0][][] */ -82,20,-67,3,-34,89,44,10,83,-96,-100,100,73,-19,30,61,115,-34,41,127,-41,0,42,34,15,28,-34,114,16,14,105,-59,64,113,1,11,57,63,-8,-60,-59,14,-24,-94,-41,41,-35,-52,-19,-78,122,67,17,92,-72,-45,34,103,60,89,-52,118,-59,-65,-49,40,82,48,113,27,23,19,-111,80,-43,51,93,-41,-35,51,-74,88,-45,-109,34,120,-66,-59,87,85,96,32,93,100,35,-6, 
  /* [2][0][][] */ 22,24,-57,100,-17,-52,96,97,-99,94,-32,112,99,-8,89,-118,-53,-20,40,64,-91,-9,118,28,-45,91,113,16,-64,90,86,102,-66,-12,-84,-127,-83,97,113,-23,-115,-71,13,-3,-93,123,-31,-76,105,46,98,-81,-41,72,29,23,-64,99,-65,10,-12,62,-28,84,101,52,55,94,-88,67,14,-64,37,-93,39,32,-45,-20,11,-13,44,-93,-3,-35,6,-97,-17,-25,99,118,-23,13,-36,-75,-40,-70, 
  /* [3][0][][] */ 108,7,43,-24,-41,53,-119,41,53,23,68,15,95,100,77,21,109,102,-59,13,119,-93,-69,-122,8,-119,-85,111,46,-106,92,7,-60,-39,-17,-6,-97,-26,42,50,-28,-98,-100,0,109,29,-19,-89,70,-90,42,-3,98,28,93,-106,-125,-125,-118,-62,-104,45,-41,95,57,-37,-65,-35,-34,-70,2,104,20,-81,58,-52,31,103,100,-36,-96,-127,37,96,30,55,-46,-127,-89,45,-2,-116,97,-100,-98,64, 
  /* [4][0][][] */ 78,113,-7,55,-32,-27,26,22,69,124,-12,80,50,-43,-17,-66,-32,-10,-60,18,108,-99,82,21,-4,-10,58,-68,-49,54,-73,-53,72,113,12,-76,-58,-5,-91,46,-51,-69,-76,-96,39,116,46,63,21,-21,10,-81,-93,53,-88,22,34,-70,48,8,31,-58,-42,-74,-18,55,-4,-37,26,-102,-100,-93,-54,27,103,49,55,-30,-13,-36,2,-42,-101,-20,-4,65,92,3,-127,-70,49,71,24,98,-72,-17, 
  /* [5][0][][] */ 74,-107,84,90,45,-110,34,58,109,-112,2,-76,30,108,41,32,68,69,-70,108,38,58,23,-22,-127,-56,-10,-88,54,39,21,-96,-36,10,-62,-1,-113,-36,52,27,-88,-47,40,102,-42,27,30,-52,-106,114,31,40,46,23,42,-18,116,52,-57,-36,37,-68,44,-60,-24,108,-22,34,83,-1,110,-64,-47,66,-24,-71,19,-45,17,62,114,45,35,117,-79,85,-4,45,77,-99,122,98,-10,35,80,-87, 
  /* [6][0][][] */ 38,-38,110,73,-87,-68,-6,66,-15,-87,3,-78,84,52,113,-116,38,-3,-1,100,-82,-124,107,56,-46,-87,-13,-61,-29,-118,44,-81,-93,-127,-50,-98,-12,38,-111,79,85,53,25,-18,-111,105,-87,-46,-88,16,-30,-70,57,-59,93,-29,5,-9,-67,110,-99,2,65,-81,-55,65,98,-51,78,-4,-109,-9,55,-59,-94,-44,-86,-107,-60,-10,31,-28,41,-30,-75,-91,-42,-98,82,94,98,14,-56,-72,75,-27, 
  /* [7][0][][] */ 104,58,-34,-43,-70,127,-16,-2,121,11,-98,9,62,-86,52,71,60,23,1,123,60,41,-1,94,-88,111,48,64,-78,117,-17,43,30,31,76,89,-105,91,-9,-27,100,-75,85,74,46,-2,101,-117,59,-54,-111,-65,-22,93,23,33,127,-95,6,-56,9,-6,87,-103,-67,-55,75,25,-109,16,72,95,89,14,67,65,-59,62,-100,28,98,-38,-14,-73,94,38,-115,101,90,7,88,73,-52,-35,0,-72, 
  /* [8][0][][] */ 40,49,-54,-105,58,25,-87,-19,6,40,42,119,-4,-55,-96,-71,-78,93,-70,12,26,-33,82,111,-101,86,40,74,-74,13,-102,119,96,-45,39,16,121,2,-21,68,84,102,-115,-127,-1,-34,-18,120,18,-102,-74,-10,-72,-17,-38,-121,48,112,-76,105,114,56,39,101,-41,-53,-29,99,-93,59,32,-11,80,81,10,20,-60,109,82,105,32,85,-126,-99,22,40,77,-51,32,-43,-88,102,-95,-115,-56,72, 
  /* [9][0][][] */ 24,34,123,49,95,-73,-37,-99,43,52,-2,60,-24,-67,-83,-9,18,5,-75,-63,6,100,-84,-88,127,4,-5,38,-4,-56,-76,90,78,3,34,10,-45,19,-26,-33,49,-58,59,-71,82,21,-90,57,53,-10,-74,-45,71,-68,-62,97,80,-47,3,13,-77,121,90,-58,-71,9,105,49,-33,104,106,-81,21,94,-69,-71,-73,-87,-29,119,34,33,93,24,-34,-74,43,-14,93,37,-18,97,101,0,57,-15, 
  /* [10][0][][] */ -85,68,95,-61,-12,111,112,28,38,36,28,-74,106,88,-29,6,-29,86,-92,-53,-12,34,61,-62,11,64,-108,-105,-43,87,-88,-75,88,107,127,55,-36,7,-27,39,-33,121,-112,-35,-107,-54,-11,-58,2,9,43,19,68,28,-57,-30,-94,-13,28,-39,2,80,117,56,124,-70,-90,-17,29,-22,-88,-58,88,52,-77,110,-5,68,71,0,82,3,63,109,-95,70,101,-18,43,12,-3,-62,-43,-41,-38,-67, 
  /* [11][0][][] */ 97,-4,-31,87,108,30,37,14,96,78,-94,96,-8,-98,11,-80,-73,-117,55,27,16,59,8,-127,-120,-110,-36,55,65,-9,11,-34,-103,-87,37,32,-80,59,-45,-74,-43,89,-89,-11,-58,-74,-106,-106,61,93,110,37,-105,-104,2,10,-79,-65,-39,-104,-92,72,77,1,26,71,-74,15,79,46,-96,-86,29,90,-111,35,-74,17,-62,73,-123,-37,-86,-56,30,-96,0,-41,-110,-24,-4,-107,-97,-46,-82,-47, 
  /* [12][0][][] */ -11,57,-51,7,95,17,-29,37,-76,68,-10,10,-38,21,55,-86,-95,-26,-44,-74,35,-4,23,107,-89,-40,111,-95,102,23,-31,126,-85,-63,-37,-2,3,-74,-12,50,123,49,-115,-37,-28,-81,-44,123,-41,-111,-72,117,45,9,-78,94,-13,-57,54,75,66,120,3,71,124,40,-41,127,67,104,48,83,90,105,-11,-1,-26,42,-113,-118,-53,110,56,23,-31,37,58,126,-88,-107,97,52,114,-6,37,77, 
  /* [13][0][][] */ 90,-74,111,104,102,121,89,65,76,-106,16,-35,101,81,73,-54,-116,-66,-71,36,76,-23,126,-43,-85,50,13,26,-86,-84,90,44,46,115,-14,21,-82,-30,29,76,-64,86,-57,14,-53,32,-8,-32,41,110,-30,-101,-96,36,109,-80,-43,31,-24,-71,-24,115,-74,29,-48,-61,-90,94,-35,-19,104,7,-92,22,-77,-39,-99,74,89,-85,59,-97,106,28,-80,-102,98,127,-4,-52,-77,62,125,-47,75,-10, 
  /* [14][0][][] */ -69,-107,75,55,76,-40,-29,-125,-90,-44,54,72,-29,-89,-103,-92,-62,-72,8,11,-54,20,-13,47,-121,-82,-45,21,-121,-117,-85,25,95,-35,-45,0,84,101,22,-122,-20,-122,26,76,53,-122,50,-97,103,36,76,40,89,-26,-29,0,-56,8,44,87,-22,-90,-34,66,-94,-26,64,-115,-96,-95,-93,89,-1,68,41,-84,50,-117,41,24,32,-26,-125,-42,-127,-103,-118,93,97,-7,76,-59,79,91,-27,61, 
  /* [15][0][][] */ 39,-25,-36,64,87,-92,53,-102,53,-7,-78,9,100,-5,-97,-118,82,3,-96,18,41,11,64,101,95,58,31,86,15,49,58,-106,2,-1,-71,0,-73,106,102,-76,10,104,-54,-30,21,-83,-46,-85,-13,-86,-10,23,-104,-108,-55,-14,62,46,-46,101,-51,-70,-6,94,-42,91,-79,-5,-66,2,56,-80,12,-13,52,-113,-9,48,97,101,-88,53,-114,-69,-127,-43,-99,31,78,63,-117,-45,48,103,-112,110, 
  /* [16][0][][] */ -46,17,107,-71,44,113,-65,41,51,46,-120,83,-23,-59,-61,-58,110,78,71,60,112,79,-47,50,-11,48,-80,63,-115,6,38,7,-116,74,50,84,-42,56,-61,-79,20,-56,78,95,76,106,114,-16,-65,-127,-1,109,-51,116,65,43,23,92,76,8,118,115,29,54,50,9,-45,93,39,106,-39,-19,29,114,62,91,-22,102,-123,13,9,-92,54,5,7,106,107,3,75,10,-18,114,66,-43,-98,29, 
  /* [17][0][][] */ 14,-124,17,91,-47,-91,-45,-79,51,-78,92,56,110,74,-94,55,43,63,111,126,-69,1,24,-31,-7,83,-58,36,116,-29,-16,83,-38,-4,50,-14,-42,98,-64,-13,-76,-24,-1,-12,-8,27,86,-89,72,117,4,44,-1,91,106,-52,-112,96,-89,-90,48,-72,87,101,-59,-51,53,-78,-82,11,117,45,27,-115,-55,58,127,-45,53,-85,26,2,-53,-68,-92,61,91,-12,37,85,-73,-97,7,103,30,22, 
  /* [18][0][][] */ -85,111,127,-62,19,-81,-92,24,-4,94,-96,-30,-35,34,58,-45,27,-21,65,-24,92,-38,26,-70,52,-87,-13,117,28,29,4,38,48,-25,-98,-72,-8,31,-26,58,-36,1,-44,-4,-98,15,22,-1,19,-24,63,27,-93,-9,3,79,-39,31,-4,-102,78,116,11,56,-64,-108,-25,80,62,-67,-66,100,-88,-12,-66,-76,48,68,1,-45,-50,-6,-25,-60,95,-28,66,61,-98,-68,-58,94,80,-49,43,-8, 
  /* [19][0][][] */ 43,56,72,41,75,-80,91,87,91,-59,29,-6,-89,32,-52,72,69,-98,103,54,-20,76,-51,12,97,-75,27,-64,-86,-112,-61,43,78,-78,31,26,9,-64,-52,-93,43,-109,-76,11,-78,29,77,-87,-24,35,-37,42,-33,14,5,-9,22,96,13,-23,53,-51,95,59,-66,-1,-24,1,-9,52,72,-48,-55,-99,-52,-74,-22,-105,14,127,55,-104,-28,73,-81,-6,13,-3,84,29,-2,60,-30,106,66,-44, 
  /* [20][0][][] */ 16,79,64,87,-81,82,13,54,14,7,-85,6,-12,78,35,-65,-53,-40,-66,-36,17,-47,-77,-72,93,-75,-104,41,16,6,-42,103,95,37,-21,71,35,-33,-20,-107,-83,-37,-86,-100,-21,-64,-64,97,57,-119,-102,31,40,100,44,-4,83,66,93,80,101,-55,-70,-38,-33,-67,-53,9,-86,-74,-70,69,-65,-69,24,15,98,69,100,127,77,2,74,-28,53,108,-17,65,13,87,23,58,16,17,-10,3, 
  /* [21][0][][] */ 69,60,72,-97,98,-73,74,14,-6,-63,-68,23,8,41,-49,-94,-98,-26,25,-10,107,-45,71,-78,37,-78,-29,73,15,8,-7,-18,8,25,-85,-127,108,91,-112,-31,-8,10,21,-13,-111,-80,-92,86,-21,-65,-3,88,37,69,-89,25,-48,50,-50,118,54,-82,15,-2,82,31,-33,-66,-105,-11,59,80,32,-44,69,66,-103,-27,62,82,13,96,36,-67,25,-94,61,-79,-98,75,102,-107,-39,-63,67,-36, 
  /* [22][0][][] */ 23,-67,-83,-100,86,-57,97,45,-100,74,-85,-110,112,-120,-124,-94,25,71,-110,-64,76,-84,18,20,80,-14,-120,92,-65,-76,-76,-114,45,48,16,-2,-10,-28,-65,-122,-11,-26,-11,79,42,-127,77,-34,-73,-81,0,-24,-70,-100,-58,23,-22,-41,-27,-41,98,-86,-84,-119,-71,7,-123,-50,102,90,-31,-12,-77,-1,51,-102,41,-63,53,80,93,-103,-82,-123,65,70,83,-42,-65,20,-68,58,11,11,-37,87, 
  /* [23][0][][] */ 42,-122,9,65,106,-124,7,-125,54,-98,93,69,21,-112,22,-53,98,-33,-119,113,102,-87,115,-36,-48,-7,95,27,74,56,79,-44,-42,54,28,8,107,-14,-127,7,-120,4,1,-125,-90,-108,107,20,84,-120,-98,-53,87,-65,-59,96,-97,-33,100,52,-127,-110,-57,1,39,38,-126,-121,71,-24,118,-72,-15,-50,-44,-104,57,-23,104,100,-59,-65,25,-111,103,8,120,-24,-96,39,110,-16,120,-52,-37,86, 
  /* [24][0][][] */ -83,-57,-115,-77,-90,-118,-79,-101,63,116,78,42,114,56,-49,-127,-92,37,23,-56,93,-91,-65,-46,51,-36,69,52,104,53,-3,-66,-2,3,47,24,-63,-95,61,-28,-83,-110,99,-3,16,-45,40,68,-92,-53,-27,11,66,57,66,-82,-10,74,24,-6,87,-12,33,92,-106,93,-55,-97,-109,47,-65,-34,-47,38,92,97,60,-86,-115,-89,-89,-104,-71,-125,-5,59,-21,-109,21,-119,3,-81,-25,26,-101,26, 
  /* [25][0][][] */ -89,-67,-90,-17,87,-78,-115,45,40,-121,-49,16,69,-11,-122,-32,-84,53,25,-114,62,77,-21,-69,6,-58,-114,30,69,-98,32,113,90,-120,40,66,91,-66,-31,-28,-92,90,-117,-6,94,34,65,27,-116,88,-74,-2,35,-22,-71,9,-30,46,-115,67,115,35,47,41,-5,68,-28,-14,-98,-13,-34,-125,26,-118,66,13,64,65,6,18,42,43,-53,77,-87,-57,-115,-101,-31,-47,99,22,-127,-19,-23,-87, 
  /* [26][0][][] */ 80,-103,-26,-17,-101,-10,-16,-13,-108,-127,105,94,-84,-53,7,-8,110,25,-83,-73,10,68,97,10,74,57,7,43,10,0,-97,-5,-33,-68,-107,-85,-69,85,-55,107,-101,99,60,31,-67,72,-36,103,-25,25,-9,95,7,-52,-8,-110,94,65,58,21,-1,-96,61,-33,110,-22,-61,55,-92,84,85,92,81,-87,-91,6,41,-113,-101,34,-32,76,79,-79,77,-2,-46,10,-88,113,11,14,-62,109,48,93, 
  /* [27][0][][] */ 35,7,-65,-105,-115,-64,-74,-21,38,100,33,-111,-32,52,77,-28,61,-21,60,-87,-98,7,-32,-28,-80,41,-112,-7,60,24,-37,-13,59,64,-92,-85,-92,-68,-116,84,-98,13,24,13,100,20,67,98,86,62,55,-79,-94,-89,-10,-38,97,-28,-101,-81,-62,-56,-37,51,35,-51,-116,101,45,9,-121,3,58,-43,-10,-91,43,-69,83,127,80,-30,111,-60,-78,-85,-37,26,-53,-8,-40,-53,51,15,82,72, 
  /* [28][0][][] */ 79,-16,79,34,-116,-64,-109,-87,-48,-118,48,70,-81,-96,-9,90,83,100,-73,73,-37,12,-121,-86,-127,70,-92,-62,-76,-77,-13,-28,-113,5,74,62,7,-120,-47,20,92,31,-106,39,-121,-21,2,36,11,-64,-80,-44,-88,12,43,30,56,-24,74,41,-13,-51,-101,0,47,62,-33,73,-80,19,-112,-51,58,30,-12,-109,-121,-76,-98,34,-85,-100,107,-41,50,-122,54,-93,-112,-82,-40,-68,-43,47,-107,-74, 
  /* [29][0][][] */ 83,72,62,-52,-87,13,-125,8,108,-15,-94,-87,108,-111,-50,-37,-105,108,30,-73,-83,-34,60,5,-13,6,-46,-29,-110,-13,111,-8,56,0,-83,-38,-10,110,-13,103,52,112,-41,88,7,110,-52,-25,19,-10,57,-104,74,-108,116,47,-102,59,-47,118,-127,111,-103,-55,-69,-69,57,97,101,-79,35,-79,119,95,66,29,117,-64,-32,62,-7,-90,-13,-85,68,127,51,80,-43,102,76,81,-113,17,-6,73, 
  /* [30][0][][] */ 50,-30,-30,57,-71,48,-35,15,127,13,26,-17,-89,36,80,29,16,53,89,-74,55,-68,-79,36,-73,41,-43,123,2,-93,-66,30,-56,-42,-87,-21,37,13,22,42,108,-46,9,120,124,-14,120,79,-41,74,28,-76,92,-24,15,117,-55,-45,-60,-33,-73,18,-45,-17,-81,-56,-63,101,-42,118,51,-17,-62,124,65,-55,-47,-41,-46,-27,47,48,-81,-6,-74,53,-83,116,-18,-82,89,67,-17,11,21,-50, 
  /* [31][0][][] */ 107,-94,34,101,53,64,-64,-100,-33,7,-84,-80,106,-127,-52,112,-66,-95,52,52,62,33,-35,105,50,-119,33,37,-74,-61,45,109,17,18,-95,20,96,-33,-44,-117,59,-73,-34,31,2,-55,-39,24,69,41,100,-32,-119,-60,-84,23,-121,95,20,113,-26,4,89,-79,92,112,-50,-82,75,-104,-121,8,-98,-43,5,3,-63,-51,47,106,-81,-42,57,73,54,96,-99,15,15,-55,-84,-37,9,104,12,-19, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018316969508305192, 0.0018266931874677539, 0.0018006783211603761, 0.0017434327164664865, 0.0017764813965186477, 0.0017796679167076945, 0.0017973710782825947, 0.0017575975507497787, 0.0017154263332486153, 0.002020941348746419, 0.0018524861661717296, 0.0018189765978604555, 0.0017727025551721454, 0.001770671340636909, 0.0018498200224712491, 0.0018357578665018082, 0.0016957842744886875, 0.0019811328966170549, 0.0019975379109382629, 0.0019248311873525381, 0.0019089446868747473, 0.0018818828975781798, 0.0018717953935265541, 0.0016684381989762187, 0.0017703011399134994, 0.0017841062508523464, 0.0018093442777171731, 0.0018244698876515031, 0.0018132166005671024, 0.0017108756583184004, 0.002003887202590704, 0.0017939214594662189, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -3085, 5769, 11169, 3528, -4974, -5703, 32937, 3008, 4170, -2512, 14121, -399, -14836, 3402, 26089, 9031, 22271, 8326, -6655, -9239, 6933, 48074, 34173, 31026, 1927, 1522, 6916, 4381, 3767, -7354, 11009, -4078, -442, 6675, -29, 1473, 16294, 8069, -2416, 7686, 13397, 7578, 6630, 18001, 7793, 6406, 2774, 10330, 6236, -8093, -10755, 846, -451, -1825, 4049, 92, 262, -1574, -6106, 20418, -1524, 1912, -1668, -3061, -4807, 10056, 35417, 3187, -3260, 1070, 2301, 3024, 2722, -1840, 856, 16007, -862, 29839, 26492, -1314, 14678, 2776, -843, 2002, 18382, 10422, 7429, 1950, 9908, 6758, -588, -11992, 1233, -3065, -2859, -2796, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00020629336358979344, 0.00027387859881855547, 0.00021373984054662287, 0.00025144979008473456, 0.00021052162628620863, 0.00026085253921337426, 0.00010107515117852017, 0.00023696916468907148, 0.00014463953266385943, 0.00025330702192150056, 0.00013999379007145762, 0.00019614477059803903, 0.00017105166625697166, 0.00083471316611394286, 0.00011888739390997216, 0.00012922441237606108, 8.2920902059413493e-05, 0.00017309463873971254, 0.00029470759909600019, 0.00018305616686120629, 8.6298605310730636e-05, 5.6154585763579234e-05, 9.007767221191898e-05, 5.4532771173398942e-05, 0.00011423309479141608, 0.00031329266494140029, 0.0004321897285990417, 0.00024413055507466197, 0.00014026256394572556, 0.00026701332535594702, 0.00013475795276463032, 0.00019001832697540522, 0.00015647236432414502, 0.00017455995839554816, 0.00021410414774436504, 0.00016248736937996, 0.0001163256965810433, 0.00013237913663033396, 0.00025291135534644127, 0.00023161890567280352, 9.5478171715512872e-05, 0.00034214486368000507, 0.00022630119929090142, 0.00012895808322355151, 0.00024708572891540825, 0.00015739849186502397, 0.00017876084893941879, 0.00020862749079242349, 0.0002145871112588793, 0.00016041283379308879, 0.00014583996380679309, 0.00011900285608135164, 0.00032395884045399725, 0.00016337823763024062, 0.00019109320419374853, 0.0001943531387951225, 0.00034179474459961057, 0.00017226977797690779, 0.00025462257326580584, 9.0166256995871663e-05, 0.00049826584290713072, 0.00034453003900125623, 0.00017165267490781844, 0.00025540671776980162, 0.00038630011840723455, 0.00019140397489536554, 6.1382859712466598e-05, 0.00012960072490386665, 0.00035110826138406992, 0.00031360404682345688, 0.00017841988301370293, 0.00016588009020779282, 0.00049814133672043681, 0.00022627275029662997, 0.00019247079035267234, 0.00013421580661088228, 0.00016389957454521209, 6.2004219216760248e-05, 6.8044508225284517e-05, 0.00013532312004826963, 9.8955366411246359e-05, 0.00012075838458258659, 0.00010099574865307659, 0.00012591047561727464, 9.8304175480734557e-05, 0.0002284847287228331, 0.00031700724503025413, 0.00015063695900607854, 7.1808288339525461e-05, 0.00030244409572333097, 0.00014511102926917374, 0.00016614567721262574, 0.00018816905503626913, 0.00034218316432088614, 0.00021636710152961314, 0.00014101924898568541, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -32,93,-7,-127,-37,-30,-34,-71,-21,22,-1,74,22,-65,-12,49, 
  /* [1][0][][] */ -37,16,-71,-11,-28,-36,38,-83,70,58,-63,23,13,13,56,-127, 
  /* [2][0][][] */ -7,16,-43,27,36,26,-46,-71,127,-40,5,19,-21,100,-60,14, 
  /* [3][0][][] */ 48,-67,7,-90,0,-34,-14,5,100,-12,57,29,-5,36,8,127, 
  /* [4][0][][] */ -71,40,22,42,-4,-26,-7,35,6,0,14,-29,-127,-17,-17,37, 
  /* [5][0][][] */ -6,70,108,1,20,83,-73,73,-46,71,-16,-23,30,-36,-127,11, 
  /* [6][0][][] */ 46,-69,127,-121,38,-7,-45,112,-76,-107,48,-47,8,85,-33,102, 
  /* [7][0][][] */ 44,115,-29,-53,101,10,2,-46,127,107,-34,15,33,-33,58,51, 
  /* [8][0][][] */ 6,-81,13,-82,13,-49,14,-75,29,53,74,-3,10,127,78,57, 
  /* [9][0][][] */ 7,-33,-4,127,41,-10,40,-63,-65,117,32,-21,-7,-60,-3,-7, 
  /* [10][0][][] */ -7,27,-43,-127,8,-3,-8,33,29,-40,16,-30,-18,-50,-6,28, 
  /* [11][0][][] */ 6,15,25,-19,91,-35,87,-61,-93,42,-6,28,3,127,-77,-30, 
  /* [12][0][][] */ 86,-22,-122,-6,48,-85,19,30,7,72,-97,-67,-35,127,-1,51, 
  /* [13][0][][] */ -14,3,-21,14,3,-127,-6,18,5,-12,4,-3,10,-17,6,14, 
  /* [14][0][][] */ 30,-31,96,-20,56,-2,-127,-79,-19,-46,17,8,10,-63,-26,-17, 
  /* [15][0][][] */ -69,16,-17,-48,6,-6,127,59,-39,47,62,-32,22,65,48,0, 
  /* [16][0][][] */ 6,70,127,97,-5,26,97,64,-87,11,-64,1,7,13,4,-92, 
  /* [17][0][][] */ -43,-104,-16,26,-73,-19,-56,11,-127,-29,18,-41,-6,44,65,-43, 
  /* [18][0][][] */ -2,44,2,62,38,8,25,-6,73,44,-25,-25,11,127,52,15, 
  /* [19][0][][] */ 18,-29,36,15,100,11,-85,-55,-95,-65,-44,-127,-30,-38,3,-28, 
  /* [20][0][][] */ 80,-50,-63,-37,-9,-127,5,4,-47,20,-97,-4,21,0,23,1, 
  /* [21][0][][] */ 70,-20,58,-22,-9,-2,10,104,-4,-81,75,36,2,127,48,71, 
  /* [22][0][][] */ -13,29,-29,127,-50,-4,75,69,-10,28,-21,26,1,0,17,15, 
  /* [23][0][][] */ 92,-10,111,-95,66,-27,-5,74,3,30,-10,-39,15,-31,-127,46, 
  /* [24][0][][] */ -127,43,21,-21,8,104,30,-12,-4,16,106,-12,-75,28,63,-27, 
  /* [25][0][][] */ 28,24,14,21,15,9,64,-51,-6,-127,-15,-20,-9,-32,15,19, 
  /* [26][0][][] */ -35,-8,1,13,-48,-15,-45,-33,-119,-35,-3,-43,13,127,-44,62, 
  /* [27][0][][] */ -8,32,6,60,35,-26,-14,-35,57,7,-22,3,4,127,-7,9, 
  /* [28][0][][] */ 24,71,67,69,127,-17,25,43,-102,-28,-62,-46,24,97,50,-27, 
  /* [29][0][][] */ 4,-6,8,12,27,-4,5,34,-20,-7,-18,-127,2,-16,-13,9, 
  /* [30][0][][] */ -17,80,-44,83,-45,-23,36,-127,-46,53,-23,-9,58,35,74,98, 
  /* [31][0][][] */ -46,-17,-16,-78,-11,6,-57,-116,25,82,-7,-127,-40,-54,9,16, 
  /* [32][0][][] */ -127,-71,-12,52,50,39,-10,3,-2,-39,-95,49,70,5,65,62, 
  /* [33][0][][] */ -10,-47,-35,4,-104,-16,-101,5,73,12,10,-60,31,-122,127,47, 
  /* [34][0][][] */ 47,-5,65,20,49,23,-49,83,-88,-52,77,28,14,-3,-15,127, 
  /* [35][0][][] */ -41,55,-75,24,-4,-23,30,-118,103,104,-88,0,9,-11,70,-127, 
  /* [36][0][][] */ -43,49,7,111,26,31,127,11,-2,37,-16,-1,-22,25,-60,-61, 
  /* [37][0][][] */ -4,-1,10,-76,-7,4,-33,-59,-77,-13,9,-1,-6,-127,74,-46, 
  /* [38][0][][] */ 45,83,-8,-44,127,-5,26,-31,104,75,-21,-8,13,-30,42,18, 
  /* [39][0][][] */ -29,69,-5,-127,-17,11,-47,34,44,-74,-24,-19,10,77,48,30, 
  /* [40][0][][] */ -10,-15,13,-108,4,-6,6,-43,-127,12,0,-15,-6,-111,105,-87, 
  /* [41][0][][] */ -11,-10,-45,-18,-1,-29,21,-9,-31,13,-42,-5,-127,17,32,30, 
  /* [42][0][][] */ 125,101,-33,-26,-71,-45,-17,-59,4,29,90,-47,-62,50,99,-127, 
  /* [43][0][][] */ -22,125,-81,-12,59,-7,127,-44,60,94,-33,9,22,-104,-62,-71, 
  /* [44][0][][] */ -23,-8,2,-52,67,2,-88,-127,-19,-7,23,12,3,-25,83,-70, 
  /* [45][0][][] */ -15,50,-127,-49,19,-61,31,-76,5,28,11,-64,23,-14,60,-28, 
  /* [46][0][][] */ 4,2,-17,-84,-12,14,15,-35,-112,-20,8,14,-12,-127,60,-35, 
  /* [47][0][][] */ 18,51,20,-20,127,-11,-23,12,-51,43,4,25,2,3,116,-32, 
  /* [48][0][][] */ -127,-68,-19,35,54,20,10,-24,2,-22,-99,44,52,12,77,46, 
  /* [49][0][][] */ 23,6,92,69,127,-8,50,37,-127,-45,-44,-86,21,114,28,-55, 
  /* [50][0][][] */ 33,-17,-87,-7,34,-127,-36,-7,-16,-19,-10,-49,40,-17,-9,16, 
  /* [51][0][][] */ 11,36,42,11,26,0,0,28,-127,61,2,-126,15,-117,-27,96, 
  /* [52][0][][] */ 2,54,8,57,37,1,17,29,73,75,-25,-52,29,127,59,27, 
  /* [53][0][][] */ -4,-57,-20,-15,-93,-13,-87,2,51,23,11,-66,33,-127,125,24, 
  /* [54][0][][] */ 48,-7,-48,2,126,89,-127,-54,-82,-15,-26,-69,-7,-47,-14,-48, 
  /* [55][0][][] */ 53,-12,12,10,38,-45,-73,-127,-35,-75,-66,4,-6,-24,13,2, 
  /* [56][0][][] */ -22,17,20,-22,-7,-21,-88,64,-7,127,2,-10,24,8,-2,2, 
  /* [57][0][][] */ -5,20,-46,-18,-57,-46,127,87,-24,30,-8,2,24,29,123,-14, 
  /* [58][0][][] */ 45,23,-127,27,86,101,-38,42,-98,-42,0,9,-38,23,4,-27, 
  /* [59][0][][] */ -108,75,113,20,-86,-62,127,123,24,2,36,-13,9,14,79,-3, 
  /* [60][0][][] */ 3,-11,-58,-7,20,-127,-20,-7,-9,-14,1,-18,32,-21,6,-2, 
  /* [61][0][][] */ 24,-12,29,127,79,18,23,9,-99,1,10,35,-9,16,29,-47, 
  /* [62][0][][] */ -45,127,12,-49,-24,-11,-60,58,-20,-56,-84,-55,-4,-96,-52,-40, 
  /* [63][0][][] */ -44,29,-27,127,-84,13,-70,-36,-60,-29,-24,-38,25,68,42,40, 
  /* [64][0][][] */ 15,-3,6,39,9,5,-20,70,22,6,-22,-51,-7,-127,48,2, 
  /* [65][0][][] */ -11,-49,18,-127,42,-44,56,-31,-11,47,4,-127,-14,-6,14,-37, 
  /* [66][0][][] */ 40,-8,58,-27,17,4,1,111,-2,-58,43,30,11,127,27,57, 
  /* [67][0][][] */ 1,51,-17,-127,-16,-4,-62,38,87,-99,-31,-8,30,82,74,41, 
  /* [68][0][][] */ -25,30,127,16,12,0,-8,3,-41,-16,-23,-39,14,-20,78,-24, 
  /* [69][0][][] */ 127,71,-9,0,-83,-39,-33,-32,0,17,82,-60,-57,51,62,-86, 
  /* [70][0][][] */ 43,2,-48,-5,-25,21,46,127,-33,80,-39,0,12,56,-29,27, 
  /* [71][0][][] */ 3,1,-11,5,1,-74,6,15,-37,18,-73,11,-127,1,43,40, 
  /* [72][0][][] */ 9,25,-127,13,8,16,31,91,-42,-24,12,-4,21,22,3,1, 
  /* [73][0][][] */ -48,21,44,5,45,-35,-79,-127,18,-72,34,-19,14,-46,39,-14, 
  /* [74][0][][] */ -5,41,35,127,13,-3,-83,82,-67,18,-45,51,19,-122,44,-102, 
  /* [75][0][][] */ -17,36,-65,2,21,1,28,-23,113,35,-3,7,20,127,-30,-14, 
  /* [76][0][][] */ -3,-11,-2,20,3,-10,-8,64,16,-33,-16,-127,-8,-3,6,9, 
  /* [77][0][][] */ -25,36,-19,127,-59,32,74,86,19,45,2,50,-26,-16,-10,-26, 
  /* [78][0][][] */ -7,8,33,-115,31,-23,-43,30,35,-57,16,-27,13,127,21,43, 
  /* [79][0][][] */ -15,-100,-78,-67,-78,-11,34,-75,127,17,18,58,23,49,47,-51, 
  /* [80][0][][] */ -63,-13,122,-125,16,-37,20,-123,-69,57,-37,-108,32,127,113,-68, 
  /* [81][0][][] */ -42,41,-123,26,71,-127,-17,57,-6,-43,59,-7,29,-1,9,0, 
  /* [82][0][][] */ 127,-11,-1,20,4,-125,-26,17,-14,-18,-108,-2,108,14,-10,36, 
  /* [83][0][][] */ -33,73,-114,-81,-31,-21,42,-120,66,55,-49,-127,19,49,47,106, 
  /* [84][0][][] */ -41,39,62,-42,-3,-18,70,-127,-34,45,-2,-48,23,58,70,-13, 
  /* [85][0][][] */ -87,127,27,-119,-76,-26,-23,-8,-53,-1,-63,28,2,-5,-88,-32, 
  /* [86][0][][] */ -4,2,-27,7,-39,-35,127,28,3,-40,-5,3,6,29,85,-7, 
  /* [87][0][][] */ -25,-47,4,-122,6,-35,49,-17,-4,16,-9,-127,-21,6,12,-34, 
  /* [88][0][][] */ 99,-27,44,1,31,-118,6,44,-49,51,-127,-63,30,26,66,3, 
  /* [89][0][][] */ 17,-18,-47,-58,21,-8,-20,-13,-48,3,39,-61,127,-1,34,-51, 
  /* [90][0][][] */ 5,-65,46,-63,73,-10,-80,101,64,-96,-48,-36,-9,127,18,-127, 
  /* [91][0][][] */ -53,-4,-25,-45,15,-11,-36,-108,12,63,-4,-127,-39,-21,3,5, 
  /* [92][0][][] */ -21,18,43,20,-3,-127,9,4,3,-24,-2,-18,3,-26,15,12, 
  /* [93][0][][] */ 36,-18,127,-16,-53,59,33,-32,-20,27,-68,-15,-23,-1,36,-2, 
  /* [94][0][][] */ 34,1,-15,-18,32,-10,-12,0,-30,-14,11,-65,127,-15,27,-28, 
  /* [95][0][][] */ 127,95,-7,30,-96,-13,-65,-7,-26,-16,95,-41,-44,30,83,-80, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00080848950892686844, 0.0010733645176514983, 0.00083767314208671451, 0.00098546314984560013, 0.00082506058970466256, 0.0010223137214779854, 0.00039612615364603698, 0.00092871178640052676, 0.00056686042807996273, 0.0009927419014275074, 0.00054865318816155195, 0.00076871586497873068, 0.00067037285771220922, 0.0032713452819734812, 0.00046593457227572799, 0.00050644663861021399, 0.00032497738720849156, 0.00067837955430150032, 0.0011549959890544415, 0.00071742001455277205, 0.00033821503166109324, 0.00022007685038261116, 0.00035302565083838999, 0.00021372074843384326, 0.0004476937756408006, 0.0012278330978006124, 0.0016938055632635951, 0.00095677818171679974, 0.00054970651399344206, 0.0010464586084708571, 0.0005281332996673882, 0.00074470561230555177, 0.00061323476256802678, 0.00068412232212722301, 0.00083910091780126095, 0.00063680834136903286, 0.00045589494402520359, 0.00051881041144952178, 0.00099119124934077263, 0.00090774346608668566, 0.00037419088766910136, 0.0013409084640443325, 0.00088690267875790596, 0.0005054028588347137, 0.00096835987642407417, 0.00061686435947194695, 0.00070058612618595362, 0.00081763725029304624, 0.00084099371451884508, 0.00062867795350030065, 0.00057156506227329373, 0.00046638707863166928, 0.0012696351623162627, 0.00064029975328594446, 0.00074891815893352032, 0.00076169427484273911, 0.0013395363930612803, 0.00067514681722968817, 0.00099789770320057869, 0.00035337283043190837, 0.0019527662079781294, 0.0013502562651410699, 0.0006727282889187336, 0.0010009708348661661, 0.0015139584429562092, 0.00075013609603047371, 0.00024056709662545472, 0.00050792144611477852, 0.0013760371366515756, 0.0012290534796193242, 0.00069924985291436315, 0.00065010483376681805, 0.0019522783113643527, 0.00088679121108725667, 0.00075431709410622716, 0.0005260085454210639, 0.00064234295859932899, 0.00024300228687934577, 0.00026667493511922657, 0.00053034821758046746, 0.00038781846524216235, 0.00047326722415164113, 0.00039581497549079359, 0.00049345887964591384, 0.00038526635034941137, 0.00089546025265008211, 0.0012423910666257143, 0.00059036508901044726, 0.00028142565861344337, 0.0011853162432089448, 0.00056870828848332167, 0.00065114570315927267, 0.00073745806002989411, 0.0013410586398094893, 0.00084796972805634141, 0.0005526720779016614, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8948, 11606, -16730, -4137, -10974, 6353, 28869, -52841, 621, 18486, 24078, 15940, -7908, 14915, -4593, 16133, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00083850265946239233, 0.00044846648233942688, 0.00020946760196238756, 0.0002168606297345832, 0.00039918656693771482, 0.00036547702620737255, 0.00039899945841170847, 0.00027362164109945297, 0.00035941906389780343, 0.00026561971753835678, 0.00068936229217797518, 0.00063201325247064233, 0.00046512065455317497, 0.00021442315483000129, 0.00050638982793316245, 0.00046559065231122077, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -14,-12,5,-28,18,-5,-38,3,18,2,-11,2,-11,-8,-26,1,-7,4,-7,1,5,-28,1,5,1,13,4,127,31,-33,39,-8,-2,7,8,5,-7,10,-35,-3,-15,5,-2,35,9,13,9,8,24,-4,-10,8,18,-17,-14,75,7,6,-25,-31,-6,26,-4,-23,-38,-63,-25,36,4,11,16,-18,-6,-36,-4,-25,-23,14,6,4,-12,-25,24,18,-6,-12,-5,-88,2,-15,3,-4,46,-30,-32,-15, 
  /* [1][0][][] */ 33,-61,-77,-53,127,-11,59,39,-20,-81,-53,-11,9,-3,-57,36,-62,10,44,42,17,31,-19,-49,26,-8,-9,-63,25,-26,-59,34,-19,32,4,1,13,-1,8,23,-29,33,-37,-20,-43,83,12,11,19,-70,15,-43,-14,38,60,17,-51,-18,-35,-28,27,-18,6,-41,-79,92,-29,-20,1,-25,-14,11,55,-107,-28,11,35,-42,43,10,6,-21,24,-2,-48,33,-17,27,26,-36,-3,5,27,5,35,90, 
  /* [2][0][][] */ 9,52,-79,-7,87,85,25,83,2,-102,8,-27,-13,-7,25,22,11,-17,-52,73,15,8,79,15,44,30,-4,-47,35,-3,48,-51,27,44,-28,40,-127,-96,26,25,-4,-48,10,-28,17,-35,-5,68,-35,12,-36,-12,93,-9,-18,46,42,4,40,7,24,22,23,-28,20,-3,-33,-6,-45,11,-16,-41,-52,-84,14,57,78,50,41,-13,24,-45,7,-12,-50,18,14,43,-13,18,4,-23,-7,-27,-66,0, 
  /* [3][0][][] */ 61,21,84,-11,49,-33,22,-12,-22,-62,15,-41,0,37,36,92,26,-1,31,1,127,-11,33,14,61,-21,-19,15,24,42,-9,86,-98,26,25,-10,-24,-21,-8,41,-78,-34,80,12,22,37,-41,-88,-56,-30,-49,37,2,-115,10,21,-106,73,52,42,19,93,-8,-50,30,70,-8,-51,31,-23,2,-68,47,-38,55,-13,10,5,48,48,-21,-69,18,-15,-24,19,25,42,24,17,21,37,38,96,39,-36, 
  /* [4][0][][] */ 21,-5,20,-9,127,37,-3,-17,-35,-47,-37,-34,-47,21,-5,47,28,-75,-40,84,-16,2,27,-18,-2,-5,13,-37,5,-10,57,-32,81,16,-20,13,43,19,11,12,-26,-9,-27,-23,-4,-53,-14,11,35,10,-23,8,-6,-32,7,-23,30,-11,-34,31,2,58,57,25,45,44,-17,-4,-42,4,39,55,12,-73,-41,-34,31,39,82,-33,-7,-39,2,-9,-70,1,42,48,-45,32,2,-44,12,11,26,-21, 
  /* [5][0][][] */ 5,-12,-21,10,28,-19,45,-34,-27,-42,-20,13,8,33,5,16,-7,-4,20,-8,37,3,-42,68,20,-8,11,-93,-7,31,13,31,1,1,8,-64,24,31,-6,12,-3,-2,33,-13,0,1,9,-24,-15,-12,18,-13,-5,-23,2,-40,-9,20,-30,14,69,16,9,36,-3,53,7,79,9,89,9,32,18,18,-12,73,-29,-8,12,17,-2,-6,-2,20,-5,26,-13,127,-3,36,0,-15,7,10,-57,19, 
  /* [6][0][][] */ 31,-75,23,-34,-31,17,30,27,9,-2,-14,-76,-43,-8,-35,34,17,-4,-7,-1,-37,44,14,6,-33,1,-15,-16,-17,11,37,-9,52,13,56,-2,-9,-19,20,-91,-28,89,-1,-39,9,-25,-26,20,-18,29,-32,62,-15,-61,-22,-16,9,-65,0,6,-10,58,31,-74,28,-25,5,-21,-3,7,127,-1,-45,2,-25,21,-76,-13,24,-1,27,41,19,-4,-30,-6,41,27,12,1,52,-39,-12,0,-35,-13, 
  /* [7][0][][] */ 12,127,53,15,114,52,39,-26,-21,-30,43,-22,-37,26,17,25,11,-41,-2,34,33,-23,39,10,-15,19,16,7,25,-21,9,19,42,-6,-46,14,25,-1,-6,85,-56,25,15,16,-17,-28,24,-17,-34,-38,24,5,27,-39,-49,40,55,1,-9,-2,-17,-44,-12,-8,-57,76,-40,-93,-13,-36,-3,63,-24,-39,25,11,60,55,52,-19,-51,-42,-11,-11,-25,48,-9,-6,-35,21,-43,-36,-53,-11,30,-6, 
  /* [8][0][][] */ -5,-3,48,18,-127,-32,41,-17,28,80,61,11,-14,15,22,4,-44,8,13,-3,-37,-2,-104,63,19,-36,52,-15,13,7,-3,43,69,-24,0,-7,-22,-13,3,31,13,-34,40,8,-44,-2,44,5,-98,16,22,25,-59,-35,-26,44,12,-50,-77,-22,13,-30,-27,-5,10,67,-6,-54,16,-18,-41,-22,34,52,52,-7,-25,-39,-18,21,-79,9,-14,-2,25,20,54,32,21,-35,39,51,1,-2,41,10, 
  /* [9][0][][] */ 1,-109,-21,15,87,74,-26,-35,21,-33,95,96,-11,21,96,-108,13,-36,3,8,-55,-56,34,-16,-16,2,-8,23,-25,13,3,-11,26,10,-110,24,-9,20,-23,61,39,-79,-17,71,6,-8,-66,-39,35,34,-8,-76,55,31,-2,-46,-14,88,-22,-3,21,-58,-22,127,-84,-10,-3,-16,-1,22,-60,-72,54,6,-4,40,54,-60,14,9,-4,-17,10,29,5,-65,18,-11,-3,-37,-59,39,-65,-9,-12,-45, 
  /* [10][0][][] */ -44,-18,-31,-41,-22,-3,61,-19,37,20,31,34,24,-14,-8,-5,-4,21,-29,-16,-2,33,15,24,-12,-7,12,-127,23,-48,54,-38,0,18,-2,-6,-2,36,6,-7,9,-38,24,-52,6,-8,30,18,-9,37,-29,-21,-32,-27,-8,-57,21,12,-2,-39,25,13,-2,9,-33,83,-19,-33,13,-29,1,-21,-28,-12,21,53,-4,34,-17,20,-24,0,3,22,6,-19,-8,118,-6,-2,15,9,24,-42,46,-39, 
  /* [11][0][][] */ -81,16,-5,-2,17,-62,-15,-4,-50,-5,-8,21,32,26,-24,-2,46,0,-54,-52,18,-11,-10,0,72,3,57,0,-26,24,-42,17,-4,18,-10,-12,-10,7,25,10,-15,-2,4,5,78,15,70,14,41,41,-6,28,9,-57,26,-1,-69,-16,-33,-45,-8,-12,2,18,-5,-27,29,2,20,2,-5,31,-17,15,23,7,-21,75,-127,61,-38,-5,-67,-68,127,22,34,-12,6,47,-30,-54,-24,39,-24,-4, 
  /* [12][0][][] */ -10,-10,-35,-3,58,14,1,-17,-9,18,24,-2,4,-10,32,-14,-30,-13,11,-19,-10,-18,-35,43,-16,36,-24,88,-11,39,-36,8,-9,22,9,30,-14,-15,8,4,-1,-25,-2,6,-17,0,23,17,-4,-5,4,-18,-24,8,-8,-17,-11,-12,12,15,-16,-22,-4,43,44,-66,16,49,-30,-127,-8,46,4,8,11,83,-1,-6,-8,9,-4,19,-32,7,13,-21,-3,-49,-1,11,4,8,-39,36,-7,20, 
  /* [13][0][][] */ -72,65,2,-4,-68,10,-22,20,-34,-28,53,16,71,3,-23,4,-19,31,-48,-7,13,1,52,-58,51,41,-5,-10,16,-20,-28,-92,-98,-26,-1,8,-5,16,34,-18,-39,76,-7,5,45,5,-19,2,71,-19,21,75,62,-67,67,-26,-17,47,47,8,14,27,-22,14,3,-12,8,6,14,24,23,-127,4,-31,-68,-1,52,36,-41,-50,73,-19,1,-25,31,-41,90,9,-12,-11,-13,33,32,-33,-18,12, 
  /* [14][0][][] */ -29,20,-16,-48,29,4,-19,34,-83,1,23,7,-31,-72,-84,-30,-80,-9,66,12,35,1,26,-112,-46,20,-50,-27,18,-27,-10,-42,-78,-23,20,17,-15,-4,11,-3,4,80,-81,-21,-60,16,7,16,127,-26,20,-13,31,49,-107,16,-20,27,-97,12,10,30,39,33,11,29,-1,0,-52,29,61,36,25,-6,-23,21,55,-72,-25,-107,12,-35,14,48,28,-82,-50,9,-46,15,36,48,13,39,17,-15, 
  /* [15][0][][] */ -33,-81,-2,-43,-3,11,-12,-58,-23,20,0,-36,30,-17,40,-15,-100,-9,-22,13,-22,15,-63,-51,-19,-2,-6,9,-16,-17,60,-88,-6,27,16,9,-6,12,-100,0,22,-78,-6,19,-26,-49,48,31,48,9,-19,-127,-4,43,-11,25,42,-17,-11,40,3,-6,32,-5,0,1,-18,-10,-26,23,10,33,-45,-1,6,-41,-33,-16,12,5,-10,34,-5,67,-21,-49,-36,-36,-45,49,26,90,-46,3,-3,-16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.035636361688375473, 0.01905982568860054, 0.0089023727923631668, 0.0092165768146514893, 0.016965428367257118, 0.015532773919403553, 0.016957476735115051, 0.011628919281065464, 0.015275309793651104, 0.011288837529718876, 0.029297897592186928, 0.026860563084483147, 0.019767627120018005, 0.0091129839420318604, 0.021521566435694695, 0.019787602126598358, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 18938, 63817, -1116, -475, 14944, -4408, 751, -507, 5716, 13874, -2847, -218, 675, 4480, 5029, -8753, -4105, -448, -495, 13493, -10972, 16880, -3089, 7612, 33059, 755, -5732, 17417, 15297, -18990, 1204, 21851, 23770, -10308, 1887, -12, -311, -975, 4031, -7727, -5413, -864, -6863, 48, 29810, -956, 12690, -694, -14204, 1271, 35, -88, -2433, 19912, -3516, 15947, 19777, 156, 33501, -37, -9260, -973, 998, -133, -1811, 13181, -1415, -7341, -2556, 3385, 19, -4089, 1580, 306, -1885, -3103, -49, -2235, 47169, -7246, -5684, -12004, -572, 148, 62948, -12427, -10314, -27104, -6814, 10332, -2387, 34165, 273, -2094, -2951, 979, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012133802374592051, 8.8695785962045193e-05, 0.00012722850078716874, 0.0002435957285342738, 0.00023059477098286152, 0.00018642660870682448, 4.1059680370381102e-05, 9.2473208496812731e-05, 0.00027992893592454493, 0.00017449435836169869, 0.00029008506680838764, 0.00011477424413897097, 0.00026815311866812408, 0.00020031085296068341, 0.0004745525075122714, 0.00016232873895205557, 0.00020699558081105351, 0.00017610186478123069, 0.00015732394240330905, 8.5019622929394245e-05, 7.2124741564039141e-05, 5.3289430070435628e-05, 0.00013690025662072003, 9.179932385450229e-05, 9.9024196970276535e-05, 0.00011261551844654605, 0.00018818926764652133, 0.00017396314069628716, 8.1496975326444954e-05, 0.00047743701725266874, 0.00039744065725244582, 0.00024710252182558179, 0.00012932792014908046, 0.00016297934053000063, 0.00026031627203337848, 0.00043939478928223252, 0.00035526955616660416, 0.00018180983897764236, 0.00027438474353402853, 9.5444906037300825e-05, 0.00024523184401914477, 0.00027330243028700352, 0.00038083660183474422, 9.0359913883730769e-05, 0.00037737411912530661, 9.6134899649769068e-05, 0.00011772449215641245, 0.00033543241443112493, 0.00074021727778017521, 0.00011137982801301405, 0.00040611554868519306, 0.0001656362583162263, 0.00021361793915275484, 0.00013780589506495744, 0.00025073453434742987, 0.00011416844063205644, 0.00013941335782874376, 0.00051301479106768966, 5.0444057706044987e-05, 0.00016263299039565027, 0.00028507059323601425, 0.00037214494659565389, 9.8107513622380793e-05, 0.000147210419527255, 0.00013046280946582556, 0.00013802530884277076, 0.00026452107704244554, 0.00029376739985309541, 0.00019715442613232881, 0.00012558777234517038, 0.00026658672140911222, 0.00010003244824474677, 0.00029967087903060019, 0.00013909493281971663, 0.00039472873322665691, 0.00059018045431002975, 0.0001315918198088184, 8.8249929831363261e-05, 5.4905685828998685e-05, 0.00017114044749177992, 0.00023588843760080636, 0.00022116884065326303, 0.00015507971693295985, 0.00026418923516757786, 5.6380547903245315e-05, 0.00012373999925330281, 7.521864608861506e-05, 0.00052685558330267668, 0.00025696880766190588, 0.00013309282076079398, 0.00034944279468618333, 3.132215715595521e-05, 0.000150610416312702, 0.00010907804971793666, 0.00031755762756802142, 0.00028501794440671802, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -45,-72,-11,127,22,70,77,-58,-15,-18,-15,-4,-30,0,37,1,-9,-43,26,22,17,-127,127,5,-84,5,50,-28,-124,-127,40,23,12,26,61,-19,-30,-10,30,-7,-13,28,-106,71,25,-69,37,45,-18,52,-24,19,3,-6,16,47,-90,-50,-61,-19,-11,1,11,38,68,-25,73,13,-9,15,19,127,23,23,27,-2,-11,18,127,-7,-14,15,-29,21,124,20,-76,-17,0,-32,-15,-39,1,-26,-15,25, 127,-127,74,105,-43,127,38,-116,68,4,-17,127,127,-97,-13,15,11,127,127,-111,127,-79,80,67,-127,-118,-66,-34,-56,46,-59,-20,-88,53,-127,-84,-43,-14,-53,61,-1,127,127,83,-51,-114,-112,-50,-15,-127,43,84,68,-32,44,81,-47,41,-79,-113,-44,-41,-62,68,73,-61,26,30,-82,31,-17,90,116,127,14,18,1,58,-33,52,64,127,127,-23,-9,74,-112,127,-122,-100,5,-127,-90,-127,-38,105, -73,-13,29,-82,15,-25,63,-7,79,-34,-27,18,-19,-5,-9,-12,-9,-16,7,-5,-22,-104,30,-2,-125,95,9,-54,114,49,-14,10,2,14,14,-30,-9,34,19,12,25,12,-116,65,18,-19,37,13,-14,11,-16,4,-10,1,-3,19,-66,6,-33,51,3,41,34,-1,-7,-38,-32,23,9,2,-4,35,9,-25,-5,3,-12,-6,-84,2,-22,-24,-18,3,-109,8,-33,-23,-52,24,-25,-34,29,-27,-14,0, 
  /* [0][1][][] */ -63,-74,73,-35,-48,91,18,127,-52,-22,-1,-119,26,-114,78,31,-2,-60,-17,89,53,-72,48,48,-98,-14,127,-22,-25,63,123,-103,-127,92,-86,-56,-36,32,-28,95,-48,-25,-5,47,-47,127,-23,64,16,95,20,-2,14,-55,28,31,127,121,-71,-84,127,-32,-35,127,71,-38,-15,-1,127,38,127,97,-40,102,-4,11,14,14,-31,9,-43,124,-81,110,0,34,-55,30,79,-127,-32,-8,127,-70,-22,0, 67,125,56,-114,127,82,88,39,-127,127,127,-38,-65,-127,-127,127,127,-63,-125,-49,103,95,-122,127,-107,-92,-43,127,-127,108,-127,-127,-89,127,107,127,127,-127,-105,127,-64,-95,109,-127,-127,-37,-127,-127,127,-112,86,43,127,127,127,-127,99,-127,-127,127,19,-80,-127,-99,-127,127,-127,127,-127,-127,-107,-84,-127,-79,127,127,-127,127,-77,127,127,30,-42,-127,58,127,94,46,127,11,127,2,-68,35,127,-127, -52,-13,-50,38,-56,-99,34,-26,18,-34,-28,93,1,94,13,10,-4,64,-7,127,1,-88,-41,7,-74,103,-71,-20,-70,-17,17,-61,-69,38,5,-18,-29,45,-67,42,127,-4,-38,30,-39,-60,16,44,8,118,-11,6,-38,-73,4,18,95,2,1,22,-35,127,93,-52,-43,13,37,-10,-79,121,-18,-87,-1,-54,-17,-21,26,16,76,-36,-71,-42,57,15,-47,-17,73,22,14,61,-43,19,-44,96,-26,-5, 
  /* [0][2][][] */ -66,1,-4,-20,13,-46,65,25,54,-28,-36,-2,18,18,-27,0,-7,65,7,1,-56,-84,2,-9,-27,-54,35,-68,87,38,25,26,16,-9,-10,-47,-7,35,-3,0,-15,-6,-67,105,4,31,12,35,-15,-31,11,-20,22,-1,9,14,-70,23,-15,13,14,1,-21,-5,-1,-46,-46,15,-34,12,26,30,13,-20,27,4,17,4,-78,-13,-8,-8,17,15,-127,6,13,-44,-58,-50,-27,-49,10,56,-18,-9, 121,34,-127,-35,-72,-25,38,30,-65,-29,-20,-108,-77,113,-13,35,3,-50,-10,-124,91,-53,-38,1,-111,127,-50,21,-36,-21,-9,-3,-62,15,28,5,-23,-28,127,54,12,-14,69,-34,-38,75,-67,-44,-33,-5,-127,-127,-50,-26,1,38,-66,-7,12,38,-8,-18,9,-48,-54,33,64,-21,115,107,-24,-70,11,-58,2,4,99,4,50,22,13,-97,-50,3,3,7,127,40,-61,38,-19,-109,41,80,-10,25, -53,13,-18,26,16,-69,-127,3,-11,-8,-16,5,15,-24,19,-2,-8,-16,5,17,-51,-74,14,1,16,-97,21,4,-49,-39,-7,17,43,-21,-6,-25,-36,3,42,-40,23,-2,-48,-33,3,64,23,15,-9,-4,10,-9,18,6,-4,-6,-62,-13,2,-38,-11,10,85,-11,34,-1,-1,27,0,5,-4,21,-18,16,0,14,35,0,74,-11,3,-8,-7,-18,74,0,43,-39,60,38,-17,-56,-8,2,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0051568658091127872, 0.003769570728763938, 0.0054072109051048756, 0.010352818295359612, 0.0098002776503562927, 0.0079231308773159981, 0.0017450364539399743, 0.0039301114156842232, 0.011896979995071888, 0.0074160103686153889, 0.012328615412116051, 0.004877905361354351, 0.011396506801247597, 0.0085132112726569176, 0.020168481394648552, 0.0068989712744951248, 0.0087973121553659439, 0.0074843293987214565, 0.0066862674430012703, 0.0036133339162915945, 0.0030653015710413456, 0.0022648007143288851, 0.0058182608336210251, 0.0039014711510390043, 0.0042085284367203712, 0.0047861593775451183, 0.0079980436712503433, 0.0073934332467615604, 0.0034636214841157198, 0.020291073247790337, 0.016891228035092354, 0.010501856915652752, 0.0054964367300271988, 0.0069266217760741711, 0.011063441634178162, 0.018674278631806374, 0.015098955482244492, 0.0077269179746508598, 0.011661351658403873, 0.0040564085356891155, 0.010422353632748127, 0.011615353636443615, 0.01618555560708046, 0.003840296296402812, 0.016038399189710617, 0.0040857330895960331, 0.0050032907165586948, 0.014255877584218979, 0.031459234654903412, 0.0047336425632238388, 0.017259910702705383, 0.0070395409129559994, 0.0090787624940276146, 0.0058567505329847336, 0.01065621804445982, 0.0048521584831178188, 0.005925067700445652, 0.021803127601742744, 0.0021438724361360073, 0.0069119022227823734, 0.012115499936044216, 0.015816159546375275, 0.0041695693507790565, 0.0062564429827034473, 0.0055446689948439598, 0.0058660754002630711, 0.011242145672440529, 0.012485114857554436, 0.0083790626376867294, 0.0053374804556369781, 0.011329935863614082, 0.0042513790540397167, 0.012736012227833271, 0.0059115346521139145, 0.016775971278548241, 0.025082668289542198, 0.0055926521308720112, 0.0037506220396608114, 0.002333491574972868, 0.0072734691202640533, 0.010025258176028728, 0.0093996757641434669, 0.0065908879041671753, 0.011228041723370552, 0.0023961733095347881, 0.0052589499391615391, 0.0031967924442142248, 0.022391362115740776, 0.01092117466032505, 0.0056564444676041603, 0.014851318672299385, 0.0013311916263774037, 0.0064009423367679119, 0.0046358169056475163, 0.013496198691427708, 0.01211326289921999, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2763, 10995, 24128, 50575, 20193, -4757, -2682, 9277, 52213, -6010, 16709, 9322, 13838, 16427, 48161, 2107, 3468, 12343, 20001, 9613, -500, 640, 18947, -1685, 6588, 75, 21542, 13362, 9449, 59032, 72368, 25240, 11234, -919, 17065, 4937, 2312, 5838, 37971, -1229, 18601, 14821, 67510, -5852, 34286, 12737, 10035, 26382, 82391, 16076, -779, 15403, -5348, -353, -3888, 8939, -970, 26630, 9006, 12557, 8051, 25622, 10738, 11176, 16905, 14935, 8008, -9599, 11464, -4447, 7579, 14824, 28295, 8579, -7228, -9975, 12638, 445, 3425, -1897, 23142, 18077, 7589, 21660, 3995, 253, 15272, 122721, 13938, 16642, 7813, -178, 10249, 15006, 6540, 18414, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00014214451948646456, 0.0001328579819528386, 7.8428442066069692e-05, 4.588705996866338e-05, 0.00014705992361996323, 0.00021155027206987143, 0.00029177896794863045, 0.00017494319763500243, 4.471271313377656e-05, 0.0002284598012920469, 0.00015933856775518507, 9.6832176495809108e-05, 9.2266920546535403e-05, 0.00014147009642329067, 4.9594509619055316e-05, 0.00026367418467998505, 0.0001324969925917685, 0.00010030105477198958, 0.00011076019291067496, 0.00012441239960025996, 0.00020170699281152338, 0.00035849682171829045, 0.00010592395119601861, 0.00038074530311860144, 0.00039518246194347739, 0.00014243087207432836, 0.00010417240991955623, 0.00010613491031108424, 0.00017327007662970573, 5.9742789744632319e-05, 3.92037836718373e-05, 9.8327705927658826e-05, 0.0001480670616729185, 0.00022692911443300545, 0.00011710423132171854, 0.0001170335162896663, 0.00022616995556745678, 0.00025191198801621795, 7.1551345172338188e-05, 0.00045536586549133062, 0.00010009990364778787, 0.00010514690802665427, 4.0244514821097255e-05, 0.00018182095664087683, 9.4304617960005999e-05, 0.00012156168668298051, 0.00017240828310605139, 0.0001017557515297085, 4.997835640097037e-05, 0.00013052338908892125, 0.00015276088379323483, 0.00011173343227710575, 0.00019804145267698914, 0.00015670701395720243, 0.00026639964198693633, 0.00011972655192948878, 0.00010886463860515505, 6.9942369009368122e-05, 0.00022673133935313672, 0.00011873432231368497, 0.00019827354117296636, 5.4345036915037781e-05, 0.00013750612561125308, 8.9328372268937528e-05, 0.00014585370081476867, 0.00012983861961401999, 0.00016187365690711886, 0.00014057985390536487, 0.00014777688193134964, 0.0001613401691429317, 0.00014438953076023608, 0.00010608811862766743, 7.3402152338530868e-05, 0.00012015933316433802, 0.00021352052863221616, 0.00013749889330938458, 0.00013204250717535615, 0.0002328131376998499, 0.00022024248028174043, 0.00020971561025362462, 8.8051885541062802e-05, 9.2298498202580959e-05, 0.00011501026165205985, 8.9453700638841838e-05, 0.00028719005058519542, 0.00018019395065493882, 0.00015353996423073113, 3.1406234484165907e-05, 0.00010147499415325001, 0.00013641208352055401, 0.00016138622595462948, 0.00026220659492537379, 0.00014157201803755015, 0.00010742466838564724, 0.00017101179400924593, 9.2957685410510749e-05, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 0,70,-24,73,34,30,13,-18,32,35,-51,103,0,-122,46,-127, 
  /* [1][0][][] */ 23,47,-12,-27,32,-27,127,-118,-1,91,-16,-19,3,-51,35,14, 
  /* [2][0][][] */ -127,30,-43,-27,-5,-3,53,91,-40,58,110,-19,-74,10,33,-48, 
  /* [3][0][][] */ -57,75,41,62,-65,46,60,125,13,74,-127,-3,28,-83,-87,-59, 
  /* [4][0][][] */ 19,-2,31,57,-23,63,-5,44,2,-17,-5,-1,25,-6,-127,-24, 
  /* [5][0][][] */ -4,-33,62,-18,13,-26,-2,30,-67,106,-31,-127,-13,24,-61,-26, 
  /* [6][0][][] */ 18,-4,34,-12,35,50,-65,-59,-3,-8,43,-17,127,-16,-14,-27, 
  /* [7][0][][] */ 30,18,127,-21,-31,-36,2,-13,-83,21,-79,-50,6,-7,43,-9, 
  /* [8][0][][] */ 26,34,97,79,-79,97,21,50,52,3,16,-95,-38,11,-127,-86, 
  /* [9][0][][] */ 27,-117,60,46,10,-33,-4,17,127,-7,78,10,-33,5,-103,-30, 
  /* [10][0][][] */ -60,-93,2,-21,-109,-1,-27,52,104,127,64,-21,-45,73,93,-4, 
  /* [11][0][][] */ 58,-12,20,-106,8,-39,-127,-127,-59,39,-22,-21,39,-15,47,-67, 
  /* [12][0][][] */ -9,13,8,-43,-37,-46,-99,-19,-48,-65,-17,12,16,127,93,43, 
  /* [13][0][][] */ -41,-108,-94,37,-7,-60,9,-21,60,30,-4,-4,5,19,127,31, 
  /* [14][0][][] */ 6,-60,47,23,20,29,11,126,14,56,6,-44,14,38,-54,127, 
  /* [15][0][][] */ 24,-37,0,58,14,-6,100,-2,1,-127,13,-41,5,-28,0,-33, 
  /* [16][0][][] */ 38,-86,-48,29,24,11,49,-82,127,74,110,7,13,109,76,121, 
  /* [17][0][][] */ -67,-52,45,122,101,57,6,-13,127,-49,-7,-48,12,47,-117,26, 
  /* [18][0][][] */ -13,11,6,20,-104,-5,-13,39,-65,-21,-17,-42,3,-127,69,-1, 
  /* [19][0][][] */ 65,-84,27,-65,93,14,-87,81,62,-85,87,33,-10,41,61,127, 
  /* [20][0][][] */ 39,-18,55,-71,-5,10,-25,43,-12,-42,102,-19,14,14,-31,127, 
  /* [21][0][][] */ -65,-10,5,-31,18,18,-72,-42,-18,59,4,11,-127,-17,25,-13, 
  /* [22][0][][] */ 21,-19,21,-26,20,-68,3,-10,-127,21,-10,-40,-14,-9,73,-18, 
  /* [23][0][][] */ 12,11,19,-12,9,13,-10,1,-9,-9,48,-11,127,-4,3,-42, 
  /* [24][0][][] */ -21,9,-10,-77,-30,-7,54,7,-51,13,-2,-127,2,-111,44,8, 
  /* [25][0][][] */ -95,10,-52,-10,53,-33,-68,-127,-39,60,-38,-51,-65,-87,24,-39, 
  /* [26][0][][] */ 40,-19,52,-103,127,-34,0,-5,121,-42,28,-38,-6,93,-3,76, 
  /* [27][0][][] */ 92,-28,22,-32,-34,-54,-5,-21,-29,17,-127,18,14,-17,4,44, 
  /* [28][0][][] */ -127,-16,-115,-88,61,-10,79,-56,-4,52,-55,16,42,-19,-33,35, 
  /* [29][0][][] */ -71,-34,12,127,-4,18,2,-44,-11,-3,-71,38,28,-69,29,-43, 
  /* [30][0][][] */ 58,-5,127,-26,60,48,-24,74,-45,-83,67,-30,-3,35,-66,63, 
  /* [31][0][][] */ 17,-87,1,-48,-8,-62,18,-38,-16,40,95,20,-16,81,69,127, 
  /* [32][0][][] */ -11,69,-32,40,-127,22,-70,-37,-56,-32,-3,47,11,48,31,60, 
  /* [33][0][][] */ 26,-13,27,127,22,5,18,-48,-99,54,61,-19,2,-2,-1,95, 
  /* [34][0][][] */ 36,2,7,-2,68,-42,-127,-17,-46,84,-44,3,-39,6,15,20, 
  /* [35][0][][] */ 84,12,-26,-3,21,-127,-30,-12,-27,7,-96,0,74,16,-4,26, 
  /* [36][0][][] */ 18,0,-127,4,42,15,-28,18,-33,-17,6,-7,7,15,-15,5, 
  /* [37][0][][] */ 1,5,127,-10,-58,37,21,-64,-8,34,-44,33,22,-7,25,-5, 
  /* [38][0][][] */ -124,38,-4,25,31,71,4,-17,11,-22,127,-30,-39,15,-13,-23, 
  /* [39][0][][] */ -21,-1,16,31,37,-9,-127,33,9,28,3,-31,-5,-22,1,-9, 
  /* [40][0][][] */ 2,84,-16,127,9,54,54,29,-80,-44,-31,55,21,43,-63,-36, 
  /* [41][0][][] */ 9,19,-36,-19,-46,-8,127,104,-48,90,-30,-1,6,74,34,-13, 
  /* [42][0][][] */ 44,-56,-10,-21,41,23,-67,68,72,-104,127,28,-9,40,-61,48, 
  /* [43][0][][] */ -69,8,22,-35,35,20,-79,-84,-30,50,-2,-17,-127,-20,31,-12, 
  /* [44][0][][] */ 4,9,-15,-1,0,-9,-3,-48,127,-2,20,49,11,74,-1,36, 
  /* [45][0][][] */ -69,-87,4,-82,44,-3,-25,37,14,-80,-4,-28,18,85,-38,127, 
  /* [46][0][][] */ -45,23,-29,89,-86,-23,-7,-82,-127,45,-45,-19,-1,32,6,-36, 
  /* [47][0][][] */ -29,-13,-110,127,13,67,3,-29,9,52,71,69,-27,-10,29,-29, 
  /* [48][0][][] */ -10,7,13,-127,15,-31,-6,-11,-50,26,29,-11,-11,47,101,40, 
  /* [49][0][][] */ -18,19,51,127,-12,47,-67,-16,20,-57,-99,-36,-28,-39,-103,-122, 
  /* [50][0][][] */ -1,69,30,-102,56,18,-20,55,127,-19,-32,10,1,-27,10,-29, 
  /* [51][0][][] */ 19,-24,30,-12,45,-15,-65,-127,18,-89,-13,-3,-5,-5,-12,-14, 
  /* [52][0][][] */ 25,14,-2,40,36,-12,-64,99,-79,127,-46,-36,77,101,-1,-38, 
  /* [53][0][][] */ -10,106,4,-99,-31,1,27,-29,-60,-43,-43,69,6,-127,-96,-19, 
  /* [54][0][][] */ -5,14,18,30,54,-22,11,-34,-4,29,-11,-18,-12,127,-49,-17, 
  /* [55][0][][] */ -127,121,84,-17,41,-4,-10,-3,-47,36,111,-20,-6,-29,127,-9, 
  /* [56][0][][] */ 60,-8,18,-119,86,-6,-14,36,59,-55,52,127,-22,14,100,64, 
  /* [57][0][][] */ -21,-7,16,71,-22,18,35,127,-8,1,-1,-28,8,47,1,26, 
  /* [58][0][][] */ 22,127,-2,-125,3,31,-10,25,106,-11,-3,75,7,-80,43,68, 
  /* [59][0][][] */ 27,55,53,-117,-48,4,37,-19,10,28,32,-64,-6,-127,-68,14, 
  /* [60][0][][] */ 49,-9,119,-39,-36,127,31,-29,-7,36,-52,-14,33,15,28,-8, 
  /* [61][0][][] */ -16,21,-48,-43,-61,1,109,127,-9,61,-8,16,15,75,18,-22, 
  /* [62][0][][] */ -12,-15,-13,-7,-75,22,-49,10,-33,-31,-14,-44,24,-127,82,3, 
  /* [63][0][][] */ 19,-43,5,-91,33,-7,-127,-125,-51,99,-30,8,62,-4,28,-28, 
  /* [64][0][][] */ -28,-9,28,50,80,-4,-35,-127,26,-110,-2,-47,-12,-28,-13,8, 
  /* [65][0][][] */ -127,16,25,-67,16,78,48,-47,-77,29,50,-18,1,21,-22,-28, 
  /* [66][0][][] */ 72,13,86,12,-63,13,-32,52,-52,-10,67,-98,-28,48,-127,-18, 
  /* [67][0][][] */ 29,-26,-34,50,63,-37,-86,-109,34,-127,-59,-32,-94,6,-67,15, 
  /* [68][0][][] */ 19,-40,-83,67,-62,-101,7,-53,-31,-16,36,-77,-26,50,127,-7, 
  /* [69][0][][] */ -33,41,-68,61,-1,-127,19,76,27,7,55,-14,113,21,-15,-1, 
  /* [70][0][][] */ 14,16,-39,-37,-35,3,127,91,-23,53,-13,12,12,45,15,-14, 
  /* [71][0][][] */ 5,-5,-21,-48,19,10,16,56,-24,-38,-4,6,13,-127,78,7, 
  /* [72][0][][] */ 29,35,-8,31,24,-46,-43,-127,14,57,-49,29,48,59,47,53, 
  /* [73][0][][] */ -45,-127,-32,-70,-90,-22,40,-29,-23,16,-34,-40,21,-53,71,-11, 
  /* [74][0][][] */ -40,36,60,106,-1,13,-127,108,31,-29,-33,-38,-9,-4,-15,-13, 
  /* [75][0][][] */ -54,28,-30,3,-32,77,78,127,9,51,6,-50,-109,95,20,42, 
  /* [76][0][][] */ 25,-17,-29,-24,52,-84,-127,-100,-21,-25,0,-21,54,4,64,-33, 
  /* [77][0][][] */ -31,5,-39,-20,-49,-7,-10,-47,127,12,-68,7,-5,39,26,-83, 
  /* [78][0][][] */ -92,-127,-9,92,64,54,-16,42,-3,-78,-106,60,56,-26,93,68, 
  /* [79][0][][] */ 47,-11,40,-43,127,-2,43,15,70,16,-6,23,-8,-26,4,-43, 
  /* [80][0][][] */ -15,-26,59,-111,-34,-34,-6,8,-71,-42,-14,-42,-1,127,-30,21, 
  /* [81][0][][] */ 21,-7,48,41,9,45,-8,-14,9,-8,0,-39,-4,29,-127,16, 
  /* [82][0][][] */ -80,-38,34,-122,1,-41,2,-36,-26,-28,-53,-127,-19,-121,-114,27, 
  /* [83][0][][] */ 10,16,-27,-65,-32,8,-1,39,-85,8,18,-74,25,-127,3,35, 
  /* [84][0][][] */ 127,26,20,41,-59,-8,-51,27,-9,-24,91,-2,-56,19,74,-67, 
  /* [85][0][][] */ -11,-13,14,-36,48,-11,-31,109,-79,-111,-58,-40,-12,73,87,-127, 
  /* [86][0][][] */ 14,4,14,3,-57,71,-35,50,-91,-59,37,-18,-12,-127,-16,24, 
  /* [87][0][][] */ 127,-41,17,-7,-33,-35,1,-2,5,9,-96,14,40,-3,4,45, 
  /* [88][0][][] */ 61,74,-12,3,1,-39,-35,-13,104,9,46,27,-24,-18,127,-118, 
  /* [89][0][][] */ 44,61,-88,-22,-37,-26,25,-70,47,49,20,-33,-39,-3,-19,-127, 
  /* [90][0][][] */ -11,-36,1,-72,-67,21,127,-56,98,-75,12,-84,33,-16,-42,-9, 
  /* [91][0][][] */ 10,9,-21,-85,-43,-4,28,-31,-51,15,61,47,14,-13,38,127, 
  /* [92][0][][] */ 12,8,3,6,50,-9,-72,-127,38,-65,0,-22,-37,-11,1,-20, 
  /* [93][0][][] */ 62,9,41,-127,-33,-1,-22,47,48,-84,95,-19,-36,121,-30,21, 
  /* [94][0][][] */ -93,41,-99,12,67,-127,-21,8,-7,-46,78,-31,-3,-7,-15,3, 
  /* [95][0][][] */ -27,57,24,-127,-13,-1,-38,4,28,-38,-63,-80,-7,39,-66,1, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0006670270231552422, 0.00062344910111278296, 0.0003680331283248961, 0.0002153295063180849, 0.00069009308936074376, 0.00099272036459296942, 0.0013692013453692198, 0.00082093809032812715, 0.00020981878333259374, 0.0010720699792727828, 0.00074771180516108871, 0.00045439446694217622, 0.00043297154479660094, 0.00066386227263137698, 0.00023272709222510457, 0.0012373168719932437, 0.00062175508355721831, 0.00047067250125110149, 0.00051975302631035447, 0.00058381736744195223, 0.00094652979169040918, 0.0016822813777253032, 0.00049705849960446358, 0.0017866845009848475, 0.0018544322811067104, 0.00066837080521509051, 0.0004888392286375165, 0.00049804843729361892, 0.00081308674998581409, 0.00028034887509420514, 0.00018396758241578937, 0.00046141236089169979, 0.00069481914397329092, 0.0010648870375007391, 0.00054952304344624281, 0.00054919120157137513, 0.0010613246122375131, 0.0011821216903626919, 0.00033576169516891241, 0.0021368488669395447, 0.00046972857671789825, 0.00049341213889420033, 0.00018885132158175111, 0.00085321260849013925, 0.00044253363739699125, 0.00057044008281081915, 0.00080904271453619003, 0.00047749880468472838, 0.00023452832829207182, 0.00061249377904459834, 0.00071684538852423429, 0.00052432005759328604, 0.00092932890402153134, 0.00073536299169063568, 0.0012501063756644726, 0.00056182855041697621, 0.00051085796440020204, 0.00032821140484884381, 0.0010639589745551348, 0.00055717240320518613, 0.00093041796935722232, 0.0002550194039940834, 0.00064526090864092112, 0.00041918212082237005, 0.00068443274358287454, 0.00060928042512387037, 0.00075960793765261769, 0.00065968470880761743, 0.00069345749216154218, 0.00075710448436439037, 0.00067756196949630976, 0.00049782887799665332, 0.00034444677294231951, 0.00056385941570624709, 0.0010019659530371428, 0.00064522697357460856, 0.00061962235486134887, 0.0010924984235316515, 0.0010335093829780817, 0.00098411098588258028, 0.00041319208685308695, 0.00043311974150128663, 0.00053969689179211855, 0.00041977025102823973, 0.0013476674212142825, 0.00084557774243876338, 0.00072050129529088736, 0.00014737682067789137, 0.00047618133248761296, 0.0006401270511560142, 0.00075732060940936208, 0.0012304300907999277, 0.00066434050677344203, 0.00050410075346007943, 0.00080248957965523005, 0.00043621304212138057, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -4422, -5220, -10391, 30144, 23974, 3689, -4553, -3353, 23359, 3991, 28783, 22804, -11070, 13347, 37814, -26215, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00042542858864180744, 0.00026680226437747478, 0.00025477277813479304, 0.00022165979316923767, 0.00037603991222567856, 0.00035966429277323186, 0.00030340114608407021, 0.00036384118720889091, 0.00021495643886737525, 0.00027303767274133861, 0.00037129045813344419, 0.00066045328276231885, 0.00037668421282432973, 0.00046054538688622415, 0.00040699949022382498, 0.00032099740928970277, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -2,15,-6,15,46,79,-39,-29,49,-2,15,12,-8,14,26,73,3,-6,-6,-12,104,-57,6,-13,-24,-33,-48,-91,-10,1,49,52,125,-10,3,1,13,-22,-24,14,-30,15,20,-33,1,-32,-18,33,-10,13,3,-3,-33,-14,5,-11,42,15,-26,-26,-58,26,-9,-8,17,13,53,-4,14,5,3,-25,-65,-11,-7,5,-8,-88,9,-17,37,-17,-65,-48,33,-3,7,21,-16,6,21,-40,24,20,-18,127, 
  /* [1][0][][] */ 78,-96,47,82,-15,-76,-13,-52,-18,-89,-8,16,13,-64,-30,-57,-88,-3,20,31,-36,-116,-33,28,127,-63,-71,27,-27,97,-17,56,20,15,-36,25,-20,-10,53,-29,-1,-75,82,-30,-51,11,59,-4,40,23,1,-78,67,-73,45,-17,15,31,-17,-107,40,-60,21,-49,8,-88,42,49,40,53,-38,-3,-103,42,-20,67,46,101,19,-18,49,5,-75,36,-85,64,-3,68,-40,13,18,15,8,-48,43,-2, 
  /* [2][0][][] */ 21,21,9,-29,11,7,-13,33,58,-25,14,67,3,5,48,2,-9,-18,13,-16,-17,-69,8,-54,-1,-12,-23,20,-5,19,127,-56,14,-78,-24,54,16,115,-45,-17,8,-17,0,38,-46,-44,-57,23,30,24,-36,-30,29,0,-2,-32,-20,-4,-10,25,0,-2,71,89,4,-79,13,-69,-13,-14,-9,13,-17,9,-25,17,18,50,8,15,6,85,23,-17,-12,9,14,3,26,9,-5,-58,-45,8,-10,64, 
  /* [3][0][][] */ -14,-17,-33,37,28,-26,3,-22,-13,21,-1,0,4,-13,42,-9,40,-37,18,10,-20,-12,-12,-1,-17,6,10,-3,30,-40,56,-21,14,-13,-15,50,-13,-5,-6,2,11,-65,24,-30,-4,1,3,3,-127,46,-15,17,-117,-55,-25,-31,23,16,-11,51,-8,25,10,13,-19,-88,-30,26,50,16,-4,20,-38,13,-9,-47,-47,-52,26,-38,10,-20,22,71,37,53,35,12,32,-7,-9,8,-27,-1,-11,-26, 
  /* [4][0][][] */ -4,-27,19,-68,-3,-17,-45,6,-19,-40,-28,-13,6,69,10,8,52,-9,4,3,-4,30,54,7,-3,0,16,13,-2,-7,-8,-7,-39,13,-2,15,36,-22,4,-13,11,9,-96,-24,36,-7,-6,-11,7,78,-11,-15,-20,-14,8,-10,-6,-27,29,33,11,4,7,-5,41,-110,21,-22,-44,12,-13,-5,-12,14,-20,28,-25,65,57,7,9,7,127,-39,43,-20,-9,-2,63,6,0,19,-35,22,-1,-43, 
  /* [5][0][][] */ -7,1,-3,-2,-11,-16,2,113,58,-10,-15,-33,-10,27,39,29,-17,-6,0,-31,-52,-10,-7,-53,7,6,24,83,71,11,66,44,-48,24,0,0,-54,-51,-24,-21,-47,-18,-8,-3,67,12,8,11,12,20,-14,-1,-31,-14,7,2,-27,-10,-2,37,-53,31,-21,-45,10,16,-16,5,-2,11,3,-7,30,9,10,-3,-3,30,9,127,1,-41,27,37,2,-5,23,-29,-1,-26,18,-117,-34,-27,0,-118, 
  /* [6][0][][] */ -25,-9,-11,-57,-4,-13,-15,9,-7,14,-11,0,33,-65,2,-12,-5,-70,31,13,8,2,-17,18,73,-8,1,-7,13,-9,17,-7,-21,-2,-20,-4,20,1,13,40,-5,-25,-49,-21,-10,-24,25,-127,25,31,11,11,13,0,-7,-42,41,-12,-7,11,21,14,-2,6,37,59,20,-19,-26,-8,16,-18,20,9,40,-8,-32,24,3,-1,-19,-10,45,-31,3,41,20,-26,23,8,-39,-11,-23,13,-15,17, 
  /* [7][0][][] */ 17,6,34,-25,-4,1,-4,-32,-6,-16,-13,-16,-7,-93,29,4,-4,-34,-12,-10,8,-18,-38,-3,-20,-13,2,-19,11,6,4,4,-9,5,-7,-17,3,-13,-31,30,8,-14,-21,26,-5,21,-18,75,-2,23,-20,-27,-24,1,-4,-52,43,0,-5,3,-2,8,-14,-7,-23,36,11,-25,-16,-7,3,45,-8,-11,-14,6,53,10,-5,-20,5,-35,32,-2,-35,127,-3,0,-36,-18,-5,19,-23,-2,-8,2, 
  /* [8][0][][] */ -67,35,-57,3,41,-13,-17,27,15,70,-41,6,16,33,72,-14,-4,31,-70,15,13,26,-34,2,-34,-23,16,16,52,-89,-6,-5,26,6,9,-6,-18,30,-38,47,12,8,8,-127,-38,-3,39,-26,-51,19,0,68,-104,69,13,-7,0,-20,-26,-17,0,-34,6,20,-30,33,27,-22,-11,1,23,74,-22,28,42,35,-6,-90,-4,-35,-15,-14,21,0,-63,7,13,-35,-3,31,-27,8,30,-12,-15,-14, 
  /* [9][0][][] */ 28,-51,-36,-30,15,16,-16,24,24,-14,-7,14,-38,-20,5,19,-9,7,33,-12,-30,12,-30,-45,31,8,24,-7,-28,-33,-23,-7,-4,15,19,37,1,38,-29,15,13,8,-18,-81,11,-9,27,-127,-38,4,1,20,-19,11,-10,9,-49,28,-7,10,10,16,12,24,18,114,39,39,14,-9,7,-28,-20,-1,-30,8,71,-4,8,14,-5,5,18,-37,0,22,-9,-5,-50,36,-34,6,12,12,12,-15, 
  /* [10][0][][] */ 22,42,-19,24,64,-108,-13,-36,0,48,32,-12,-10,15,18,-76,20,32,-17,42,-78,-16,-10,-27,-61,-28,-50,45,9,7,2,45,-9,-13,28,-17,81,-18,-15,-3,-17,66,41,-24,-53,-22,-41,10,-14,-24,-42,1,-7,-14,-5,-12,13,30,-23,-8,4,6,-14,27,13,34,51,26,19,-3,24,57,-46,-24,-57,-16,0,23,-13,9,28,-11,-74,-33,59,-52,95,-5,-21,7,20,-13,74,33,-16,-127, 
  /* [11][0][][] */ 42,39,-31,24,-7,11,52,7,-4,-13,-26,-13,-4,4,35,2,-1,-6,-93,-1,0,15,4,-8,-44,-25,-12,5,2,20,0,-7,-4,7,5,23,9,13,-5,19,3,25,54,-95,27,-40,1,-3,-127,13,13,-47,22,21,-12,11,-16,-16,8,6,14,-13,-5,6,-48,55,-14,8,20,-6,24,8,-50,-30,10,29,-2,-34,-51,5,13,-4,86,46,6,-11,-9,-9,2,20,-15,-2,0,6,-19,12, 
  /* [12][0][][] */ -32,1,9,2,-24,30,14,6,127,7,-13,10,5,11,-31,-38,23,29,6,75,48,31,-13,-19,6,9,12,-23,-106,7,26,-41,6,-11,-9,-16,15,2,43,-11,-45,-22,-2,12,3,36,7,1,13,4,-44,8,3,0,14,-5,65,-23,10,10,16,-13,14,-10,-5,33,-37,-1,3,11,-17,-37,13,6,-65,7,29,-3,10,-57,-13,10,42,39,-18,-11,-29,-25,5,20,-2,49,-12,-21,16,11, 
  /* [13][0][][] */ 28,-10,-29,25,31,2,6,-2,-10,-2,9,1,12,-12,9,-11,16,-71,-33,8,-8,-19,9,3,10,11,-1,-10,-12,-34,-3,15,-3,4,7,38,15,-5,4,19,2,10,20,38,14,16,-11,-127,21,-5,1,9,-13,-5,16,3,-8,13,20,12,5,12,-8,3,-12,-20,-21,-52,5,15,-8,-28,-12,36,-9,18,-28,-3,13,-3,23,-13,-17,15,13,26,9,15,-5,2,21,-9,3,15,-13,-4, 
  /* [14][0][][] */ -122,-59,23,54,31,-18,-30,11,-21,5,-10,15,65,1,-127,-1,83,-23,-9,32,-6,-3,39,24,-112,14,31,-20,-46,-81,-29,6,-2,1,24,-74,34,34,-8,32,24,37,-2,-38,15,126,68,55,-113,46,8,41,-48,-10,35,-5,17,4,67,65,38,45,14,52,0,-17,-53,47,2,84,-54,-79,-86,-4,-6,49,-9,37,92,-3,62,10,28,21,48,17,53,34,28,53,76,-13,-3,33,21,-30, 
  /* [15][0][][] */ 75,-21,32,4,1,84,30,-22,-21,42,6,10,-73,-13,-19,32,12,34,51,-22,12,19,-82,67,22,11,36,-15,23,39,-60,-72,6,-55,33,-3,38,-46,-59,-92,2,24,2,36,-3,56,-24,-34,99,-49,-61,33,43,-113,57,-112,8,-65,9,23,-127,-13,16,15,70,-19,-60,40,-31,77,-28,27,48,14,11,1,16,-62,62,-19,-19,-6,35,73,-18,1,-1,-63,-4,4,68,-11,-64,67,11,0, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018080715090036392, 0.011339095421135426, 0.010827843099832535, 0.0094205411151051521, 0.015981696546077728, 0.015285732224583626, 0.01289454847574234, 0.015463250689208508, 0.0091356486082077026, 0.011604100465774536, 0.015779843553900719, 0.028069263324141502, 0.016009079292416573, 0.019573178142309189, 0.017297478392720222, 0.013642389327287674, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10669, -8943, 3269, 51921, -2112, -4485, -10745, 3162, -2816, 779, 2967, -1996, 1275, -4629, 5677, -6459, -539, 17405, 24922, 2625, 3186, -2813, 385, 68, 16581, -1087, -1009, -3850, -6037, -7309, 6499, -8817, 387, -2039, -768, 15344, 1658, -3616, 19944, 737, -930, 1673, -9391, -7426, -7272, 68061, -304, 15806, 30546, -12391, -236, 8516, 7196, -509, -4831, 2384, -12237, 1629, 1937, -6534, -1935, -896, -14514, -698, 1271, 16166, 28773, 27369, -11825, -21, -7227, -1013, 47224, 11248, -55, 520, 18688, 32748, -671, -10581, -1760, -9074, 887, -3231, 765, -553, 1002, 458, 1549, -3387, 520, -784, -881, -1194, 181, 49393, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018053395615424961, 0.00013126435806043446, 0.0002557442057877779, 4.0598111809231341e-05, 0.00016537866031285375, 0.00016628758748993278, 0.0002925379085354507, 7.9263525549322367e-05, 0.00012109215458622202, 0.00039073597872629762, 0.00014525146980304271, 0.00031152775045484304, 9.1489018814172596e-05, 0.0004505733959376812, 0.00017997754912357777, 0.00011785038077505305, 0.00010456963354954496, 0.0002972822985611856, 6.2187340517994016e-05, 0.00021063517488073558, 4.6498229494318366e-05, 0.00018872960936278105, 0.00014715373981744051, 0.00035150573239661753, 0.00021798061789013445, 0.00022181335953064263, 0.00013587804278358817, 0.0001911433064378798, 0.00012886284093838185, 0.00012297142529860139, 0.00013004458742216229, 0.00017766005476005375, 0.00013302950537763536, 0.00010170015593757853, 0.00018182939675170928, 0.00015488646749872714, 0.00044808874372392893, 0.00011447248834883794, 5.0417354941600934e-05, 0.0001379164750687778, 0.0001635636726859957, 0.00029371277196332812, 0.00034969413536600769, 0.00016368686920031905, 0.00018297343922313303, 6.4499981817789376e-05, 0.00023768779647070915, 0.0002174223045585677, 8.6069863755255938e-05, 0.00018791714683175087, 0.00017811043653637171, 0.00014559272676706314, 0.00024109786318149418, 0.00024446682073175907, 0.00031351402867585421, 0.00040616770274937153, 0.00030298545607365668, 0.00018946267664432526, 0.00011790802818723023, 8.3067250670865178e-05, 0.00031357357511296868, 0.0001405025104759261, 0.00025164822000078857, 0.00012314814375713468, 0.00019944216182921082, 0.00017702423792798072, 9.1795380285475403e-05, 6.6255342971999198e-05, 0.00035218725679442286, 0.00023124409199226648, 0.00022734233061783016, 0.00010755846597021446, 0.00012269250873941928, 0.00013881623453926295, 0.00014576961984857917, 0.00026465763221494853, 0.00051494303625077009, 5.5300202802754939e-05, 0.00029938906664028764, 0.00017613677482586354, 0.00016273582878056914, 0.00023568527831230313, 0.00011908476881217211, 0.00013866780500393361, 0.0001236139505635947, 9.2801099526695907e-05, 0.00013664085417985916, 0.0001967292046174407, 0.00020243565086275339, 0.00010797198774525896, 0.00021161399490665644, 0.00011029004963347688, 0.00014752295101061463, 0.00047077520866878331, 0.0067848092876374722, 8.0873920524027199e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,7,-20,104,-16,23,-63,-54,17,-5,100,-9,3,-8,-4,53,5,16,-35,3,72,2,32,-33,2,17,44,48,21,13,24,47,-7,28,9,-14,5,48,-56,-26,21,9,26,17,-85,-55,26,-5,-11,-21,-8,-7,49,6,-9,1,-3,-36,29,-31,27,-1,127,26,-14,-10,12,-53,66,35,2,-7,79,-32,70,5,17,-127,30,64,1,15,127,-13,37,29,-28,-19,35,-6,-14,81,2,21,-2,12, -49,13,-8,10,52,-9,-11,-127,39,14,-127,-5,-17,-11,4,91,18,-30,-15,-16,75,-97,127,26,-61,-31,-104,-16,27,35,-49,17,118,12,-14,-1,-24,127,-63,-127,9,-19,-31,14,46,-127,127,-45,-77,50,49,7,38,-63,30,56,37,41,-101,85,127,35,4,-20,42,-37,-95,-2,37,-30,-19,46,-49,-48,106,-3,-30,-59,-32,64,-66,61,-16,9,-11,48,55,-42,-27,54,-13,73,-127,-30,23,-127, 0,-4,-23,-73,8,18,37,22,-3,-1,5,63,0,-12,-11,6,-13,17,-16,17,5,24,24,-32,1,-31,10,12,-7,5,46,-79,43,17,8,-23,12,3,-31,-20,8,3,-16,8,22,-32,21,1,6,-9,6,-5,4,6,-6,8,-7,44,7,-2,11,-18,3,-17,-27,-17,30,-51,-106,-6,40,-18,-127,-23,-12,17,10,-11,6,12,-13,23,-36,-3,-40,21,26,36,-24,-17,25,-11,19,7,-1,-45, 
  /* [0][1][][] */ -41,58,-18,37,-84,-16,-11,-44,25,96,-45,-21,-31,-25,-7,61,127,-24,-90,-13,59,-127,-29,16,-35,-47,-127,-6,37,35,-50,27,-127,-75,-58,4,65,-3,-49,47,-19,87,0,-3,35,-50,-12,-32,127,43,-4,20,44,10,-37,-17,31,9,-124,127,-36,-90,20,127,-59,-36,-85,127,-37,127,-19,53,-36,-55,37,9,-36,-70,127,48,127,36,6,-1,127,29,-95,47,-37,-35,-103,40,98,104,29,-59, 127,127,127,127,-45,-127,127,23,127,-127,16,-127,-106,127,127,127,-16,-127,-62,-127,127,23,-67,127,127,127,-55,-127,127,127,-127,127,-10,-127,-126,127,-127,-44,94,110,-127,-127,127,127,127,-119,-106,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,40,-105,-28,-70,-68,127,127,-72,126,127,-107,-127,127,-43,127,-127,-127,-127,124,-75,127,-42,127,78,127,-38,-127,-24,-108,-127,-126,-24,-127,-22,-127,-127,116, -24,65,-38,2,127,69,-22,49,6,23,-13,-4,-26,-30,-13,-9,-105,-22,-127,38,30,77,-12,-115,-34,-41,125,72,10,35,72,8,123,-47,127,-4,54,5,-93,14,37,23,-24,1,-24,-53,-12,-43,81,14,-12,40,-6,-4,-76,-14,24,20,127,-89,2,127,0,-35,-110,-28,-74,100,14,-16,111,23,-18,-57,12,47,-29,-7,-43,-3,-46,9,46,25,-90,34,127,-48,33,-22,127,-10,-113,36,34,18, 
  /* [0][2][][] */ -4,-40,-21,-61,-4,14,40,31,-2,9,-21,52,23,-34,-8,6,40,2,12,21,-8,30,-16,-25,1,-24,9,3,-10,-7,49,-75,-39,67,-29,-25,30,-35,-62,17,9,10,-35,19,12,-77,-12,-1,-9,6,17,-7,7,2,-22,6,-1,44,-49,35,-5,-13,4,16,-5,-10,22,-52,-56,11,-21,-12,-119,-32,0,18,15,-11,56,17,22,22,-41,15,12,25,-20,9,5,26,22,-5,19,41,-6,-31, -28,-10,-27,24,-44,73,-25,66,5,-6,53,-12,127,-7,-18,-19,-2,-40,-55,24,-21,79,-45,-111,-47,-47,101,70,14,43,54,-1,-123,63,-16,-23,-29,-27,-127,-4,45,-13,-16,37,-27,-45,-17,-48,-61,27,68,25,-12,-80,30,51,17,26,74,-55,21,-59,-8,1,20,-26,-127,-54,-11,-27,-62,22,36,-47,-30,-7,-45,24,-56,1,49,35,19,11,6,62,-91,127,16,127,-31,-18,114,-21,47,82, -9,-35,-25,28,12,65,-44,12,4,-6,0,14,12,-50,-10,-14,-45,-6,16,19,-23,5,-20,4,-4,19,-3,52,-3,-5,33,28,15,43,19,-23,-7,-26,-29,8,11,-12,21,9,-74,-32,-12,4,-2,-16,-1,-4,-9,9,-16,-5,0,-50,12,-29,-21,48,9,-28,-10,-2,37,-55,45,6,52,-22,31,-55,-18,22,11,11,-4,22,-30,33,89,-14,-18,54,39,-10,109,12,2,-19,9,-22,-6,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0076726931147277355, 0.0055787353776395321, 0.010869128629565239, 0.001725419657304883, 0.0070285927504301071, 0.0070672226138412952, 0.012432861141860485, 0.003368699923157692, 0.0051464163698256016, 0.016606278717517853, 0.0061731874011456966, 0.01323992945253849, 0.0038882831577211618, 0.01914936862885952, 0.0076490459032356739, 0.0050086411647498608, 0.0044442093931138515, 0.012634497135877609, 0.0026429619174450636, 0.0089519945904612541, 0.0019761747680604458, 0.0080210082232952118, 0.0062540341168642044, 0.014938993379473686, 0.0092641757801175117, 0.0094270678237080574, 0.0057748164981603622, 0.0081235906109213829, 0.0054766708053648472, 0.0052262851968407631, 0.0055268947035074234, 0.0075505524873733521, 0.0056537538766860962, 0.0043222564272582531, 0.0077277491800487041, 0.0065826745703816414, 0.019043771550059319, 0.0048650805838406086, 0.0021427376195788383, 0.0058614499866962433, 0.0069514559581875801, 0.012482792139053345, 0.01486200001090765, 0.0069566918537020683, 0.0077763707377016544, 0.0027412490453571081, 0.010101730935275555, 0.0092404475435614586, 0.0036579691804945469, 0.0079864785075187683, 0.0075696934945881367, 0.0061876908876001835, 0.010246658697724342, 0.010389839299023151, 0.013324345462024212, 0.017262127250432968, 0.012876882217824459, 0.0080521637573838234, 0.0050110910087823868, 0.0035303579643368721, 0.013326876796782017, 0.0059713567607104778, 0.010695048607885838, 0.0052337963134050369, 0.0084762917831540108, 0.0075235301628708839, 0.0039013035129755735, 0.0028158519417047501, 0.014967957511544228, 0.009827873669564724, 0.0096620488911867142, 0.0045712348073720932, 0.0052144313231110573, 0.0058996896259486675, 0.0061952085234224796, 0.011247949674725533, 0.021885078400373459, 0.0023502586409449577, 0.012724035419523716, 0.007485812995582819, 0.0069162724539637566, 0.010016623884439468, 0.0050611025653779507, 0.0058933813124895096, 0.0052535925060510635, 0.0039440467953681946, 0.0058072363026440144, 0.0083609912544488907, 0.0086035151034593582, 0.0045888093300163746, 0.0089935949072241783, 0.0046873269602656364, 0.006269725039601326, 0.020007945597171783, 0.28835439682006836, 0.0034371414221823215, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 24037, 2339, 11016, -950, 6834, 8707, 26217, 9542, -2106, 24772, 9750, 2694, 12032, 74073, -599, -3477, 16579, 19573, 2993, -247, -1082, 20243, 7072, 4578, 15381, 7105, 7046, 7393, 53, -86, 8469, 14182, 26106, 2868, 9721, -798, 33359, 10267, 1270, 7238, 1122, 18996, 20226, 7143, 6069, 16279, 24677, 8220, 7651, 5188, 473, -1012, 26789, 8861, 12853, 24464, -521, 14622, 5006, 6529, 21106, 9773, 5222, 9762, 10458, 7651, 8843, -1255, 29024, 13266, 17210, -1877, -2371, 4557, 2610, 5752, 35696, 17906, 21110, -3092, 10097, -8313, -3029, 981, 11934, 7962, 11065, 7049, 18869, 7183, 11900, 6475, 23120, 29154, -14252, 23704, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00010837046283995733, 0.00015340358368121088, 0.00012280620285309851, 0.00057499186368659139, 0.00023168642655946314, 0.00010459525947226211, 0.0001197933524963446, 0.00036771726445294917, 0.00022233283380046487, 7.3527655331417918e-05, 0.00014552089851349592, 0.00030723444069735706, 0.00022895980509929359, 6.5043059294112027e-05, 0.00018221975187771022, 0.00020452216267585754, 0.00013507583935279399, 0.00011999328125966713, 0.00015055903350003064, 0.00045982812298461795, 0.00024054021923802793, 0.00012240627256687731, 0.00021347204165067524, 0.00017121566634159535, 0.0001158361483248882, 0.00029376198654063046, 0.00020462683460209519, 0.0001211982817039825, 0.00037983676884323359, 0.0002354262542212382, 0.00016865311772562563, 0.00013248379400465637, 7.5333293352741748e-05, 0.00037735133082605898, 0.00017244795162696391, 0.00033714962773956358, 6.8042754719499499e-05, 0.00025787058984860778, 0.00036348745925351977, 0.00013202917762100697, 0.00044046505354344845, 9.9574011983349919e-05, 0.000106553387013264, 0.00010314969404134899, 0.00018668723350856453, 0.00019901971973013133, 0.00011576656834222376, 0.00017698570445645601, 0.00020679344015661627, 0.00017023738473653793, 0.00030197680462151766, 0.00064560689497739077, 0.00010005680815083906, 0.00018026366888079792, 0.00017978169489651918, 7.5323034252505749e-05, 0.00023745275393594056, 0.00011857696517836303, 0.00015793464262969792, 0.00024807191221043468, 8.0360288848169148e-05, 0.0001445796515326947, 0.00020140643755439669, 0.00028262619161978364, 0.00010030250996351242, 0.00014702146290801466, 0.00021871407807338983, 0.00027300452347844839, 9.2760303232353181e-05, 8.7167543824762106e-05, 0.00011623778846114874, 0.00024643907090649009, 0.00016787543427199125, 0.00028894448769278824, 0.00015804504801053554, 0.00021898749400861561, 6.6400592913851142e-05, 0.00025168489082716405, 7.8949233284220099e-05, 0.00039278075564652681, 0.00010620802640914917, 0.00024981526075862348, 0.00012641493231058121, 0.00027687160763889551, 0.00013207041774876416, 0.00019740374409593642, 0.00014514492067974061, 0.00019713811343535781, 8.8770466390997171e-05, 0.00022082515351939946, 0.0001178626116598025, 0.0002613251272123307, 9.1064590378664434e-05, 9.4249327958095819e-05, 0.00020565453451126814, 0.00013799224689137191, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 40,-14,127,102,62,-30,30,-34,115,-6,-53,-76,28,81,-35,-78, 
  /* [1][0][][] */ 41,69,7,-8,110,-19,1,42,65,66,-39,127,-1,-13,107,-110, 
  /* [2][0][][] */ 27,-61,-4,6,-63,34,-53,89,-67,-82,5,78,-13,-127,79,-92, 
  /* [3][0][][] */ 127,109,-5,40,-119,-20,-61,-21,-1,0,94,-67,-49,90,-44,-36, 
  /* [4][0][][] */ 6,-10,14,12,-26,27,-15,45,-57,-28,2,-3,-8,-127,23,3, 
  /* [5][0][][] */ 126,-57,-30,14,-5,-96,-16,29,6,24,-127,-1,21,1,-5,17, 
  /* [6][0][][] */ -127,-79,-11,106,-55,1,-40,40,-126,-73,-78,-25,31,56,-14,97, 
  /* [7][0][][] */ -21,20,-81,52,46,-127,-21,43,11,-21,22,-2,-1,15,-51,13, 
  /* [8][0][][] */ 29,-44,-8,-14,15,31,-55,-65,-14,10,-64,13,-127,-3,-1,20, 
  /* [9][0][][] */ 24,-45,68,122,6,30,-5,-84,127,-97,6,-25,-8,63,-77,11, 
  /* [10][0][][] */ -123,-72,-18,-62,127,56,39,64,104,-87,-93,40,86,-110,-125,80, 
  /* [11][0][][] */ 52,-26,-127,23,54,20,-20,40,-12,-33,-22,-3,0,22,-36,1, 
  /* [12][0][][] */ 121,-53,4,4,-2,-65,-58,-30,34,7,-127,-18,-59,-31,-5,68, 
  /* [13][0][][] */ 52,-97,26,-79,106,-9,-100,-127,41,-82,37,13,22,-16,28,21, 
  /* [14][0][][] */ -55,32,-86,-50,93,-127,62,-62,55,43,-7,-100,20,118,-20,23, 
  /* [15][0][][] */ 19,-2,60,34,52,-41,-38,-16,19,-59,-59,-8,-127,-53,-6,45, 
  /* [16][0][][] */ -127,70,16,6,-14,88,31,68,-29,12,111,-2,-7,14,9,-38, 
  /* [17][0][][] */ -9,-9,-44,-32,-41,14,41,83,-24,127,-26,5,-5,80,63,3, 
  /* [18][0][][] */ -5,127,-44,0,7,8,66,-57,26,104,-43,100,9,-39,32,-93, 
  /* [19][0][][] */ 9,-17,31,18,12,39,-5,18,11,9,-44,-3,-127,-1,-8,21, 
  /* [20][0][][] */ 86,-57,-1,-79,-35,22,19,-79,-51,23,-127,-35,24,2,46,15, 
  /* [21][0][][] */ 48,1,127,48,-15,53,31,0,-2,28,-14,-3,-14,79,-4,-10, 
  /* [22][0][][] */ 31,6,15,11,-14,-3,25,127,11,3,9,38,7,30,20,22, 
  /* [23][0][][] */ -27,16,-88,16,17,-127,7,34,0,-18,-16,-5,-68,-3,-8,43, 
  /* [24][0][][] */ 35,-59,9,-61,61,4,-29,-13,34,33,66,92,-51,89,127,33, 
  /* [25][0][][] */ -127,-92,-49,-3,10,1,10,-39,-62,-2,-73,5,15,45,31,56, 
  /* [26][0][][] */ 9,-4,50,-3,-8,11,-33,67,-78,-66,-4,14,4,-127,43,-20, 
  /* [27][0][][] */ -94,48,-45,35,41,-17,0,20,32,-25,127,30,-27,0,-20,-30, 
  /* [28][0][][] */ -18,-7,16,31,2,3,15,84,27,16,-19,-5,-127,-8,-8,33, 
  /* [29][0][][] */ -12,69,38,-40,44,-14,24,-29,-127,37,-26,3,-3,32,-93,5, 
  /* [30][0][][] */ -14,-5,-127,-33,20,-57,2,17,-18,-8,-3,-18,-38,-29,7,19, 
  /* [31][0][][] */ 127,-33,-108,10,51,-5,-36,60,-13,-5,-76,-41,19,5,-67,17, 
  /* [32][0][][] */ -107,41,18,45,14,86,27,36,24,2,127,15,-26,15,-23,-15, 
  /* [33][0][][] */ 10,-16,127,-18,-68,27,12,-37,0,22,-8,28,-2,13,41,25, 
  /* [34][0][][] */ -13,-22,-47,-107,19,8,3,-21,-18,-45,-26,-127,-19,-4,43,7, 
  /* [35][0][][] */ 2,-35,45,49,53,-22,17,-20,-121,41,-11,24,-27,127,-40,-41, 
  /* [36][0][][] */ -117,58,-26,-10,-10,42,43,84,-10,26,127,-17,-1,27,13,-22, 
  /* [37][0][][] */ -33,11,127,-26,-69,-54,25,-33,20,23,0,7,-10,-63,55,10, 
  /* [38][0][][] */ 16,-17,-7,28,35,-53,-63,10,-17,-20,66,-11,127,32,-9,4, 
  /* [39][0][][] */ -17,-29,0,-50,-52,-110,64,127,-37,-23,-4,-48,-3,59,62,78, 
  /* [40][0][][] */ 75,-10,-12,-7,-2,76,-19,11,16,-8,7,-1,127,12,-22,-22, 
  /* [41][0][][] */ -11,-5,-30,-127,29,-1,-26,-72,-4,-44,15,-34,-14,-17,-19,27, 
  /* [42][0][][] */ 52,49,2,101,-101,-10,-91,-3,-85,-63,75,-91,-36,127,-48,0, 
  /* [43][0][][] */ 18,107,-33,127,15,20,38,-68,-37,83,-8,20,11,-51,50,38, 
  /* [44][0][][] */ -8,-25,-127,21,56,80,-48,53,-21,-24,38,-22,5,-29,-60,2, 
  /* [45][0][][] */ -3,24,-14,-127,-13,11,58,-15,-10,30,-26,21,-5,-98,28,-46, 
  /* [46][0][][] */ 12,27,53,-24,16,17,-49,51,22,-48,-22,13,8,127,48,-11, 
  /* [47][0][][] */ 24,-26,20,-41,-36,12,-70,59,-14,-35,10,34,12,-127,41,14, 
  /* [48][0][][] */ 6,-9,8,-127,-9,-17,-3,8,10,-33,18,-16,5,46,-13,57, 
  /* [49][0][][] */ 37,-40,-2,125,94,10,1,48,-53,17,37,45,-8,49,127,-6, 
  /* [50][0][][] */ -20,-11,65,-20,3,127,-25,-59,43,-19,112,28,97,-3,-9,-58, 
  /* [51][0][][] */ 31,49,12,12,20,3,-41,22,40,3,-4,127,12,32,27,-54, 
  /* [52][0][][] */ -21,58,122,6,22,-40,12,-49,-31,3,10,34,-1,104,-127,-18, 
  /* [53][0][][] */ 1,-24,-42,-127,-37,2,20,-33,-15,41,1,-6,26,-19,55,4, 
  /* [54][0][][] */ -5,14,-25,-45,16,17,-15,7,63,-29,3,-30,-13,127,20,36, 
  /* [55][0][][] */ -11,-38,-47,2,-4,-43,-4,-127,9,-87,-1,-5,-33,-92,-59,-8, 
  /* [56][0][][] */ 48,42,30,62,0,-26,8,127,25,-32,-2,-39,84,-17,-50,43, 
  /* [57][0][][] */ 85,-17,127,-29,-79,-47,-4,-31,10,12,-112,29,61,-47,53,29, 
  /* [58][0][][] */ 111,86,17,102,-127,-28,0,55,-5,30,81,-27,-66,-55,-19,-78, 
  /* [59][0][][] */ 125,-40,-9,0,-26,-14,-11,6,-29,19,-127,-11,18,-6,8,28, 
  /* [60][0][][] */ -127,37,-6,-9,12,11,16,21,0,4,89,1,-36,-2,14,-8, 
  /* [61][0][][] */ -104,57,35,29,17,4,-67,-44,127,-90,81,-12,48,-34,-102,-50, 
  /* [62][0][][] */ -15,-53,-127,69,76,105,-11,101,35,-61,40,-13,-75,-5,-116,-22, 
  /* [63][0][][] */ -47,19,127,-44,-59,-49,32,-32,-2,12,7,6,-20,-51,64,10, 
  /* [64][0][][] */ 31,61,-16,35,63,-1,90,-127,-8,125,3,-20,-13,-127,0,46, 
  /* [65][0][][] */ 8,25,12,-24,74,1,4,-127,-26,-66,-36,-55,-1,-40,40,19, 
  /* [66][0][][] */ -127,6,-16,6,-46,24,14,-35,-70,-34,-75,47,53,23,49,74, 
  /* [67][0][][] */ -11,-42,3,127,10,-3,-22,44,66,24,11,-16,-9,-25,-90,-25, 
  /* [68][0][][] */ 13,-1,0,127,-44,-18,2,-22,-43,26,11,-17,-24,-57,-25,-47, 
  /* [69][0][][] */ 114,105,-3,123,45,-19,73,-127,10,125,11,60,12,-50,19,-21, 
  /* [70][0][][] */ 26,-43,-11,-109,127,-43,35,8,86,-25,64,-56,3,101,88,125, 
  /* [71][0][][] */ 8,48,5,82,55,-127,-38,95,37,-94,19,15,11,-61,-66,30, 
  /* [72][0][][] */ -127,-68,-14,47,14,33,-26,13,-52,-31,-95,36,54,16,6,98, 
  /* [73][0][][] */ -18,-16,-12,63,11,-17,-1,-20,78,15,2,4,16,127,-58,-44, 
  /* [74][0][][] */ 80,-48,9,-37,-44,-23,42,-14,-41,-15,-122,24,-127,-10,44,54, 
  /* [75][0][][] */ -11,-21,-30,127,-27,7,1,-16,-71,28,-14,-24,-4,-55,-16,-44, 
  /* [76][0][][] */ 4,-13,-3,43,35,11,-27,-124,17,-127,3,24,-25,-23,34,-36, 
  /* [77][0][][] */ 127,-25,25,44,-35,0,-40,-8,42,-6,-39,44,28,6,-47,28, 
  /* [78][0][][] */ -17,4,43,-9,13,-9,-61,29,37,-31,-34,-37,11,127,26,-28, 
  /* [79][0][][] */ -3,19,49,17,41,56,-50,-53,12,-48,70,-19,127,-22,-27,-37, 
  /* [80][0][][] */ -127,-98,-79,125,11,31,23,-22,-93,32,-117,17,62,-90,-3,59, 
  /* [81][0][][] */ 55,5,-64,42,127,98,-34,-45,1,-98,-14,-74,-37,-16,-95,19, 
  /* [82][0][][] */ 118,124,-1,40,-127,-21,-74,-23,-73,-4,115,-62,-59,101,-4,-40, 
  /* [83][0][][] */ 127,48,16,-26,10,-10,-7,34,36,15,89,-32,-53,-26,-30,-82, 
  /* [84][0][][] */ -4,-50,-55,-38,46,33,-4,-127,-34,-56,39,13,-33,3,-6,-16, 
  /* [85][0][][] */ -18,-6,-39,-50,-3,-9,69,92,-16,127,-13,-44,34,69,71,-23, 
  /* [86][0][][] */ 98,-28,3,4,-5,-38,1,-17,8,3,-127,8,25,13,-11,28, 
  /* [87][0][][] */ -19,39,11,-42,-13,65,-30,50,-11,-27,27,12,12,-127,20,7, 
  /* [88][0][][] */ -2,-22,-112,-43,76,-21,-28,-127,-5,-29,-24,-23,-23,-9,22,-20, 
  /* [89][0][][] */ 38,-8,23,-127,40,4,-55,109,81,-69,21,-1,-15,53,41,32, 
  /* [90][0][][] */ 3,4,-47,58,65,-15,107,-83,74,127,-45,39,31,3,-3,-9, 
  /* [91][0][][] */ 48,-12,-44,-14,5,-127,-13,-4,-13,-2,-44,-3,26,-15,1,26, 
  /* [92][0][][] */ 23,-2,127,75,49,17,3,51,-34,34,-76,37,31,84,-1,4, 
  /* [93][0][][] */ 127,-27,-47,-18,-22,-49,12,38,-31,43,-106,-8,-4,20,-9,35, 
  /* [94][0][][] */ 20,-24,44,82,110,-35,-12,58,5,-15,-4,56,-2,127,-27,-82, 
  /* [95][0][][] */ -127,51,52,36,16,42,13,-6,10,-3,125,-3,-23,34,-13,-28, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00054030964383855462, 0.00076483422890305519, 0.00061228283448144794, 0.0028667743317782879, 0.0011551340576261282, 0.00052148738177493215, 0.00059726147446781397, 0.0018333517946302891, 0.0011084992438554764, 0.00036659161560237408, 0.00072553299833089113, 0.0015317986253648996, 0.0011415397748351097, 0.00032428940176032484, 0.00090850482229143381, 0.0010196993825957179, 0.00067345640854910016, 0.0005982582806609571, 0.00075065193232148886, 0.0022925948724150658, 0.0011992770014330745, 0.00061028893105685711, 0.001064321375451982, 0.00085364107508212328, 0.00057753181317821145, 0.0014646282652392983, 0.0010202212724834681, 0.00060426612617447972, 0.0018937768181785941, 0.0011737799504771829, 0.00084086478454992175, 0.0006605330272577703, 0.00037559409975074232, 0.001881384989246726, 0.00085978495189920068, 0.0016809487715363503, 0.00033924519084393978, 0.0012856821995228529, 0.001812263042666018, 0.00065826642094179988, 0.0021960551384836435, 0.0004964526160620153, 0.00053125014528632164, 0.00051428010920062661, 0.00093077862402424216, 0.00099226552993059158, 0.00057718489551916718, 0.00088240910554304719, 0.0010310234501957893, 0.00084876356413587928, 0.0015055853873491287, 0.0032188440673053265, 0.00049885973567143083, 0.00089875230332836509, 0.0008963492582552135, 0.00037554293521679938, 0.0011838836362585425, 0.00059119687648490071, 0.00078742497134953737, 0.001236828276887536, 0.00040065750363282859, 0.00072084018029272556, 0.0010041651548817754, 0.0014091077027842402, 0.00050008471589535475, 0.0007330144289880991, 0.0010904569644480944, 0.0013611363247036934, 0.00046248105354607105, 0.00043459687731228769, 0.00057953427312895656, 0.0012286872370168567, 0.00083698745584115386, 0.0014406092232093215, 0.00078797544119879603, 0.0010918201878666878, 0.00033105775946751237, 0.001254841685295105, 0.00039362232200801373, 0.0019583124667406082, 0.00052952824626117945, 0.0012455201940611005, 0.00063027511350810528, 0.0013804166810587049, 0.00065847206860780716, 0.00098420865833759308, 0.00072365842061117291, 0.00098288431763648987, 0.00044258867274038494, 0.0011009823065251112, 0.00058763526612892747, 0.0013029056135565042, 0.00045402665273286402, 0.00046990500413812697, 0.0010253451764583588, 0.00068799691507592797, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -36867, 2960, 2253, -7065, 1152, -6037, -11595, -42097, 4848, 23863, 34135, -10100, -900, -22002, 37022, -41994, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00071751081850379705, 0.00076960184378549457, 0.0011019066441804171, 0.0010641359258443117, 0.00075047975406050682, 0.00095901632448658347, 0.00094387674471363425, 0.00060397008201107383, 0.00064616772579029202, 0.00064133427804335952, 0.00072814448503777385, 0.00060874043265357614, 0.0012902234448119998, 0.0013187630102038383, 0.00057396414922550321, 0.00065676186932250857, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -12,-4,-23,11,23,-5,1,102,-49,15,39,-5,17,-11,-10,13,14,-12,-8,-7,62,-7,19,127,-16,87,-4,-13,28,-14,21,-25,-16,53,17,-46,14,48,19,-11,-103,-27,18,40,39,25,-122,-51, 
  /* [1][0][][] */ -36,-13,24,15,-31,11,-1,57,-53,-35,5,-41,-22,-18,-2,-2,-23,117,-8,19,11,9,-30,-15,28,-43,21,24,-23,-82,-38,21,-20,-4,32,-2,-6,-42,1,16,-17,-32,127,13,11,1,23,-16, 
  /* [2][0][][] */ -21,-9,-15,-34,-2,-67,4,-20,1,13,16,27,17,16,-12,8,-4,-18,-24,-15,-5,-2,-2,-127,-14,76,-15,3,1,-19,-2,-3,-8,56,9,2,21,10,26,-1,-39,1,-19,-7,-1,-10,14,11, 
  /* [3][0][][] */ -7,33,3,-31,-1,0,2,-5,-19,-4,2,38,-127,6,-4,-1,1,5,-18,-2,-29,9,6,16,-7,-12,4,23,-10,19,5,16,5,1,17,18,-10,27,39,3,10,5,24,-28,10,-6,4,18, 
  /* [4][0][][] */ 38,-33,12,10,22,27,24,-26,-29,2,-12,-21,2,11,0,19,22,-6,-78,4,-5,11,16,74,2,-28,8,47,10,-76,20,8,15,-36,33,-127,13,39,-3,17,-18,18,10,-22,-11,-19,10,6, 
  /* [5][0][][] */ 31,-1,-18,55,0,-4,9,23,-1,0,40,7,6,49,2,2,-23,24,29,6,14,5,5,-27,0,-53,4,-17,-3,-12,4,2,65,-127,0,27,-12,-12,14,8,-92,57,17,-3,-5,-3,-96,-11, 
  /* [6][0][][] */ 23,-1,3,7,-13,-6,2,-11,-3,7,-3,7,-18,10,4,3,0,-11,127,7,6,8,16,-33,4,5,24,-14,-11,-2,-5,9,-2,-9,30,-34,-1,-45,71,11,1,-8,-5,4,-9,4,5,-10, 
  /* [7][0][][] */ -42,-14,-10,36,-8,75,-9,47,-3,29,-8,127,76,-2,-9,-4,-6,-24,-10,-21,-32,-7,-22,69,1,-35,-52,-27,-11,-11,-12,-12,1,3,-23,5,7,-56,95,-6,26,25,-64,-59,19,-10,1,4, 
  /* [8][0][][] */ -49,-52,-1,2,-6,4,0,28,-2,-67,5,39,52,3,4,6,-10,62,-31,5,-50,21,-8,-14,2,-1,5,47,-5,112,-11,21,-3,2,-22,-127,-114,69,33,26,19,-3,105,-21,6,29,23,31, 
  /* [9][0][][] */ -27,6,-2,27,17,-29,-1,-5,56,-36,12,53,-55,1,14,1,-6,18,-40,-20,52,10,-13,-20,0,6,50,-20,9,8,9,-4,-2,14,71,-105,-6,-127,-89,9,-32,29,53,9,3,6,-11,-43, 
  /* [10][0][][] */ -18,-10,-36,-127,45,84,7,-12,-3,34,21,10,51,-47,-34,22,35,-41,57,-36,35,-28,42,55,-50,-107,4,-35,49,35,46,-42,-32,-79,23,-3,14,-40,5,-36,-32,-67,-16,12,15,17,17,-35, 
  /* [11][0][][] */ -2,53,-6,65,37,-67,-83,-16,1,64,-16,-1,-7,53,-5,-80,22,44,9,-3,-55,-110,14,1,17,-46,24,-18,55,-42,28,-91,50,-21,-39,-100,99,19,8,-127,-5,71,99,-76,-9,-57,36,30, 
  /* [12][0][][] */ 127,-5,-18,14,3,17,1,101,19,-12,-57,-25,1,16,-8,-4,-7,9,-5,-7,3,-1,-2,20,-2,17,-5,5,-4,13,-5,4,2,-64,-12,13,-20,-15,-30,-1,-14,-82,5,-126,-55,-11,78,-1, 
  /* [13][0][][] */ 9,4,-2,6,7,-11,2,1,0,8,3,21,-6,5,5,0,6,1,9,2,11,-13,9,-3,1,2,16,127,10,-3,6,-2,2,0,-39,22,9,-5,6,-16,-13,-4,1,4,-1,-2,-9,-11, 
  /* [14][0][][] */ 61,-21,39,-64,49,23,37,-91,-52,-51,-11,121,-69,2,62,11,50,28,-51,62,16,11,71,-13,21,62,-37,-109,26,-32,61,50,-11,73,-127,-43,-43,39,89,6,-32,3,50,-3,1,4,10,-26, 
  /* [15][0][][] */ -6,-45,-78,-34,50,23,68,-47,-12,18,-19,-34,73,26,-101,59,56,42,69,-85,-103,-30,52,-12,-89,48,23,50,48,49,41,-37,18,60,96,127,-17,-104,-7,-39,91,54,110,-50,-1,-29,-20,71, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.030494209378957748, 0.032708078622817993, 0.046831030398607254, 0.045225776731967926, 0.031895387917757034, 0.040758192539215088, 0.040114760398864746, 0.025668729096651077, 0.027462126687169075, 0.027256706729531288, 0.030946141108870506, 0.025871468707919121, 0.054834496229887009, 0.056047424674034119, 0.02439347468316555, 0.027912378311157227, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 4689, 36305, -1055, 36949, 4191, 126469, -2182, 46646, 4678, 29330, 28357, -386, -2113, 33440, -1421, -1691, -435, -230, 1056, -2180, 155, -3433, -485, -22821, -5171, 37281, 130045, 96185, 2521, 818, -2705, 394, 26925, -1375, 26231, -11894, 43632, 429, 52820, 2806, -2095, 61011, 1210, 1636, 51463, 376, 2046, 52113, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.9020723458379507e-05, 4.0180708310799673e-05, 0.00015629791596438736, 5.7838376960717142e-05, 0.00013767328346148133, 6.7462562583386898e-05, 0.0001748706417856738, 0.00012799537216778845, 6.895489786984399e-05, 4.0602484659757465e-05, 5.5114571296144277e-05, 0.00010598881635814905, 4.6219953219406307e-05, 3.9796486817067489e-05, 0.00016891580889932811, 0.00020989467157050967, 0.00020106065494474024, 8.0821497249417007e-05, 0.00012610842532012612, 0.00015329557936638594, 9.8924472695216537e-05, 0.00019068847177550197, 9.6420888439752162e-05, 0.00015729902952443808, 8.967697067419067e-05, 0.00012676877668127418, 3.1359351851278916e-05, 7.6588235970120877e-05, 0.00012200651690363884, 0.00013893037976231426, 0.00012150492693763226, 0.00015760176756884903, 5.095967571833171e-05, 0.00015542624169029295, 3.2128340535564348e-05, 7.5207368354313076e-05, 0.00013530257274396718, 0.0001000043484964408, 0.00010803049372043461, 0.00012401498679537326, 0.00015319844533223659, 9.7253592684864998e-05, 7.7891178079880774e-05, 9.5270093879662454e-05, 2.9087201255606487e-05, 0.00015648214321117848, 9.7711104899644852e-05, 3.1563933589495718e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-91,97,70,54,-34,106,-63,60,-88,-80,47,51,-42,-72,-90,102,78,49,78,66,-74,-83,51,-31,-40,-63,-64,-67,62,-62,-114,-12,41,68,64,-65,52,-50,-23,50,-73,57,62,-93,11,74,-33, 82,-97,127,85,-77,-68,-57,-84,96,-102,-64,74,79,-109,-95,91,-38,96,82,127,85,-115,53,71,-51,-78,-69,-80,55,79,-30,-127,-86,79,81,83,-82,82,-83,-15,76,-94,82,89,-73,-127,92,-104, 34,-46,70,38,19,-41,-47,-39,42,-31,6,34,29,-79,-55,-2,-54,37,34,69,34,-55,32,25,-28,-46,-44,-22,31,30,87,-90,-85,44,34,34,-29,39,-37,-10,40,-40,34,43,-7,-9,37,-73, 
  /* [0][1][][] */ 93,-113,-42,93,56,-82,127,-89,86,-114,-72,82,84,-111,-14,-127,127,107,74,-38,84,108,-127,72,73,-75,-93,-99,-127,86,-70,-9,-89,70,106,96,-84,79,-80,88,84,-100,87,90,-88,107,93,-91, 127,-127,-65,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-21,96,-66,127,127,-50,127,127,69,127,127,-127,-127,-127,54,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 63,-78,-33,65,37,-62,-49,-61,56,-43,-60,58,49,-54,-16,10,-63,50,58,-29,56,64,51,63,65,-65,-61,-44,36,54,127,15,-63,69,48,49,-49,60,-60,56,61,-57,54,62,-61,-68,58,-57, 
  /* [0][2][][] */ 44,-53,-47,50,27,-52,63,-42,41,-72,-4,39,56,-72,83,-79,73,49,35,-30,27,-10,-76,30,-23,-44,-49,-49,-74,31,-41,90,-74,37,49,42,-26,37,-42,-87,47,-50,40,44,-24,15,40,-75, 71,-75,-49,79,-56,-63,-72,-67,51,-77,-66,61,74,-47,127,32,-46,58,62,-43,55,-18,42,66,-48,-67,-78,-61,32,60,-23,117,-55,65,57,57,-49,61,-66,-106,69,-67,59,62,-85,49,62,-53, 41,-41,-27,45,28,-20,-18,-33,15,-25,-52,28,31,5,67,24,-35,22,29,-32,29,0,40,41,-24,-30,-48,-24,34,33,62,67,1,34,15,22,-22,30,-28,-55,28,-32,25,29,-63,8,30,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029333806596696377, 0.001707680057734251, 0.0066426610574126244, 0.0024581309407949448, 0.0058511141687631607, 0.0028671589680016041, 0.0074320021085441113, 0.0054398034699261189, 0.0029305831994861364, 0.0017256055725738406, 0.0023423691745847464, 0.0045045246370136738, 0.0019643479026854038, 0.0016913507133722305, 0.0071789217181503773, 0.0089205233380198479, 0.0085450774058699608, 0.0034349134657531977, 0.0053596082143485546, 0.0065150619484484196, 0.0042042899876832962, 0.008104260079562664, 0.0040978877805173397, 0.0066852085292339325, 0.0038112711627036333, 0.0053876731544733047, 0.0013327724300324917, 0.0032549998722970486, 0.005185276735574007, 0.0059045408852398396, 0.005163959227502346, 0.0066980752162635326, 0.0021657862234860659, 0.0066056149080395699, 0.0013654544018208981, 0.0031963130459189415, 0.0057503595016896725, 0.0042501846328377724, 0.0045912959612905979, 0.0052706371061503887, 0.0065109338611364365, 0.0041332775726914406, 0.0033103751484304667, 0.0040489789098501205, 0.0012362060369923711, 0.0066504906862974167, 0.0041527217254042625, 0.00134146714117378, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1090, 1489, 3632, 830, 14087, 29081, 4145, -73, -1242, -1067, 2053, 1674, 5419, 2006, 36014, 4995, 3334, -1969, -404, 5254, -2715, 18314, 15663, 18051, 8413, 690, 5437, 6828, 16125, -836, 14905, 9455, 1005, -159, 8541, 4798, -2955, 357, -1150, 8942, 1870, -908, -1723, -27, 1739, 4695, 1562, 1533, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00022476480808109045, 0.00048309669364243746, 0.0001519314682809636, 0.00018649829144123942, 0.00015560220344923437, 0.0001390929683111608, 0.00026616919785737991, 0.00014973062206991017, 0.00022898314637131989, 0.00041931320447474718, 0.00050247675972059369, 0.00018506328342482448, 0.0002344481908949092, 0.00037765500019304454, 9.9877812317572534e-05, 0.00025081372587010264, 0.00014923706476110965, 0.00019738658738788217, 0.00015605827502440661, 0.00017608639609534293, 0.00022227078443393111, 0.00013991245941724628, 0.00023539904213976115, 8.672413241583854e-05, 0.00018997698498424143, 0.00016447764937765896, 0.0012818307150155306, 0.00027414478245191276, 0.00010875230509554967, 0.00027280551148578525, 0.00017566498718224466, 0.00012904377945233136, 0.0003689710283651948, 0.00015150576655287296, 0.00043323758291080594, 0.00038234595558606088, 0.00046637858031317592, 0.00023182107543107122, 0.00015163575881160796, 0.0002084243024000898, 9.2117967142257839e-05, 0.00013671813940163702, 0.00017769522673916072, 0.00017833129095379263, 0.0011219833977520466, 0.00029509991873055696, 0.00016122209490276873, 0.00076323054963722825, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,4,-1,73,-36,37,23,-30, 
  /* [1][0][][] */ 25,74,38,19,14,-46,97,127, 
  /* [2][0][][] */ -39,-6,-1,6,-127,-13,16,4, 
  /* [3][0][][] */ 110,-2,-17,-124,-127,18,36,-16, 
  /* [4][0][][] */ -127,47,-17,-11,74,-15,44,21, 
  /* [5][0][][] */ -104,-29,21,-10,-127,6,10,90, 
  /* [6][0][][] */ -16,-127,27,-19,16,3,-4,33, 
  /* [7][0][][] */ -69,-6,3,107,127,-36,-38,8, 
  /* [8][0][][] */ 81,3,-1,-127,5,-24,-46,-32, 
  /* [9][0][][] */ 1,-127,-5,-9,7,89,-50,81, 
  /* [10][0][][] */ -94,-6,-1,18,-127,68,56,-18, 
  /* [11][0][][] */ 109,16,36,13,-61,-48,-35,-127, 
  /* [12][0][][] */ -4,13,40,-8,8,-77,127,63, 
  /* [13][0][][] */ 60,-31,-9,-17,115,127,118,-44, 
  /* [14][0][][] */ 127,55,-5,15,-89,-10,-34,-28, 
  /* [15][0][][] */ -18,-127,21,-13,2,3,1,33, 
  /* [16][0][][] */ -50,-12,7,-7,-127,4,16,3, 
  /* [17][0][][] */ -23,110,-116,3,16,-127,112,-89, 
  /* [18][0][][] */ 127,-30,-46,17,-60,25,10,106, 
  /* [19][0][][] */ 127,-45,-21,-5,44,-3,32,5, 
  /* [20][0][][] */ 127,28,-20,125,1,39,5,-59, 
  /* [21][0][][] */ 6,36,-61,5,-21,100,-127,-94, 
  /* [22][0][][] */ -127,17,33,2,-42,2,-50,-28, 
  /* [23][0][][] */ -42,-57,5,25,-127,67,79,-16, 
  /* [24][0][][] */ 127,-9,-15,-12,-106,-13,-2,15, 
  /* [25][0][][] */ 24,-8,3,-19,127,50,55,-35, 
  /* [26][0][][] */ -1,-98,3,-35,5,-127,85,-50, 
  /* [27][0][][] */ -17,-127,26,-11,-3,-53,34,-7, 
  /* [28][0][][] */ -118,33,-33,26,-24,-31,127,107, 
  /* [29][0][][] */ -11,45,16,5,3,39,-102,-127, 
  /* [30][0][][] */ 127,-34,5,7,-97,10,-44,-29, 
  /* [31][0][][] */ -5,-23,67,-18,20,-111,127,62, 
  /* [32][0][][] */ -86,14,8,6,-127,-100,-106,56, 
  /* [33][0][][] */ -26,11,0,20,-127,-56,-49,18, 
  /* [34][0][][] */ 11,-127,56,-1,-3,91,-68,61, 
  /* [35][0][][] */ -25,-52,-127,-13,-4,-69,42,-55, 
  /* [36][0][][] */ 5,127,55,7,-9,9,-22,-36, 
  /* [37][0][][] */ -127,32,37,-15,58,-30,-6,-105, 
  /* [38][0][][] */ -127,-16,-43,-12,44,26,34,104, 
  /* [39][0][][] */ -6,-33,74,-6,12,-92,127,100, 
  /* [40][0][][] */ -34,-26,-10,-43,-127,114,113,-32, 
  /* [41][0][][] */ -127,53,8,-76,-99,-99,-97,45, 
  /* [42][0][][] */ -40,-127,-100,-4,-6,69,-120,-83, 
  /* [43][0][][] */ -67,7,-16,-127,107,60,66,4, 
  /* [44][0][][] */ 127,-9,17,-98,33,-34,-13,38, 
  /* [45][0][][] */ -22,-127,-5,-16,-9,-64,70,3, 
  /* [46][0][][] */ 112,-8,-8,-24,127,-40,-35,5, 
  /* [47][0][][] */ 127,1,-3,114,-7,27,18,-48, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00070820091059431434, 0.0015221667708829045, 0.00047871377319097519, 0.00058762874687090516, 0.00049027969362214208, 0.00043826151522807777, 0.00083866005297750235, 0.00047177920350804925, 0.00072149228071793914, 0.0013211943442001939, 0.001583230565302074, 0.00058310723397880793, 0.0007387118530459702, 0.0011899354867637157, 0.00031470032990910113, 0.0007902772631496191, 0.0004702240985352546, 0.00062193616759032011, 0.00049171672435477376, 0.00055482238531112671, 0.00070034264354035258, 0.00044084363617002964, 0.00074170785956084728, 0.0002732550201471895, 0.00059858959866687655, 0.00051824492402374744, 0.0040388605557382107, 0.00086378998821601272, 0.00034266256261616945, 0.00085957010742276907, 0.0005534946103580296, 0.00040659800288267434, 0.0011625735787674785, 0.00047737243585288525, 0.0013650680193677545, 0.0012047160416841507, 0.0014694904675707221, 0.00073043419979512691, 0.00047778204316273332, 0.00065671437187120318, 0.00029025020194239914, 0.00043077880400232971, 0.00055989157408475876, 0.00056189572205767035, 0.0035352050326764584, 0.00092981656780466437, 0.00050798716256394982, 0.0024048273917287588, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -38578, 26511, -12287, -13594, 22685, -5431, 34375, 42750, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00048565844190306962, 0.00075039267539978027, 0.0014528266619890928, 0.0016371253877878189, 0.00076441519195213914, 0.00059226143639534712, 0.00063825747929513454, 0.00096832955023273826, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -52,-15,-40,11,-1,-26,3,4,-113,127,-40,109,111,3,72,-17,-6,-37,7,-1,-12,-7,-18,-33,18,-90,14,66,-10,10,17,-34,-2,-72,104,16,-6,-8,-7,-20,111,-2,46,-26,-34,19,-15,-21, 
  /* [1][0][][] */ -4,33,127,2,-9,-29,-3,-81,29,2,18,8,-22,4,-5,-122,7,-60,15,1,-29,30,26,-37,-22,-8,19,4,13,-9,9,-6,-5,10,14,9,-13,-39,64,-56,12,42,-10,22,-16,10,23,-3, 
  /* [2][0][][] */ 5,-51,17,-42,37,29,-5,-31,7,-2,-2,14,-10,62,7,-3,-36,127,-28,-34,-15,24,-38,-11,126,2,-1,-7,-32,-6,6,-39,-7,-14,1,11,-10,-1,-15,4,14,-18,-18,2,3,26,-24,-41, 
  /* [3][0][][] */ -1,-85,-2,7,1,-6,-12,-3,-9,-10,16,20,9,-11,47,2,-11,-21,7,21,-7,20,-22,3,3,55,2,8,-5,3,127,-2,11,9,-3,-2,-22,-15,-8,14,-6,7,-12,28,-7,0,-1,32, 
  /* [4][0][][] */ -102,6,1,4,4,-34,6,5,45,-43,24,-22,-31,3,-11,-10,7,5,-4,25,12,-26,16,0,-2,47,5,111,1,2,-5,-28,3,-127,-32,12,1,-4,2,-3,-55,-6,-11,20,-61,4,9,7, 
  /* [5][0][][] */ -26,24,21,10,-44,9,2,45,19,8,18,9,-5,-40,9,37,1,-81,15,-1,43,-44,7,44,15,8,-78,-40,-45,-33,21,-3,-4,-70,4,-66,67,15,-42,9,24,-45,6,9,127,-12,-39,-7, 
  /* [6][0][][] */ -26,-24,-14,-4,38,-25,2,-27,-6,-10,37,-22,-12,40,-4,-60,-1,1,-3,-23,-34,53,-6,-79,2,-13,-59,-70,25,45,-17,6,4,-58,-18,71,-71,-48,8,-57,-13,7,16,42,127,-30,42,11, 
  /* [7][0][][] */ 13,32,-75,28,-25,15,3,59,-7,-3,63,-31,9,-30,-10,0,-20,-127,41,-41,58,39,16,-57,19,-21,24,2,-19,28,-13,3,3,37,-3,-25,-8,-55,-40,-64,-12,-26,39,61,-30,-18,-6,2, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020640483126044273, 0.031891688704490662, 0.061745133250951767, 0.069577828049659729, 0.032487645745277405, 0.025171110406517982, 0.027125941589474678, 0.041154004633426666, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52281, -419, 8815, 192, 5720, -5833, 1639, 22707, 968, 26491, -2150, 19441, -6192, -867, 25748, 3581, 406, 16850, 33163, 11627, -174, -444, 418, 12800, -8161, 22977, 45700, 35611, 3692, 758, -788, 1180, 1114, 17628, -6844, 13034, -10906, 22912, -22647, 113035, 22257, 22037, 10815, -1639, 16356, 3516, 1449, 97, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034392718225717545, 0.0003431999939493835, 0.00018601807823870331, 0.00034609940485097468, 0.00014059981913305819, 0.00010024907533079386, 0.00067266554106026888, 0.00015159555186983198, 0.00014364394883159548, 0.00018184857617598027, 9.2813002993352711e-05, 0.00022098400222603232, 0.00030574534321203828, 0.00024654704611748457, 9.7574855317361653e-05, 0.00043280769023112953, 0.00019130897999275476, 0.0002375376207055524, 7.4140683864243329e-05, 0.00017129084153566509, 0.00025077065220102668, 0.00021423641010187566, 0.00019350832735653967, 0.00016780213627498597, 0.00015826561138965189, 0.00016194376803468913, 0.0006709354929625988, 9.4832044851500541e-05, 0.00018514847033657134, 0.0010643262648954988, 9.0399487817194313e-05, 0.00016720480925869197, 0.00078023271635174751, 0.0001628702157177031, 0.00020223396131768823, 0.00018857409304473549, 0.00038251737714745104, 0.00011485732829896733, 0.00028328405460342765, 2.1783791453344747e-05, 0.00014540670963469893, 6.5314954554196447e-05, 0.00015077300486154854, 0.00015308857837226242, 0.00014671387907583266, 0.00011593280942179263, 0.0002073137293336913, 0.00012987133231945336, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,4,81,0,28,16,8,9,8,-8,-9,-45,8,-2,8,-24,-114,-6,-22,127,-10,-2,6,-5,8,-5,4,15,99,20,28,38,-28,1,35,-1,2,17,-68,-8,-8,17,3,-7,-10, 127,10,15,-127,28,87,11,11,124,127,7,43,-51,-24,5,8,127,-56,-61,-56,-100,25,-110,14,17,70,-32,-84,23,21,9,-124,5,-61,127,10,-40,-46,-6,116,-79,-98,-30,3,-34,-8,-127,23, -32,-3,7,14,-1,65,5,17,28,8,-14,32,-15,-3,15,4,-103,29,-3,77,-31,-11,-18,-7,-4,-59,-3,29,-17,5,4,-22,8,-23,16,-19,0,48,42,-13,50,39,-15,11,-43,3,-2,-6, 
  /* [0][1][][] */ 125,7,1,-98,14,-27,36,-16,9,9,-12,53,-7,-1,18,-33,0,-50,-61,-86,10,-72,-125,-18,5,98,-14,-127,-9,32,11,-108,17,-53,-2,127,-3,59,-41,40,-62,-127,39,-88,-45,-14,-12,-5, 26,-127,-127,114,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-29,-41,127,-127,127,127,127,-81,127,127,127,-122,101,107, 54,6,48,-14,5,-61,45,18,-24,14,-105,-8,0,-40,127,4,63,-65,-72,85,14,-45,11,-33,2,6,-38,68,19,40,1,3,33,-44,9,67,-5,64,69,-10,-81,9,-84,-31,27,-16,-11,5, 
  /* [0][2][][] */ -54,-6,25,-17,7,34,-37,22,8,-24,12,33,6,-6,-39,18,4,22,-14,105,6,-31,-16,-12,-3,22,0,51,-10,3,47,-32,-18,-43,-32,-39,-1,31,9,-23,9,-5,42,-37,-36,18,-11,18, 68,126,75,21,16,-20,124,35,19,-3,43,26,-5,-1,-91,25,-58,-56,-37,122,-37,49,12,19,32,-63,-40,30,76,0,127,22,85,-26,8,-36,-25,-17,-13,119,-27,-13,-41,45,20,-32,7,-127, -42,-3,6,-4,5,-5,-61,8,-18,-10,-40,-40,20,-9,-10,11,33,24,-9,-127,24,-9,4,-9,-6,10,-10,-55,-15,8,6,8,-20,87,-37,-23,-4,36,25,-61,4,8,-38,7,-44,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014616904780268669, 0.014585999771952629, 0.0079057682305574417, 0.014709223993122578, 0.0059754922986030579, 0.004260585643351078, 0.02858828566968441, 0.0064428108744323254, 0.0061048674397170544, 0.00772856455296278, 0.0039445525035262108, 0.0093918200582265854, 0.012994176708161831, 0.010478249751031399, 0.0041469312272965908, 0.018394326791167259, 0.0081306314095854759, 0.010095348581671715, 0.0031509790569543839, 0.0072798607870936394, 0.010657752864062786, 0.0091050472110509872, 0.0082241035997867584, 0.0071315905079245567, 0.0067262882366776466, 0.0068826102651655674, 0.028514757752418518, 0.0040303617715835571, 0.0078688096255064011, 0.045233864337205887, 0.0038419782649725676, 0.007106204517185688, 0.033159889280796051, 0.006921983789652586, 0.0085949432104825974, 0.0080143986269831657, 0.016256988048553467, 0.0048814364708960056, 0.01203957200050354, 0.00092581112403422594, 0.0061797848902642727, 0.0027758853975683451, 0.0064078522846102715, 0.0065062646754086018, 0.0062353396788239479, 0.0049271443858742714, 0.0088108330965042114, 0.0055195316672325134, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 113471, 14097, 10597, 14401, 2799, 20860, -3204, -527, 1497, 3691, 5652, 535, 3164, -1599, 1367, -3868, 7403, 17800, -496, 61310, 6908, 5444, 13742, -956, 6558, 9060, 49356, 20256, -109, -4655, 321, 4355, -3717, 19729, 5653, 14066, 12112, 7454, 45990, 4009, -1620, 5091, 2056, 6755, 9520, 3988, -2588, 5017, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 3.8057529309298843e-05, 0.00016156354104168713, 0.00014735007425770164, 0.00022294570226222277, 0.00080405478365719318, 0.0002411540481261909, 0.00060327030951157212, 0.00057322456268593669, 0.00037090200930833817, 0.00036575706326402724, 0.00039885350270196795, 0.00026982460985891521, 0.00031216803472489119, 0.0002894117496907711, 0.00031737986137159169, 0.00093821861082687974, 0.00022181034728419036, 0.00023824592062737793, 0.0010266905883327127, 4.4397616875357926e-05, 0.00017700959870126098, 0.0001784719352144748, 0.00028992464649491012, 0.00053478474728763103, 0.00018499937141314149, 0.00012907381460536271, 8.1808684626594186e-05, 0.00018115709826815873, 0.00050176930380985141, 0.00056068110279738903, 0.00028201870736666024, 0.0001895787863759324, 0.00053726136684417725, 0.00011152820661664009, 0.000187791942153126, 0.00013120808580424637, 0.00030304011306725442, 0.00017870825831778347, 5.1142909796908498e-05, 0.0011311009293422103, 0.00036799930967390537, 0.00054052891209721565, 0.00023793021682649851, 0.00022019428433850408, 0.0001266016042791307, 0.00027582285110838711, 0.00044742156751453876, 0.00052909896476194263, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 75,22,-4,-8,127,28,-52,-20, 
  /* [1][0][][] */ -5,0,5,127,7,-6,5,15, 
  /* [2][0][][] */ 27,-127,-15,43,-7,-66,79,11, 
  /* [3][0][][] */ 127,-33,-8,16,-7,-30,30,4, 
  /* [4][0][][] */ 9,-48,127,-9,-6,-43,9,-92, 
  /* [5][0][][] */ 63,3,2,-3,127,8,-12,1, 
  /* [6][0][][] */ -12,85,-13,127,26,51,-63,-51, 
  /* [7][0][][] */ -3,127,-5,1,3,-14,13,-4, 
  /* [8][0][][] */ 127,49,-7,9,-55,-26,2,-31, 
  /* [9][0][][] */ -127,12,9,15,47,13,-12,2, 
  /* [10][0][][] */ -69,-9,12,127,36,22,-17,2, 
  /* [11][0][][] */ -127,5,10,-60,29,8,-22,-50, 
  /* [12][0][][] */ 127,30,1,16,-47,-10,6,-49, 
  /* [13][0][][] */ -15,85,-127,-14,0,100,-76,78, 
  /* [14][0][][] */ -62,-36,-9,127,22,7,-14,-19, 
  /* [15][0][][] */ -5,127,2,-3,0,-15,8,-50, 
  /* [16][0][][] */ -14,-127,-17,5,-10,-103,113,-31, 
  /* [17][0][][] */ 14,127,5,-10,2,72,-86,-19, 
  /* [18][0][][] */ -4,47,-127,-2,11,57,-31,59, 
  /* [19][0][][] */ -71,21,-1,-1,-127,-4,20,29, 
  /* [20][0][][] */ -127,-21,-6,-1,72,-28,40,0, 
  /* [21][0][][] */ -58,-7,-3,0,-127,0,18,2, 
  /* [22][0][][] */ -127,-23,-2,-1,95,-15,39,48, 
  /* [23][0][][] */ -19,-20,-7,-8,1,81,-127,-91, 
  /* [24][0][][] */ -9,43,-127,0,8,45,-17,76, 
  /* [25][0][][] */ 101,-34,-3,127,-65,-20,6,-49, 
  /* [26][0][][] */ 3,-20,-7,0,-5,123,127,-26, 
  /* [27][0][][] */ 64,-6,0,10,127,28,31,-20, 
  /* [28][0][][] */ -2,127,-65,0,8,77,-30,116, 
  /* [29][0][][] */ -5,9,-3,-6,0,95,-127,-85, 
  /* [30][0][][] */ 0,-4,3,-127,-10,-2,-5,-16, 
  /* [31][0][][] */ -58,8,-3,4,-127,5,10,-2, 
  /* [32][0][][] */ -11,32,12,-127,-5,32,-87,-101, 
  /* [33][0][][] */ -63,-5,-7,-1,-127,45,49,-4, 
  /* [34][0][][] */ -127,74,11,26,34,-20,1,1, 
  /* [35][0][][] */ -11,127,-8,-4,8,-90,68,-31, 
  /* [36][0][][] */ 1,44,4,-27,3,98,-127,-26, 
  /* [37][0][][] */ 41,-67,-11,24,30,-127,121,-20, 
  /* [38][0][][] */ 17,-127,12,7,11,57,-59,58, 
  /* [39][0][][] */ 5,-127,-17,-8,1,-6,-49,-92, 
  /* [40][0][][] */ 123,45,4,-7,-50,84,-127,-107, 
  /* [41][0][][] */ 12,-114,12,-1,1,77,-49,127, 
  /* [42][0][][] */ 59,-12,-1,-127,-55,4,6,-35, 
  /* [43][0][][] */ -95,-31,13,-127,55,5,-17,-6, 
  /* [44][0][][] */ -7,-30,3,21,-36,110,127,-16, 
  /* [45][0][][] */ -127,-39,1,0,14,14,23,-18, 
  /* [46][0][][] */ 21,78,127,6,1,16,19,28, 
  /* [47][0][][] */ 1,6,8,127,14,4,1,-2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0001742993772495538, 0.00073994358535856009, 0.00067484739702194929, 0.0010210672626271844, 0.0036824841517955065, 0.0011044595157727599, 0.0027629127725958824, 0.0026253066025674343, 0.0016986911650747061, 0.0016751277726143599, 0.0018267059931531549, 0.0012357676168903708, 0.0014296958688646555, 0.0013254745863378048, 0.0014535654336214066, 0.0042969398200511932, 0.0010158674558624625, 0.0010911405552178621, 0.0047021317295730114, 0.00020333628344815224, 0.00081068486906588078, 0.00081738218432292342, 0.0013278234982863069, 0.0024492563679814339, 0.00084727711509913206, 0.00059114414034411311, 0.00037467494257725775, 0.00082967994967475533, 0.0022980491630733013, 0.0025678589008748531, 0.0012916151899844408, 0.00086825038306415081, 0.0024605989456176758, 0.00051078712567687035, 0.00086006679339334369, 0.00060091883642598987, 0.0013878910103812814, 0.00081846449756994843, 0.00023422899539582431, 0.0051803202368319035, 0.0016853971173986793, 0.0024755639024078846, 0.0010896946769207716, 0.0010084660025313497, 0.00057982164435088634, 0.0012632388388738036, 0.0020491424947977066, 0.0024232161231338978, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5223, -25272, 25402, 22408, 4538, 751, 35927, 9230, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013261252315714955, 0.00072322820778936148, 0.0012268237769603729, 0.0012303023831918836, 0.0011725301155820489, 0.0012221768265590072, 0.00089573097648099065, 0.00080259382957592607, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,1,8,-92,11,26,6,7,3,6,3,-6,95,0,1,7,0,-10,-5,1,76,-5,1,2,29,37,13,10,4,3,5,-127,11,7,-1,-1,-29,0,-14,31,6,-27,-7,4,2,-3,4,2, 
  /* [1][0][][] */ -34,-5,-5,-4,44,23,-28,76,19,8,-30,-25,9,0,20,35,0,41,15,-46,-2,21,127,19,-30,-3,55,4,19,-4,15,-15,13,-8,-9,-19,5,-57,8,3,-10,-5,-77,-7,-30,8,-47,-96, 
  /* [2][0][][] */ -62,15,1,10,47,-9,32,26,-8,53,7,-4,4,0,7,56,0,13,-127,24,2,16,4,-14,-32,5,36,6,6,32,24,6,7,-7,-11,-11,12,4,4,0,38,-9,-29,0,25,-59,26,14, 
  /* [3][0][][] */ 1,1,1,8,-4,28,2,-2,65,18,-3,-4,26,0,-31,-8,0,0,-8,2,-2,0,5,-17,-12,-5,-10,-2,-9,-3,1,-7,-49,44,-56,-3,6,0,3,-127,0,2,1,-50,-2,-1,-1,8, 
  /* [4][0][][] */ -1,-5,78,33,4,-21,0,-3,5,-4,-3,-10,-79,0,-10,5,0,7,7,1,68,5,0,-4,-13,28,-6,45,-6,0,1,98,3,6,0,-4,15,-12,-13,-18,-2,-127,4,1,-2,-3,0,2, 
  /* [5][0][][] */ -9,42,6,-7,4,48,24,14,-18,29,6,57,26,0,-127,0,0,15,-36,22,-9,12,-14,43,-21,-1,26,-2,-12,22,23,-16,49,28,-37,-4,3,21,-45,18,27,-15,-12,28,22,61,23,21, 
  /* [6][0][][] */ -21,-53,2,7,38,-46,-21,8,27,-24,-11,87,-3,0,-127,39,0,-10,49,-19,-5,2,26,-33,32,-2,-2,-12,47,-12,-11,-3,92,-29,25,-1,-2,-7,-68,-21,-13,-14,-3,-27,-20,-81,-18,-25, 
  /* [7][0][][] */ -113,-24,-12,8,127,17,63,26,14,3,27,-32,-25,0,84,102,0,10,4,60,-12,-4,-26,43,18,6,48,5,53,60,57,-7,-10,-17,-20,-23,6,23,27,34,70,4,-26,-10,58,1,62,78, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.056360319256782532, 0.030737198889255524, 0.0521400086581707, 0.05228785052895546, 0.049832526594400406, 0.051942512392997742, 0.038068566471338272, 0.034110236912965775, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 75019, 62021, 61499, 43287, -194, 13954, 2664, 25965, 22999, 26329, 28633, -2981, -46469, -127, 40991, 323, -204, 37479, 3543, 1701, -15683, 5080, 49161, 39282, -25550, 36323, 42029, 21799, -2629, 14889, -7617, -50804, 11958, 115847, 27202, 1894, 58829, -280, 155153, -23463, 15374, -27192, 3357, 113505, -1250, 72353, 1406, -22688, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.9721772635821253e-05, 6.3235173001885414e-05, 0.00015005773457232863, 0.00011008336878148839, 0.00019582062668632716, 0.00017994550580624491, 0.00013513413432519883, 6.7072956881020218e-05, 9.7721160273067653e-05, 3.1184375984594226e-05, 7.4913943535648286e-05, 2.6622974473866634e-05, 0.00017446908168494701, 0.005541567225009203, 6.2660350522492081e-05, 0.0002217818982899189, 0.0027484172023832798, 1.8623277355800383e-05, 7.4783180025406182e-05, 0.00017954492068383843, 0.00011064727004850283, 0.00012709405564237386, 0.00011829122377093881, 3.5079574445262551e-05, 0.00010759064753074199, 7.9184217611327767e-05, 3.2256302802124992e-05, 4.4583131966646761e-05, 0.00026910164160653949, 5.3861469496041536e-05, 4.8416644858662039e-05, 0.00019748143677134067, 0.00020623202726710588, 8.1160724221263081e-06, 9.1838286607526243e-05, 0.00017389724962413311, 1.5808527678018436e-05, 0.00043445458868518472, 3.070025923079811e-05, 8.3864775660913438e-05, 6.6131186031270772e-05, 0.00018625320808496326, 9.5440525910817087e-05, 8.5645951912738383e-06, 0.00016764439351391047, 8.3072198322042823e-05, 0.00020747348025906831, 0.00010864419164136052, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-7,-17,7,-39,-79,-68,-27,-49,9,67,34,-71,115,-43,-113,-84,37,-6,-1,-71,-111,-79,-35,-125,-64,-20,71,15,94,26,-127,-89,-8,54,19,48,-127,78,-77,-14,104,-109,-3,-35,-87,107, 75,12,-28,-29,57,-127,-127,-81,60,-76,-116,110,37,-82,-1,62,-52,-114,59,7,11,-112,-127,-70,-4,-127,-120,-39,-54,21,-56,54,29,-127,65,85,14,72,-92,127,-127,6,124,-127,1,-23,-127,94, -32,44,7,-5,-64,-108,-58,-17,87,-7,-127,39,8,-71,-100,-11,-127,-24,27,12,-15,-75,-36,-23,-11,-29,-58,-12,-9,17,-24,9,107,-87,71,31,15,36,-4,16,-79,3,7,-78,-17,6,-56,14, 
  /* [0][1][][] */ -85,-127,-44,-44,-10,55,99,-105,-27,-107,-21,112,90,-64,28,-97,-121,-94,89,-76,41,-89,-102,-127,42,-118,-78,-37,127,-60,127,84,-43,-85,-15,84,-35,-76,-107,90,42,60,104,-108,-91,-118,81,119, 127,-83,-127,-127,127,40,94,-127,102,-127,-112,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-119,127,-98,-127,-127,-119,-127,-70,127,28,-111,127,127,-67,-127,-97,90,61,127,127,-118,-113,-127,124,127, -53,32,-61,-84,-119,-23,31,-37,127,-19,-77,35,56,-70,-25,-43,-37,-30,54,-71,56,-82,-38,-23,48,-4,-45,-59,15,-89,-35,20,29,-98,117,23,-36,-62,1,-15,37,54,10,-74,-58,-37,64,35, 
  /* [0][2][][] */ -61,-108,-33,-34,0,34,-5,-35,-39,-59,-16,60,76,-127,-127,-63,-43,-19,64,75,51,-33,-12,-60,33,-55,-10,-58,76,28,77,62,108,-26,-39,-10,-95,35,-18,31,9,38,15,-56,96,-78,3,31, 87,-74,-88,-85,82,18,7,-47,48,-71,-32,56,82,-26,16,92,-24,-31,77,117,82,-54,-18,-57,94,-67,-18,-100,-50,39,-45,111,-18,-48,67,6,-127,50,-15,-1,11,32,16,-66,127,-100,-12,41, -28,30,-41,-36,-79,-19,22,-12,59,-4,-14,33,30,-43,112,-28,-93,-5,30,59,74,-29,-1,-3,43,3,-3,-63,-13,28,-20,40,-90,-43,65,3,-20,21,27,-38,7,36,-5,-15,62,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033881752751767635, 0.0026874947361648083, 0.0063774534501135349, 0.0046785431914031506, 0.0083223767578601837, 0.0076476838439702988, 0.0057432008907198906, 0.0028506005182862282, 0.004153149202466011, 0.0013253359356895089, 0.0031838426366448402, 0.0011314763687551022, 0.0074149360880255699, 0.23551659286022186, 0.002663064980879426, 0.0094257304444909096, 0.1168077290058136, 0.00079148926306515932, 0.0031782849691808224, 0.0076306592673063278, 0.0047025089152157307, 0.0054014972411096096, 0.0050273770466446877, 0.0014908818993717432, 0.004572602454572916, 0.0033653292339295149, 0.0013708928599953651, 0.0018947829958051443, 0.011436819098889828, 0.0022891124244779348, 0.0020577074028551579, 0.0083929607644677162, 0.0087648611515760422, 0.00034493306884542108, 0.0039031270425766706, 0.0073906327597796917, 0.00067186239175498486, 0.018464319407939911, 0.0013047610409557819, 0.0035642529837787151, 0.0028105753008276224, 0.0079157613217830658, 0.0040562222711741924, 0.00036399529199115932, 0.0071248868480324745, 0.0035305682104080915, 0.0088176224380731583, 0.0046173781156539917, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 5793, 98, 12801, 8153, 7964, 8596, 12282, -41, 74, -480, 2897, 609, 16445, -107308984, 3936, 23099, -86625376, -143, -739, 12520, 5691, -21, -2, 614, 4834, -1085, 78, 1019, 5495, 2274, 3571, 19244, 5000, 370, 316, -2224, 405, 4438, -205, 14940, 2863, 16313, -364, -102, 17755, 274, 9840, 5855, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00036263139918446541, 0.00038323199260048568, 0.00024599320022389293, 0.00023145950399339199, 0.00024953234242275357, 0.00024025289167184383, 0.00031014694832265377, 0.0012397303944453597, 0.00033615267602726817, 0.0016180756501853466, 0.00050685083260759711, 0.0014080419205129147, 0.00013412759290076792, 1.5113708062841624e-09, 0.00066647061612457037, 0.00014266367361415178, 1.5113708062841624e-09, 0.0050379624590277672, 0.00028956402093172073, 0.00030926635372452438, 0.00019140697258990258, 0.003488896181806922, 0.00026204492314718664, 0.0010584434494376183, 0.00078676146222278476, 0.00049820676213130355, 0.0017974181100726128, 0.001211893861182034, 0.00020729725656565279, 0.0012949421070516109, 0.00082539068534970284, 0.00012184349907329306, 0.00015038451238069683, 0.0087657980620861053, 0.00041238416451960802, 0.0005409540026448667, 0.0038107703439891338, 0.00028477702289819717, 0.0018905356992036104, 0.0002320258499821648, 0.00099247321486473083, 0.00013581535313278437, 0.00044235491077415645, 0.0080732116475701332, 0.00028319141711108387, 0.00036318099591881037, 0.00028405431658029556, 0.00015173276187852025, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 19,-127,52,-49,28,-19,-53,25, 
  /* [1][0][][] */ 73,63,-18,-94,7,-9,-74,127, 
  /* [2][0][][] */ 26,3,-48,120,52,127,51,90, 
  /* [3][0][][] */ 74,72,-81,127,-91,-8,-10,12, 
  /* [4][0][][] */ -37,-98,75,13,10,32,-41,-127, 
  /* [5][0][][] */ 18,6,-34,42,3,-31,38,127, 
  /* [6][0][][] */ 60,-17,-127,-91,112,13,54,-31, 
  /* [7][0][][] */ 127,15,18,-22,27,-7,82,-55, 
  /* [8][0][][] */ 24,-98,16,107,3,26,-14,-127, 
  /* [9][0][][] */ 108,-127,16,0,-18,18,-116,91, 
  /* [10][0][][] */ -127,-38,-114,22,-6,9,-98,54, 
  /* [11][0][][] */ -21,-46,-8,-106,-127,-38,43,-18, 
  /* [12][0][][] */ 12,4,-42,69,-77,-24,59,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -6,-31,-6,9,40,127,45,40, 
  /* [15][0][][] */ 40,2,20,-127,65,38,-56,71, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 16,24,127,21,-29,-8,30,28, 
  /* [18][0][][] */ 90,-127,26,36,-6,22,-115,6, 
  /* [19][0][][] */ -127,-13,33,76,-59,-55,-98,75, 
  /* [20][0][][] */ 37,35,-42,124,-19,-127,-6,65, 
  /* [21][0][][] */ 60,22,127,9,-16,-9,68,16, 
  /* [22][0][][] */ -72,-20,-127,-1,1,8,-97,8, 
  /* [23][0][][] */ -98,127,-16,-17,11,-10,124,-79, 
  /* [24][0][][] */ 6,-53,-48,83,-11,-57,97,127, 
  /* [25][0][][] */ 10,42,31,26,125,127,-74,-50, 
  /* [26][0][][] */ -81,-28,-127,-1,4,14,-88,-1, 
  /* [27][0][][] */ -2,-32,-37,2,-48,127,72,49, 
  /* [28][0][][] */ 2,-13,-17,37,23,127,48,56, 
  /* [29][0][][] */ 87,32,127,0,-21,-11,87,-11, 
  /* [30][0][][] */ -83,127,-26,-30,7,-7,104,-49, 
  /* [31][0][][] */ -42,-96,-21,3,32,-69,127,110, 
  /* [32][0][][] */ 7,6,-50,117,-18,104,92,127, 
  /* [33][0][][] */ 2,61,-8,-103,11,-7,-7,127, 
  /* [34][0][][] */ -25,88,-4,-95,29,-9,20,127, 
  /* [35][0][][] */ 127,4,-18,-38,22,28,103,-37, 
  /* [36][0][][] */ -127,-7,30,61,-40,18,-119,84, 
  /* [37][0][][] */ -9,-17,-7,23,32,127,43,45, 
  /* [38][0][][] */ 13,18,5,82,127,-5,-19,36, 
  /* [39][0][][] */ 5,26,37,-127,24,3,-40,122, 
  /* [40][0][][] */ 91,30,127,4,-11,-7,89,-9, 
  /* [41][0][][] */ -1,-28,-29,78,49,127,74,100, 
  /* [42][0][][] */ -73,-5,127,22,-35,11,-29,60, 
  /* [43][0][][] */ -12,-51,10,96,-16,7,15,-127, 
  /* [44][0][][] */ 37,2,-64,-127,72,-36,-10,-115, 
  /* [45][0][][] */ -84,127,4,-48,10,4,78,-56, 
  /* [46][0][][] */ -127,-22,41,24,-26,33,-87,41, 
  /* [47][0][][] */ 110,20,120,2,26,-25,127,-14, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00094462773995473981, 0.00099829072132706642, 0.0006407939363270998, 0.00060293474234640598, 0.00065001315670087934, 0.00062584085389971733, 0.00080790964420884848, 0.003229405265301466, 0.00087565265130251646, 0.0042149662040174007, 0.0013203085400164127, 0.0036678439937531948, 0.00034939238685183227, 3.937008052901092e-09, 0.0017361062346026301, 0.00037162820808589458, 3.937008052901092e-09, 0.013123515993356705, 0.0007542926468886435, 0.00080561579670757055, 0.00049860088620334864, 0.0090883141383528709, 0.00068260746775195003, 0.0027571662794798613, 0.0020494549535214901, 0.0012977913720533252, 0.0046821399591863155, 0.0031568929553031921, 0.00053999386727809906, 0.0033732275478541851, 0.0021500810980796814, 0.00031739322002977133, 0.00039174043922685087, 0.022834250703454018, 0.0010742299491539598, 0.001409144839271903, 0.0099267726764082909, 0.00074182287789881229, 0.0049247043207287788, 0.00060441001551225781, 0.0025853186380118132, 0.00035378886968828738, 0.001152301556430757, 0.021030113101005554, 0.00073769252048805356, 0.00094605935737490654, 0.00073994032572954893, 0.00039525251486338675, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -630, -42207, -8188, -13330, -31951, -1865, -23887, -27333, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0020887849386781454, 0.0023516258224844933, 0.0024654238950461149, 0.0012740876991301775, 0.0011189120123162866, 0.0023763293866068125, 0.0018230786081403494, 0.0011575566604733467, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-24,4,0,127,1,-2,-1,0,-126,-92,-2,0,120,-4,0, 
  /* [1][0][][] */ 0,-30,-1,82,71,13,23,8,-1,-6,127,-43,0,29,-12,0, 
  /* [2][0][][] */ 0,0,-1,-11,-58,4,12,3,0,3,-17,1,0,127,-8,0, 
  /* [3][0][][] */ 0,-11,-19,-127,80,23,70,18,-1,62,-1,39,0,-1,21,0, 
  /* [4][0][][] */ 0,52,-27,37,-55,29,127,8,2,-61,16,-9,0,-6,18,0, 
  /* [5][0][][] */ 0,-17,-9,1,-24,-25,-14,16,0,9,-3,-45,0,-5,127,0, 
  /* [6][0][][] */ 0,18,-1,0,49,-21,-26,-11,1,-108,115,60,0,127,60,0, 
  /* [7][0][][] */ 0,13,-13,127,6,-3,15,10,-1,69,-50,75,0,-8,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.088773354887962341, 0.099944092333316803, 0.10478051751852036, 0.054148726165294647, 0.047553759068250656, 0.10099399834871292, 0.07748083770275116, 0.049196157604455948, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 15074, 24876, 7605, 8612, 54281, 13688, 35353, -5587, 4668, 27757, 15012, -445, 25275, 10026, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00017252594989258796, 0.00016128843708429486, 0.00046018327702768147, 0.00019375364354345948, 6.114551069913432e-05, 0.00038423491059802473, 0.00011023588012903929, 2.6064242774737068e-05, 0.00037318796967156231, 0.00022712466306984425, 0.0008145614992827177, 0.00072724185883998871, 0.00027079743449576199, 0.00020583761215675622, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,5,127,-25, 24,-24,91,-2,-72,67,-95,78,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,15,-29,14,-28,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,34,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-40,52,-77,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0073323524557054043, 0.0068547585979104042, 0.019557788968086243, 0.0082345297560095787, 0.0025986842811107635, 0.016329983249306679, 0.004685024730861187, 0.0011077303206548095, 0.015860488638281822, 0.0096527980640530586, 0.034618861973285675, 0.030907778069376945, 0.011508890427649021, 0.0087480982765555382, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 28763, -119895, 10658, 326195, 41725, 80810, 16740, -243561, 32506, 20790, 829143, -1073741824, 44810, 81495, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00014602311421185732, 0.00015769503079354763, 2.9837101465091109e-05, 8.7849075498525053e-06, 0.00014004945114720613, 5.5809257901273668e-05, 0.00022859587625134736, 3.1583526833856013e-06, 3.8910915463929996e-05, 0.0001365061616525054, 7.1539302552992012e-06, 1.1533876076441629e-09, 8.8325679826084524e-05, 4.3885203922400251e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 41,-4,31, -9,-21,17, -127,-115,-62, 
  /* [1][1][][] */ -2,-5,1, -25,4,-2, -3,-28,8, 
  /* [1][2][][] */ -9,16,1, -9,7,0, 34,-18,15, 
  /* [2][0][][] */ 26,-6,-5, 75,114,2, 41,-35,9, 
  /* [2][1][][] */ 7,13,0, 70,127,-26, 20,-2,-5, 
  /* [2][2][][] */ 46,-64,21, 73,-41,-19, 32,-51,16, 
  /* [3][0][][] */ 5,34,3, 31,94,21, 3,8,-2, 
  /* [3][1][][] */ 19,37,6, 66,127,27, -9,-16,6, 
  /* [3][2][][] */ 3,3,3, 25,27,10, 2,0,6, 
  /* [4][0][][] */ 45,80,-8, 22,89,-10, -9,11,-4, 
  /* [4][1][][] */ 50,99,49, 35,127,30, 30,50,-18, 
  /* [4][2][][] */ 53,75,31, 41,114,10, -29,16,15, 
  /* [5][0][][] */ 6,-1,-115, -6,-1,-99, -10,26,-27, 
  /* [5][1][][] */ 1,-46,-127, -5,-48,-114, -6,11,-24, 
  /* [5][2][][] */ -8,4,-19, -3,-6,-13, -4,10,-13, 
  /* [6][0][][] */ 26,-63,33, 49,-87,39, 11,-21,7, 
  /* [6][1][][] */ 38,-96,60, 66,-127,70, 10,-29,15, 
  /* [6][2][][] */ 23,-34,12, 17,-43,24, -9,7,-2, 
  /* [7][0][][] */ -29,19,1, -106,-36,-2, -24,23,-1, 
  /* [7][1][][] */ -15,-5,-2, -127,-88,-10, -7,-4,1, 
  /* [7][2][][] */ -19,32,-12, -10,13,-4, -19,25,-6, 
  /* [8][0][][] */ 106,86,116, 103,85,116, 83,64,104, 
  /* [8][1][][] */ 105,86,111, 94,84,111, 67,66,101, 
  /* [8][2][][] */ 107,127,119, 105,126,120, 90,107,110, 
  /* [9][0][][] */ -23,-2,5, -16,-5,-4, 3,7,-12, 
  /* [9][1][][] */ 101,114,-10, 77,127,16, -5,18,26, 
  /* [9][2][][] */ -24,-27,16, 6,-33,0, 14,1,-22, 
  /* [10][0][][] */ -25,-82,-18, 34,95,20, -9,-12,-2, 
  /* [10][1][][] */ -59,-102,-13, 78,127,15, -17,-26,0, 
  /* [10][2][][] */ -32,-19,3, 36,23,-10, -9,0,8, 
  /* [11][0][][] */ -13,-25,1, 10,-42,7, 9,-101,-53, 
  /* [11][1][][] */ -46,-42,-18, -35,-63,-36, -15,-60,-54, 
  /* [11][2][][] */ -8,-39,-79, 118,127,64, -39,13,-47, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-18, -62,-112,-25, -9,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 7,15,11, 
  /* [13][2][][] */ -9,-20,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 44,-7,-39, 78,-27,-52, 31,-10,-22, 
  /* [14][1][][] */ 88,-18,-76, 127,-41,-91, 58,-19,-39, 
  /* [14][2][][] */ 53,-11,-49, 73,-23,-56, 24,-7,-21, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 7.5394683562990394e-07, 0.084027901291847229, 0.090744413435459137, 0.017169535160064697, 0.0050552086904644966, 0.080590404570102692, 0.032115016132593155, 0.13154377043247223, 0.0018174502765759826, 0.022390993312001228, 0.078551441431045532, 0.0041166753508150578, 6.6370819240546552e-07, 0.050826344639062881, 0.025253409519791603, 7.1549060010056564e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.38388815522193909, } };
const TfArray<1, int> quant46_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.2183457612991333, } };
const TfArray<1, int> quant50_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.28387773036956787, } };
const TfArray<1, int> quant53_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.31737434864044189, } };
const TfArray<1, int> quant54_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.20057103037834167, } };
const TfArray<1, int> quant58_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.10946010798215866, } };
const TfArray<1, int> quant61_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.2131015807390213, } };
const TfArray<1, int> quant62_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.14919058978557587, } };
const TfArray<1, int> quant65_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.25515899062156677, } };
const TfArray<1, int> quant66_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.037315282970666885, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.06371983140707016, } };
const TfArray<1, int> quant69_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 464, (TfLiteIntArray*)&tensor_dimension69, 450, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 450, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
