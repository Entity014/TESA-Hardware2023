/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.11.2023 05:13:08

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368288;
#else
constexpr int kTensorArenaSize = 367264;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0033525568433105946, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[13] = { 5241, -10167, -11049, -9362, -9676, -10170, -10053, -9160, -4960, -9025, -6702, -8181, -5190, };
const TfArray<1, int> tensor_dimension2 = { 1, { 13 } };
const TfArray<13, float> quant2_scale = { 13, { 0.0011574150994420052, 0.00080130458809435368, 0.00072896253550425172, 0.00082360714441165328, 0.00087365158833563328, 0.00078887352719902992, 0.00076757167698815465, 0.00070642936043441296, 0.0015650659333914518, 0.00088176713325083256, 0.0011509553296491504, 0.0010428685927763581, 0.0016055451706051826, } };
const TfArray<13, int> quant2_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[13*1*1*32] = { 
  /* [0][0][][] */ 47,-57,72,-26,-37,84,-20,-1,-53,-46,3,29,-24,-6,-15,-20,-48,-60,127,-49,6,55,-3,59,20,-51,-45,6,-32,-35,49,-43, 
  /* [1][0][][] */ 42,-31,19,42,-61,60,15,46,71,3,53,-96,116,39,69,-73,24,18,-93,-6,-59,26,-91,-7,18,-91,-127,17,56,-78,81,-2, 
  /* [2][0][][] */ -41,-8,-32,-79,48,113,-48,28,127,81,62,62,-76,-32,57,77,75,64,-111,-87,-38,108,35,-25,30,-3,-89,-41,47,52,-2,32, 
  /* [3][0][][] */ 51,114,18,45,9,-21,19,-16,-48,10,14,-114,-82,-1,-53,-67,-12,-35,-121,-1,74,102,-1,80,56,-9,-16,94,37,127,34,-45, 
  /* [4][0][][] */ -36,-44,11,13,21,-63,-39,-91,-118,1,-50,-51,-15,40,-70,7,58,-54,-127,60,75,2,-25,-48,-12,-73,106,8,27,67,85,-33, 
  /* [5][0][][] */ 55,-44,31,89,107,79,-80,79,-126,50,-36,45,2,43,92,-59,127,17,-119,91,102,-10,-13,-60,-39,54,-7,79,43,-21,-67,-29, 
  /* [6][0][][] */ 83,-13,114,47,-64,-50,78,30,-127,24,110,94,34,42,-93,63,39,-55,-114,-28,-47,-46,10,-14,65,53,104,-22,14,-20,-28,-52, 
  /* [7][0][][] */ -45,-50,-28,-65,-85,-98,-46,-2,61,-29,61,-20,6,33,74,-98,-77,-13,-120,59,120,-27,-50,-4,57,16,74,-60,-37,101,69,-127, 
  /* [8][0][][] */ -38,53,-22,34,1,10,15,52,29,-19,-25,14,-10,-16,5,-34,-27,11,-127,23,-16,25,-41,-27,11,23,38,-20,-13,-22,27,8, 
  /* [9][0][][] */ -66,3,-9,-46,-97,48,-17,96,62,39,-111,61,3,-47,-18,-71,-9,-91,-127,-30,113,-4,-20,58,-42,-68,-49,40,-31,25,-62,-78, 
  /* [10][0][][] */ 4,12,-4,28,49,60,-20,-36,-83,20,-12,50,34,23,-21,31,-2,-15,-127,12,-46,32,-25,-20,-2,-66,107,38,-28,16,12,1, 
  /* [11][0][][] */ 47,21,-36,-41,-1,15,-35,17,-47,67,52,-3,88,-36,14,-127,10,26,-99,-26,80,-21,-22,41,60,-1,-42,-58,20,-12,73,-30, 
  /* [12][0][][] */ -28,62,-41,21,16,-21,-2,-2,-49,-33,-28,-14,55,-24,39,28,26,-16,-127,0,2,19,-5,17,14,23,-2,-27,-40,29,44,0, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 13,1,1,32 } };
const TfArray<13, float> quant3_scale = { 13, { 0.0052836146205663681, 0.0036579656880348921, 0.0033277233596891165, 0.0037597771733999252, 0.0039882306009531021, 0.0036012176424264908, 0.0035039745271205902, 0.0032248590141534805, 0.0071445456705987453, 0.0040252781473100185, 0.0052541256882250309, 0.0047607081942260265, 0.0073293340392410755, } };
const TfArray<13, int> quant3_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -1143, -391, -417, -818, -1001, -467, -963, -213, -204, -1199, 168, -1263, -272, -681, -1169, -811, -680, -1142, 2002, -842, 195, 53, -1161, -1130, -760, -1275, -343, -1204, -1199, 35, -910, -1226, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.1754461310338229e-05, 0.00015849711780901998, 5.7851782912621275e-05, 5.7695389841683209e-05, 5.0058250053552911e-05, 7.2549155447632074e-05, 5.0485090469010174e-05, 0.00016648831660859287, 0.00010072023724205792, 5.1697701564989984e-05, 0.00012225721729919314, 4.9086684157373384e-05, 0.00013020168989896774, 5.8999594330089167e-05, 5.143196540302597e-05, 5.0223428843310103e-05, 0.00011857357458211482, 5.0618320528883487e-05, 0.00018070469377562404, 5.1073315262328833e-05, 0.00017791439313441515, 0.00010534940520301461, 5.0085887778550386e-05, 5.6603854318382218e-05, 4.8397712816949934e-05, 5.1235267164884135e-05, 0.00016135632176883519, 4.9666865379549563e-05, 5.1663289923453704e-05, 0.00010356467100791633, 5.1476537919370458e-05, 0.00012860917195212096, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -58,-69,59,-19,80,8,-101,-112,56,-62,-118,24,53,-20,-58,16,-74,-54,-47,-29,-86,-114,-25,62,-77,-21,36,-67,63,-30,-46,-96,47,-79,-56,28,-120,-94,-65,-5,34,-99,-109,56,15,-118,62,-43,-13,-33,-25,52,-89,-62,-107,62,42,28,127,-119,-88,96,-70,11,-7,-16,30,50,59,53,43,-125,56,-58,62,42,-117,-17,-78,58,16,-1,49,-33,-78,-63,-99,57,-4,68,-36,-95,28,28,-4,35, 
  /* [1][0][][] */ -15,35,-65,-53,-28,29,-32,-33,-14,-56,-40,7,-10,-51,-24,-2,31,13,-3,65,-19,-42,-6,-34,-1,22,-16,-8,-25,5,9,-14,25,37,-127,21,26,59,-29,-30,6,0,18,-46,-15,-14,21,-15,0,-21,-9,17,-35,26,-24,-72,-46,30,48,5,-50,-19,6,-49,1,-8,-1,5,-24,-11,6,1,-29,20,-20,7,24,-30,-23,14,-42,7,-33,-82,-4,35,-23,-15,3,30,35,-3,-6,25,34,10, 
  /* [2][0][][] */ 45,7,-37,95,20,6,65,53,-39,96,-41,127,23,-19,65,-104,-60,-26,24,28,-100,-12,71,19,-63,29,79,7,-73,17,80,44,-44,-30,-48,-112,-92,51,89,-37,-99,-74,-10,-23,-51,70,-26,-61,66,7,64,-90,-37,28,20,23,-21,45,-99,-15,-10,68,-75,82,33,18,39,45,-50,43,-28,-101,4,-33,3,-3,-75,-44,9,7,25,-107,-15,-50,-10,-102,-26,-59,68,67,-57,-19,-6,-77,-38,-58, 
  /* [3][0][][] */ 68,-8,-20,-19,-91,-14,-97,16,32,-20,30,-47,40,50,40,-18,54,66,-59,28,73,-82,-70,-120,-41,-78,-88,38,-8,-101,47,-16,-25,-30,-62,-21,-102,-16,17,33,-22,-85,-95,-34,57,-3,-22,-76,56,-93,18,-38,57,19,71,-86,-111,-96,-116,-60,-87,-22,-62,50,26,-49,-65,-26,-41,-81,-21,51,-10,-121,10,-69,-7,51,59,-50,-76,-127,-3,41,10,18,-43,-110,-80,16,-3,-111,45,-95,-63,8, 
  /* [4][0][][] */ 35,68,-25,30,-49,-19,4,12,42,90,-29,62,12,-57,-32,-76,-46,-28,-44,-14,70,-99,51,-2,-31,-29,29,-71,-68,4,-78,-68,51,79,35,-102,-65,-26,-57,19,-64,-76,-88,-99,8,68,9,32,0,-37,15,-91,-95,24,-99,-7,65,-90,0,-9,-19,-85,-58,-82,-15,24,-21,-51,-2,-108,-92,-97,-69,-7,63,25,26,-41,-30,-57,-19,-62,-109,-40,-21,37,56,-22,-127,-85,16,12,-1,61,-99,-40, 
  /* [5][0][][] */ 47,-68,38,44,17,-48,8,21,68,-68,-14,-18,15,61,11,11,25,19,-65,36,18,20,2,-13,-127,-61,-21,-50,29,16,-11,-87,-45,-23,-101,-9,-69,-38,32,-5,-62,-40,7,47,-33,-3,7,-37,-84,72,28,11,13,-19,11,-41,68,33,-60,-37,19,-17,2,-87,-22,48,-21,-8,4,-5,74,-32,-40,29,2,-62,-14,-31,-3,26,51,17,12,39,-65,32,-11,3,40,-72,49,26,-11,35,6,-106, 
  /* [6][0][][] */ -8,-63,79,53,-90,-59,-20,35,5,-30,-17,-36,118,33,79,-120,16,-17,52,57,-86,-118,74,30,-73,-93,-22,-33,-25,-127,29,-91,-95,-125,-1,-115,-26,10,-112,46,50,27,0,-36,-118,67,-99,-48,-90,54,20,-78,83,-70,57,-42,-2,-27,-67,76,-90,7,31,-65,-72,34,68,-64,103,-22,-108,-22,25,-81,-96,-54,-93,-105,-67,-44,8,-30,29,-46,-80,-97,-54,-104,54,58,58,-10,-31,-77,40,-26, 
  /* [7][0][][] */ 26,28,-47,-41,-4,-21,1,-34,-8,-3,-17,-17,13,-31,2,22,-2,-5,4,16,17,5,-5,2,-69,67,-27,-17,-34,53,13,39,-127,12,-25,28,-34,23,-25,-31,31,-15,41,25,-44,6,36,-64,-6,-23,-58,-6,-40,41,-35,-44,3,-37,-1,-22,-11,-51,8,-91,-5,-8,1,-19,14,26,-3,31,23,5,-43,17,-18,4,-34,1,12,-8,9,-27,21,4,-32,40,10,18,18,35,15,-75,-6,-61, 
  /* [8][0][][] */ -15,28,-12,-36,14,43,-53,-40,2,-4,38,15,127,-2,-53,-25,-71,28,-33,-58,4,-31,28,42,-79,63,-31,-23,-39,41,-58,56,7,-8,111,17,72,-18,-43,37,28,45,-90,-77,-26,-31,-2,-1,-23,-51,-6,-60,-60,11,-26,5,-13,76,-32,52,76,-27,54,-46,-15,-44,-16,50,-99,20,48,34,32,6,64,16,-12,51,26,79,-32,75,-92,-67,-15,28,17,-2,13,-20,-9,17,-55,-99,-64,13, 
  /* [9][0][][] */ -25,-22,66,10,51,-92,-69,-126,6,15,-36,17,-43,-93,-113,-50,-21,-28,-107,-77,-23,55,-118,-115,65,-34,-39,-7,-33,-50,-103,57,24,-27,-4,-43,-90,-14,-52,-64,12,-85,16,-105,39,-11,-114,15,14,-18,-87,-52,34,-89,-86,58,46,-77,-24,-31,-100,59,45,-88,-72,-24,59,12,-54,55,64,-101,-22,40,-111,-108,-91,-127,-61,59,0,-4,59,-3,-65,-106,2,-40,56,-1,-52,77,66,-25,24,-57, 
  /* [10][0][][] */ -30,3,46,-44,-80,61,70,-13,5,-14,18,-42,13,16,-7,1,-13,29,-21,-19,9,34,38,-22,-60,37,-2,-64,3,51,-30,-23,-7,38,-6,-7,-27,-21,-5,40,-13,46,-109,7,-42,-20,-80,-48,-12,22,15,33,50,22,5,-73,-33,-24,14,-11,14,-13,82,-105,64,-15,-44,-3,-5,-73,-42,-21,45,101,57,42,6,25,35,-86,10,-20,28,48,-45,26,30,-9,24,2,0,-53,15,-70,-27,-127, 
  /* [11][0][][] */ 69,-21,-45,57,92,38,14,-8,65,57,-101,74,-25,-103,-7,-90,-72,-119,35,28,-2,33,-11,-127,-122,-111,-48,33,59,-7,-8,-43,-102,-95,24,9,-85,37,-58,-85,-53,57,-98,-29,-67,-84,-109,-110,37,90,94,40,-111,-106,-7,-1,-69,-78,-40,-108,-93,59,73,-7,22,42,-82,-7,74,17,-104,-93,3,70,-95,12,-61,-2,-71,45,-123,-48,-76,-70,9,-99,-21,-52,-108,-39,-18,-93,-84,-41,-67,-53, 
  /* [12][0][][] */ -11,39,1,-109,20,-127,-55,-9,-102,42,-2,-29,-15,6,-3,-49,-36,-25,-1,39,2,-51,-21,12,-33,-11,-28,-99,71,18,-53,60,-42,3,-127,11,11,-12,-29,39,55,9,-35,-42,14,-70,-22,62,-37,-13,46,53,23,18,-11,-19,-116,-39,34,3,21,5,39,15,73,-6,-41,43,3,7,-6,22,29,46,13,0,1,-25,-40,-106,-78,63,-1,2,-15,12,3,60,-30,-28,39,67,14,-39,62,42, 
  /* [13][0][][] */ 68,-49,57,51,48,37,45,39,21,-127,-2,-72,67,31,31,-51,-102,-75,-55,60,45,-38,64,-50,-75,40,-12,-18,-85,-35,40,34,7,71,-78,24,-82,-31,14,48,-58,40,-55,-5,-50,16,-20,-45,15,47,-37,-86,-79,23,63,-64,-77,11,-8,-69,-24,33,-37,-33,-46,-53,-86,67,-11,-31,56,-17,-82,34,-89,-41,-58,28,47,-61,32,-98,74,18,-69,-82,54,91,-17,-45,-40,47,65,-45,85,-37, 
  /* [14][0][][] */ -67,-113,41,27,60,-44,-47,-117,-89,-52,27,57,-25,-84,-111,-83,-73,-79,-1,-7,-48,-4,-32,19,-113,-86,-55,2,-110,-99,-84,15,61,-47,-52,-22,51,63,15,-110,-38,-122,14,41,21,-111,21,-106,61,31,64,27,60,-28,-48,-23,-58,7,39,62,-18,-100,-35,47,-80,-43,35,-96,-94,-84,-80,76,-3,36,11,-90,41,-118,17,6,9,-22,-106,-35,-127,-109,-108,77,74,-28,48,-45,67,60,-27,47, 
  /* [15][0][][] */ -7,-46,-34,49,63,-29,36,-101,71,42,-83,44,101,-11,-85,-116,64,-6,-75,83,28,2,48,77,50,30,18,92,7,10,44,-111,-7,-14,-14,-24,-73,75,88,-78,-5,73,-61,-37,16,-88,-58,-70,-21,-35,50,15,-94,-107,-54,15,79,29,-54,78,-32,-16,-21,78,11,60,-77,-19,-24,-18,33,-82,-8,11,101,-113,-24,31,72,38,-89,38,-82,-76,-121,-51,-97,7,61,41,-127,-59,33,85,-89,100, 
  /* [16][0][][] */ 16,-20,-18,-46,-45,56,-7,58,-43,2,-76,4,-10,-17,-18,-112,22,40,14,-2,85,32,-41,28,-77,5,-53,-8,-78,35,20,26,-22,40,-2,31,-49,47,-4,-52,19,-15,38,63,-25,81,-24,34,31,-33,67,59,-29,62,17,13,50,4,14,-24,38,26,-10,28,34,25,-48,23,28,32,-69,1,9,78,127,24,-14,12,-75,-55,55,-120,98,10,4,39,30,8,63,1,-3,55,51,56,-19,-21, 
  /* [17][0][][] */ 3,-119,-1,42,-63,-72,-82,-109,10,-89,47,34,97,26,-125,16,4,20,87,71,-102,-37,-13,-70,-6,32,-93,-2,64,-63,-54,39,-53,-45,26,-20,-62,60,-102,-51,-106,-60,-40,-33,-21,-15,48,-120,46,91,15,1,-39,42,58,-90,-113,54,-61,-120,4,-93,40,58,-85,-89,10,-113,-120,-26,92,3,-11,-127,-53,30,75,-65,9,-78,-17,-39,-85,-105,-122,36,43,-54,-7,40,-110,-126,-37,98,-14,-13, 
  /* [18][0][][] */ 83,31,68,74,22,17,37,-9,38,41,-8,10,-70,32,89,-2,48,36,100,-51,29,51,57,49,4,-23,74,127,6,-50,95,-36,23,-6,29,-44,9,11,31,30,7,10,17,17,38,-8,18,30,49,-19,-2,-21,-2,-39,48,71,19,-9,-50,11,-11,76,-20,-9,-57,-22,92,14,22,-10,-28,16,-22,9,4,-12,-7,46,88,-33,28,-15,-10,-34,51,13,45,-19,45,-1,-45,-38,87,-8,-40,-6, 
  /* [19][0][][] */ 13,12,56,24,24,-109,68,58,58,-89,10,-48,-104,9,-51,30,39,-104,70,34,-40,50,-68,-3,43,-66,16,-88,-102,-127,-75,27,41,-85,-18,-16,-19,-74,-70,-94,20,-117,-81,-10,-64,11,46,-105,-39,7,-71,-3,-57,-7,-10,-2,-13,54,-41,-42,21,-80,73,22,-104,-15,-37,-9,-27,30,34,-66,-73,-76,-91,-81,-38,-118,2,77,40,-125,-53,57,-86,-18,-13,-15,53,11,-14,37,-44,83,44,-67, 
  /* [20][0][][] */ -4,34,-31,3,-7,-66,-10,4,-25,-38,-15,-17,-22,-1,5,-25,-51,9,-11,-67,6,-4,-16,-35,2,-33,-39,-5,-28,15,-13,51,25,26,-56,26,-2,-15,-13,-25,-21,5,-16,-30,-12,1,-59,8,38,-32,-81,-18,2,45,-20,-39,5,15,18,24,38,-34,-32,-60,1,-16,-26,14,-108,-6,-30,16,0,-24,-127,17,29,15,25,26,34,-4,29,-6,24,36,-3,32,-2,49,23,20,-45,-16,-40,-24, 
  /* [21][0][][] */ 41,39,2,-46,-28,15,19,-15,-33,21,-27,-16,-25,29,-19,-64,-24,-2,-13,-50,40,-35,41,-27,-21,-14,7,-29,43,13,-26,-24,-46,3,-102,-45,50,61,-71,-24,9,16,45,8,-22,-47,-42,46,-16,-11,-48,22,-33,33,-13,0,-65,-1,-18,38,-7,-66,4,66,39,24,-28,-55,-15,-29,24,21,31,27,124,32,-55,-1,19,-6,3,-1,16,-81,-7,-36,22,-46,-42,25,61,-127,-20,-9,19,-36, 
  /* [22][0][][] */ 30,-74,-90,-87,73,-45,66,45,-94,73,-91,-95,99,-111,-126,-99,6,45,-97,-56,49,-91,0,0,59,-31,-127,60,-78,-69,-81,-94,16,26,13,-16,-24,-41,-52,-127,-26,-38,-25,55,21,-127,52,-46,-82,-70,0,-13,-61,-87,-69,2,-12,-27,-18,-53,80,-93,-93,-113,-60,-11,-125,-67,70,63,-14,-1,-82,-20,29,-106,36,-71,28,55,64,-95,-88,-107,41,45,58,-55,-76,1,-84,55,6,-9,-53,60, 
  /* [23][0][][] */ 59,-77,-25,18,31,-119,-46,-113,-4,-113,27,27,1,-83,-12,-68,17,-29,-116,37,60,-84,61,-81,-53,-47,13,-14,6,-19,40,-47,-53,25,-1,21,32,-17,-120,-24,-93,-22,11,-127,-71,-95,87,-24,32,-111,-48,-94,29,-49,-92,67,-114,-31,28,-1,-67,-109,-86,-7,-13,-8,-126,-104,6,4,43,-59,-37,-53,-71,-101,-11,-37,30,94,-71,-83,7,-105,40,-23,73,-50,-78,-7,43,-18,76,-44,-64,73, 
  /* [24][0][][] */ -78,-70,-115,-66,-85,-100,-81,-100,40,84,55,24,92,28,-59,-127,-96,15,5,-48,69,-95,-76,-50,27,-27,41,29,77,44,-21,-64,-3,-12,44,1,-72,-93,45,-32,-85,-109,65,-21,-5,-55,25,40,-89,-47,-24,8,38,42,51,-78,-26,49,20,-24,60,-28,29,66,-88,64,-63,-83,-101,20,-69,-35,-57,21,64,65,49,-91,-112,-92,-93,-103,-69,-115,-21,33,-38,-99,7,-121,-8,-72,-31,19,-93,5, 
  /* [25][0][][] */ -99,-79,-99,-20,55,-79,-119,14,19,-118,-63,0,33,-33,-127,-51,-95,24,5,-93,28,38,-43,-79,-19,-54,-111,6,41,-102,6,69,52,-123,29,30,50,-79,-49,-44,-100,51,-119,-29,52,5,27,-5,-117,68,-62,-25,9,-44,-81,5,-50,13,-118,30,72,9,16,20,-27,33,-50,-32,-90,-35,-52,-125,-3,-100,33,-13,32,29,-18,-12,11,12,-66,40,-95,-71,-119,-105,-48,-62,59,-8,-115,-24,-43,-79, 
  /* [26][0][][] */ 8,-55,-35,-26,-25,-33,-11,-1,-50,-127,41,4,-32,-30,-18,22,21,9,-15,-64,2,23,22,-14,13,13,1,9,-14,23,-33,17,-64,-7,-22,-39,-41,17,-17,51,-39,24,32,9,-52,23,-6,18,-25,24,-27,36,21,2,-23,-74,20,41,46,20,-28,-60,29,-33,50,-8,-27,39,9,24,43,25,18,-28,-90,1,34,-37,-33,-12,-6,35,31,-7,25,8,-10,19,-23,34,12,-19,-3,9,25,1, 
  /* [27][0][][] */ -16,-19,-81,-114,-94,-38,-86,-41,11,110,6,-78,-19,22,44,-52,30,-40,65,-97,-107,-17,-51,-47,-116,13,-120,-29,30,-2,-54,-35,27,33,-56,-101,-103,-82,-123,50,-108,-11,-2,-12,59,-5,32,63,51,65,25,-91,-103,-100,-32,-55,63,-47,-83,-94,-76,-79,-56,77,8,-67,-123,64,18,39,-127,-20,26,-56,-33,-102,14,-83,49,62,47,-49,73,-75,-90,-98,-55,0,-68,-30,-57,-70,22,-11,49,79, 
  /* [28][0][][] */ 79,-2,43,14,-122,-54,-110,-44,-44,-127,24,44,-82,-116,-38,66,42,57,-60,50,-47,-9,-120,-95,-107,30,-94,-45,-80,-88,-17,-10,-95,14,56,38,-9,-117,-34,12,58,10,-117,13,-112,-28,-17,22,14,-76,-66,-51,-55,21,11,7,47,-25,59,20,-36,-62,-98,-6,31,35,-49,85,-67,-5,-102,-61,33,25,-38,-104,-116,-82,-99,30,-76,-93,75,-25,26,-112,27,-86,-111,-77,-37,-56,-36,43,-92,-60, 
  /* [29][0][][] */ 8,31,-31,-38,-19,-22,-80,-13,5,-26,-47,-68,9,-69,-48,-70,-80,71,10,-89,-24,-16,23,-13,-36,-32,-14,-28,-110,6,14,13,83,20,-23,-6,-12,36,-26,53,21,53,-31,16,-8,38,-77,-17,24,-14,35,-87,8,-22,23,-16,-66,32,-19,51,-42,30,-19,-85,-12,-47,2,66,-127,-54,7,-25,61,-45,45,24,59,-21,-26,8,-5,-69,-8,-66,20,66,10,34,-12,45,64,-11,-82,13,-69,-7, 
  /* [30][0][][] */ -4,-82,-80,6,-82,7,-82,-32,74,-32,-27,-53,-84,-3,16,7,-26,7,77,-110,28,-109,-114,-15,-109,0,-80,96,-17,-90,-91,-14,-77,-78,-114,-64,0,-45,-20,11,45,-87,-32,53,54,-56,56,21,-85,62,14,-98,78,-51,-40,55,-73,-46,-70,-46,-94,-28,-67,-23,-90,-101,-102,73,-64,83,39,-31,-75,58,11,-85,-49,-75,-86,-65,-1,21,-88,-22,-115,-6,-92,75,-43,-127,59,42,-35,-19,0,-58, 
  /* [31][0][][] */ 19,-49,20,41,51,127,-32,-41,26,11,-63,-5,-8,-53,-41,0,-19,-50,27,15,8,-5,-33,4,-7,-63,26,50,-28,-56,38,9,69,-13,-17,-22,7,-18,-62,-67,-7,-45,-19,-2,0,-23,-2,-4,38,20,31,-39,-41,-45,-69,-35,-21,-5,-24,14,-52,16,2,10,-8,28,-48,-58,24,-70,-67,-15,-65,51,30,-20,-54,-46,3,11,-51,-37,15,8,4,16,-58,-21,-32,-39,-58,-44,12,50,-12,-23, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021995645947754383, 0.0067361276596784592, 0.0024587006773799658, 0.0024520540609955788, 0.0021274755708873272, 0.0030833391938358545, 0.0021456163376569748, 0.007075753528624773, 0.0042806100100278854, 0.0021971522364765406, 0.0051959315314888954, 0.002086183987557888, 0.0055335718207061291, 0.0025074826553463936, 0.002185858553275466, 0.002134495647624135, 0.0050393766723573208, 0.0021512785460799932, 0.0076799490489065647, 0.0021706158295273781, 0.0075613614171743393, 0.0044773495756089687, 0.002128650201484561, 0.0024056637194007635, 0.0020569027401506901, 0.0021774987690150738, 0.0068576433695852757, 0.0021108416840434074, 0.0021956898272037506, 0.0044014984741806984, 0.0021877528633922338, 0.0054658898152410984, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -4210, 3965, 11183, 3790, -7820, -3641, 11555, 2223, 4957, -974, 10262, -1354, -10227, 3525, 19470, 2039, 7857, 10863, -3957, -6570, 2743, 13641, 21983, 12971, 1566, 669, 5722, 3002, 2716, -4059, 5061, -2297, -1076, 3515, 1043, 407, 5607, 4636, -4151, 4499, 6181, 19000, 4228, 7808, 5934, 2474, 552, 8458, 6618, -5622, -10113, -180, -161, -959, 3263, 379, 198, -1101, -7960, 14103, -1458, 1859, -1745, -2682, -4955, 8363, 14354, 1690, -4225, -328, 806, 2991, 1804, -2975, 114, 8227, -2380, 24332, 20810, -664, 7949, 243, -34, 1283, 14279, 9548, 6398, 1112, 4365, 8771, -803, -11678, 1336, -3388, -4408, -3860, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00017539194959681481, 0.00038384401705116034, 0.00021796628425363451, 0.00024667670368216932, 0.00015088215877767652, 0.00045740613131783903, 0.00028493229183368385, 0.00026366382371634245, 9.5109819085337222e-05, 0.00047922550584189594, 0.00017231809033546597, 0.00020865864644292742, 0.0002521449641790241, 0.00084632105426862836, 0.00016702961875125766, 0.00046232715249061584, 0.0002266532537760213, 0.00012359052198007703, 0.00048523239092901349, 0.00027300106012262404, 0.00017760040645953268, 0.00019721854187082499, 0.00013420611503534019, 0.00011748316319426522, 0.00019168425933457911, 0.00030734107713215053, 0.00055956363212317228, 0.00037379475543275476, 0.00018043816089630127, 0.00045829074224457145, 0.00030204627546481788, 0.00034475396387279034, 0.00023607350885868073, 0.0002769141283351928, 0.00033127900678664446, 0.00023914233315736055, 0.00032898166682571173, 0.00020068042795173824, 0.00016009241517167538, 0.00038147432496771216, 0.00015511053788941354, 0.00013137362839188427, 0.00035811049747280777, 0.0002945310843642801, 0.00030701386276632547, 0.00032781099434942007, 0.00037423541652970016, 0.00023894209880381823, 0.00021619429753627628, 0.00023269605298992246, 0.00015780414105392992, 0.00021639239275828004, 0.00037712918128818274, 0.00034740017144940794, 0.00016540147771593183, 0.00024219007173087448, 0.00038331019459292293, 0.00027668019174598157, 0.00019621124374680221, 0.0001217919634655118, 0.00056536652846261859, 0.00043600768549367785, 0.00019078416517004371, 0.00036394104245118797, 0.00037778550176881254, 0.00020704853523056954, 0.00015893888485152274, 0.00018095099949277937, 0.00026967452140524983, 0.0003648510028142482, 0.00025942770298570395, 0.00014133488002698869, 0.00067621382186189294, 0.00022186200658325106, 0.00042662399937398732, 0.0002656571741681546, 0.00010819159069797024, 7.5681724410969764e-05, 9.2549678811337799e-05, 0.00042783142998814583, 0.00018687432748265564, 0.00021502668096218258, 0.00026464255643077195, 0.00023639475693926215, 0.00012154891010141, 0.00024136267893482, 0.00034515312290750444, 0.00032126801670528948, 0.00012222396617289633, 0.00022402027389034629, 0.00031164055690169334, 0.00018075361731462181, 0.00020370386482682079, 0.00036344525869935751, 0.00017183546151500195, 0.00018677662592381239, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 50,58,38,-83,-41,-75,21,-74,-92,39,29,127,57,-3,3,115, 
  /* [1][0][][] */ 58,-107,-17,7,-33,-32,-33,-48,-24,-20,-70,55,-50,-48,-21,-127, 
  /* [2][0][][] */ 8,40,70,77,77,-1,-127,-45,69,25,9,84,9,22,-83,-6, 
  /* [3][0][][] */ 127,-40,22,-79,54,-30,-8,-38,24,64,72,32,48,24,52,52, 
  /* [4][0][][] */ 3,40,80,87,93,-69,-61,-1,-58,78,127,49,-79,19,-88,89, 
  /* [5][0][][] */ 45,-127,44,45,-69,93,32,67,-9,-8,-18,50,-38,-35,-50,-46, 
  /* [6][0][][] */ 9,13,100,-14,127,-22,-13,-71,-84,-30,48,-27,56,-1,-77,61, 
  /* [7][0][][] */ 14,79,8,-61,67,70,-41,-49,86,80,-7,-10,63,0,127,21, 
  /* [8][0][][] */ 127,-115,64,-69,71,-10,-25,-107,45,108,117,23,-48,104,101,28, 
  /* [9][0][][] */ -56,52,12,98,2,33,51,-30,-15,127,28,16,10,-9,5,-40, 
  /* [10][0][][] */ -62,102,-23,-45,-17,-37,127,81,-23,-19,67,5,-28,32,-86,78, 
  /* [11][0][][] */ -92,-21,41,41,17,-29,14,-61,-20,15,19,54,1,127,-92,19, 
  /* [12][0][][] */ -13,-25,-117,-12,-44,-72,-4,98,127,-28,-72,-22,-86,-27,-60,38, 
  /* [13][0][][] */ -60,25,1,27,45,-127,-23,4,3,17,19,8,6,14,-23,13, 
  /* [14][0][][] */ 10,0,110,28,30,-5,-10,-127,-20,45,98,62,42,4,-8,24, 
  /* [15][0][][] */ -14,4,-19,-6,-27,-10,127,0,-41,-9,46,4,-10,18,-42,2, 
  /* [16][0][][] */ 86,40,70,-3,35,36,46,-34,-127,1,15,-8,73,3,18,-14, 
  /* [17][0][][] */ -55,-94,31,67,-127,-39,-113,61,-71,-37,-32,-13,20,43,70,35, 
  /* [18][0][][] */ -8,8,18,66,25,30,6,-21,60,33,-15,-17,18,127,39,41, 
  /* [19][0][][] */ 37,84,27,22,127,10,-52,-84,-102,39,-24,-78,-38,-127,-52,-58, 
  /* [20][0][][] */ 65,3,37,24,-29,-127,17,-35,-5,55,-62,0,57,-11,12,40, 
  /* [21][0][][] */ -30,51,61,3,1,-4,-1,-18,10,0,26,-13,98,47,22,127, 
  /* [22][0][][] */ -33,73,33,127,-60,-8,53,79,-62,-35,14,79,68,36,-48,75, 
  /* [23][0][][] */ 25,35,120,32,23,-127,-60,-41,13,46,35,65,-1,38,-38,20, 
  /* [24][0][][] */ -127,-25,-24,-27,-30,105,74,21,86,22,72,-16,-47,39,63,-27, 
  /* [25][0][][] */ 56,67,9,28,13,-41,110,-4,-42,-127,-22,-42,-20,-112,-63,40, 
  /* [26][0][][] */ -33,-2,5,51,-43,-32,13,-8,-1,-45,22,-9,18,127,-25,25, 
  /* [27][0][][] */ -37,40,34,111,15,-19,11,-46,41,-48,-5,16,9,127,-50,-17, 
  /* [28][0][][] */ 12,110,127,127,95,-7,31,-1,-97,-65,-9,10,102,114,7,-38, 
  /* [29][0][][] */ 0,-26,-53,-23,11,-6,10,21,25,-3,-53,-127,-17,-66,3,-11, 
  /* [30][0][][] */ 8,44,9,62,2,-31,-4,-127,-44,38,7,29,79,47,32,117, 
  /* [31][0][][] */ -67,-11,-78,-96,-31,-97,-23,-68,82,80,-47,-127,-7,-23,36,1, 
  /* [32][0][][] */ -27,-121,16,22,-26,127,-36,13,39,-1,-73,85,24,3,56,13, 
  /* [33][0][][] */ 54,-21,7,-15,-4,-15,-127,-55,-32,28,-66,-61,77,-96,118,19, 
  /* [34][0][][] */ -52,36,8,-18,12,37,-46,79,48,-35,25,-19,39,22,-12,127, 
  /* [35][0][][] */ 14,-73,-80,4,-26,-92,-9,-127,56,39,-102,-18,-45,-74,23,-64, 
  /* [36][0][][] */ 30,-43,-12,37,24,54,-9,38,30,-15,-9,38,-127,-3,-33,-110, 
  /* [37][0][][] */ 79,8,23,0,-43,87,70,16,-126,-49,-17,16,-5,-124,100,-127, 
  /* [38][0][][] */ 114,51,11,-65,127,-38,-46,-52,26,96,3,21,26,-63,46,47, 
  /* [39][0][][] */ -54,127,7,-72,-28,25,-54,89,29,-30,-12,14,16,58,-5,47, 
  /* [40][0][][] */ 16,-1,48,48,58,-127,-69,-60,-72,12,0,23,-70,-107,-5,-41, 
  /* [41][0][][] */ -114,14,-113,-2,-82,-24,104,52,-43,-78,-126,-79,-127,46,74,3, 
  /* [42][0][][] */ 122,46,-17,-9,-49,38,108,-27,-58,37,60,-40,-7,22,127,-111, 
  /* [43][0][][] */ 26,119,95,-8,59,-23,36,-34,10,84,26,-29,127,14,39,89, 
  /* [44][0][][] */ 54,-19,28,-10,59,13,-23,-127,-77,44,67,61,-38,5,46,-39, 
  /* [45][0][][] */ 1,18,18,-5,-24,-49,-22,-34,49,46,-1,-20,68,25,127,29, 
  /* [46][0][][] */ 53,44,9,-31,4,-4,106,-53,-127,-2,40,4,4,-79,23,-9, 
  /* [47][0][][] */ 16,72,29,-15,95,-2,-38,53,-41,73,18,52,-8,73,127,-33, 
  /* [48][0][][] */ -76,-99,26,49,-31,44,25,-67,-7,2,-51,27,49,56,127,-14, 
  /* [49][0][][] */ -28,-21,96,93,73,-53,34,0,-127,-66,-9,-30,13,127,-20,-9, 
  /* [50][0][][] */ 42,-20,-7,27,34,-127,-46,-3,21,2,-15,11,2,-85,-77,21, 
  /* [51][0][][] */ 56,78,49,-21,93,18,-32,-34,-127,48,-13,-90,56,-75,43,23, 
  /* [52][0][][] */ -127,76,-36,-47,65,82,-52,90,81,30,-30,-90,37,58,-7,90, 
  /* [53][0][][] */ -8,-44,-74,-78,-10,50,5,14,60,9,-16,-111,-13,-127,44,-33, 
  /* [54][0][][] */ 127,-76,16,10,69,13,-81,-96,-59,112,20,34,-7,-21,-39,-23, 
  /* [55][0][][] */ 127,-65,0,-22,34,-94,-40,-100,6,8,0,27,1,-23,4,54, 
  /* [56][0][][] */ 13,8,39,-19,2,-13,-72,12,8,127,8,-18,81,18,49,27, 
  /* [57][0][][] */ 0,-3,-48,-23,-94,-15,37,127,19,-17,-51,15,29,11,73,-12, 
  /* [58][0][][] */ 99,118,-114,-124,61,116,-37,12,-127,59,-92,-101,101,23,118,-60, 
  /* [59][0][][] */ -97,57,83,24,-102,-63,49,127,21,-31,-4,6,32,34,79,-7, 
  /* [60][0][][] */ -38,-30,-68,-29,10,-127,-45,-24,51,-57,-11,-62,28,-26,-43,45, 
  /* [61][0][][] */ -36,33,37,127,19,6,13,-32,-48,-7,6,13,36,55,-10,-22, 
  /* [62][0][][] */ -13,127,26,-3,12,-23,-14,97,-75,-72,-50,-33,-24,-95,-80,32, 
  /* [63][0][][] */ 22,127,31,39,-11,54,4,35,-46,35,23,-6,48,63,34,6, 
  /* [64][0][][] */ 38,38,-17,-10,88,50,-49,41,2,8,-53,-127,30,-105,51,31, 
  /* [65][0][][] */ 13,33,109,-45,127,35,40,-75,-100,76,72,-68,85,66,25,-5, 
  /* [66][0][][] */ 38,-5,127,76,-51,-63,17,-38,-73,-51,55,116,23,106,30,117, 
  /* [67][0][][] */ -60,103,-19,-127,-81,-73,-95,33,81,-94,-60,29,48,91,102,42, 
  /* [68][0][][] */ 15,48,127,-2,30,-16,-51,5,-73,-70,-30,-32,124,-19,59,13, 
  /* [69][0][][] */ 84,65,-44,-13,-89,-127,93,-70,-8,-1,74,-54,-45,3,-3,-53, 
  /* [70][0][][] */ 1,62,-53,-10,-40,49,71,127,-70,20,6,1,-5,47,-28,0, 
  /* [71][0][][] */ 0,65,-40,8,-59,-127,92,-20,-101,-30,-72,-25,-97,24,65,46, 
  /* [72][0][][] */ -10,-56,-127,-16,55,19,28,52,40,-8,-5,-77,-71,-20,-8,-15, 
  /* [73][0][][] */ -123,12,76,29,55,58,-127,-98,54,-61,102,27,-10,39,8,30, 
  /* [74][0][][] */ 58,-33,43,127,45,-118,-89,48,42,17,-44,51,-23,-98,-13,-16, 
  /* [75][0][][] */ 8,-8,-127,-62,18,58,74,23,124,16,-68,-101,-78,-20,-14,-93, 
  /* [76][0][][] */ -44,20,6,9,-41,-19,-48,65,14,-54,-45,-127,29,52,81,36, 
  /* [77][0][][] */ -6,-76,5,127,-81,-95,90,-15,90,85,24,55,-3,-33,-107,44, 
  /* [78][0][][] */ 6,-31,60,-2,14,-77,-23,-2,-32,-13,89,62,4,127,1,120, 
  /* [79][0][][] */ 8,-48,-54,-40,-127,-4,49,-17,59,-31,3,26,-12,22,16,-22, 
  /* [80][0][][] */ 8,-61,86,-20,-35,-127,49,-90,-17,18,-19,-85,85,95,72,20, 
  /* [81][0][][] */ -48,97,-127,-16,34,-65,31,88,-80,-55,64,7,-4,-4,-20,-8, 
  /* [82][0][][] */ 69,2,7,-20,29,-38,3,-33,12,62,-69,-48,127,21,79,33, 
  /* [83][0][][] */ -51,72,-57,-89,68,44,-15,-75,61,83,6,-115,23,10,-57,127, 
  /* [84][0][][] */ -8,37,49,-29,-77,-68,99,-108,-37,9,8,-29,76,86,127,6, 
  /* [85][0][][] */ -45,75,6,-98,-127,19,-23,8,-65,-68,-79,9,34,-1,-6,-43, 
  /* [86][0][][] */ -8,16,57,106,-47,-85,119,60,-4,-26,24,127,-14,107,-1,36, 
  /* [87][0][][] */ -25,13,-31,-116,15,-48,-44,-27,19,48,-21,-127,12,-13,6,0, 
  /* [88][0][][] */ 123,-26,72,18,-14,-127,0,8,-34,14,-24,26,59,26,25,62, 
  /* [89][0][][] */ -22,25,-90,-83,-24,85,23,19,-127,-25,21,-86,109,-9,106,-98, 
  /* [90][0][][] */ 34,-81,-39,-73,-30,-30,10,62,53,-65,-85,-37,-78,12,24,-127, 
  /* [91][0][][] */ 19,-63,-69,-104,-21,-127,-1,-119,16,35,-4,-125,-47,-30,-25,-13, 
  /* [92][0][][] */ -11,56,120,48,15,-127,1,-27,-40,-72,21,11,82,38,10,45, 
  /* [93][0][][] */ 25,3,80,-27,-50,127,6,20,3,51,-28,4,9,33,84,-16, 
  /* [94][0][][] */ 73,94,-8,-51,79,36,-37,-14,-127,-49,-19,-34,126,6,43,-94, 
  /* [95][0][][] */ 76,102,-42,-22,-24,101,-44,52,-34,103,105,17,-75,52,111,-127, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0004645995213650167, 0.0010167727014049888, 0.0005773755838163197, 0.00065342721063643694, 0.00039967498742043972, 0.0012116329744458199, 0.00075476325582712889, 0.00069842475932091475, 0.00025193844339810312, 0.0012694307370111346, 0.0004564570845104754, 0.00055272039026021957, 0.00066791224526241422, 0.0022418380249291658, 0.00044244833406992257, 0.0012246683472767472, 0.00060038670198991895, 0.00032738159643486142, 0.0012853424996137619, 0.00072315835859626532, 0.00047044953680597246, 0.000522416434250772, 0.00035550145548768342, 0.00031120367930270731, 0.00050775654381141067, 0.00081412238068878651, 0.0014822401572018862, 0.0009901529410853982, 0.00047796653234399855, 0.0012139761820435524, 0.00080009689554572105, 0.00091322622029110789, 0.0006253402098082006, 0.00073352380422875285, 0.0008775320602580905, 0.0006334692589007318, 0.00087144662393257022, 0.00053158670198172331, 0.00042407226283103228, 0.0010104955872520804, 0.00041087562567554414, 0.00034799842978827655, 0.0009486066410318017, 0.00078018975909799337, 0.00081325561041012406, 0.00086834561079740524, 0.00099132023751735687, 0.00063293887069448829, 0.00057268171804025769, 0.00061639357591047883, 0.00041801077895797789, 0.0005732064601033926, 0.0009989856043830514, 0.00092023581964895129, 0.00043813555384986103, 0.00064154248684644699, 0.001015358604490757, 0.00073290412547066808, 0.00051974819507449865, 0.00032261735759675503, 0.0014976115198805928, 0.0011549501214176416, 0.00050537229981273413, 0.00096405122894793749, 0.0010007241507992148, 0.00054845534032210708, 0.0004210166516713798, 0.00047932501183822751, 0.00071434665005654097, 0.00096646166639402509, 0.00068720360286533833, 0.00037438501021824777, 0.0017912373878061771, 0.0005876950453966856, 0.00113009347114712, 0.00070370500907301903, 0.00028659103554673493, 0.0002004749549087137, 0.00024515684344805777, 0.0011332918656989932, 0.00049501541070640087, 0.00056958879576995969, 0.00070101732853800058, 0.00062619114760309458, 0.00032197352265939116, 0.0006393507937900722, 0.00091428356245160103, 0.0008510137558914721, 0.00032376169110648334, 0.00059341214364394546, 0.00082551140803843737, 0.00047880216152407229, 0.0005395955522544682, 0.00096273800591006875, 0.00045517866965383291, 0.0004947566194459796, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 8889, 16839, 10283, -5438, 6314, 4092, 36148, -22154, 2045, 36108, 33825, 50667, -11804, 10535, -9772, -8139, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00047668840852566063, 0.00028382829623296857, 7.6636642916128039e-05, 0.00017907538858707994, 0.00031494622817263007, 0.00025972328148782253, 0.00026765780057758093, 0.00021276803454384208, 0.00029001134680584073, 0.00015738241199869663, 0.00031016647699289024, 0.00028771910001523793, 0.00023224152391776443, 0.00013221483095549047, 0.00035577363451011479, 0.0002994690730702132, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -11,-45,21,7,22,-23,-127,38,8,9,-7,-35,-9,15,-12,8,1,12,58,-31,-17,-42,38,21,-4,13,-21,85,-1,-3,1,7,24,44,8,35,-2,28,-24,13,12,97,7,-22,42,21,2,1,42,3,-11,-64,-25,-9,-14,22,-30,1,-59,-19,42,-25,-25,-46,-13,-28,-25,34,21,-48,22,-34,-9,-9,28,-24,34,-7,-18,39,-12,-61,-13,23,22,22,-22,-30,7,-4,7,-20,36,-35,18,19, 
  /* [1][0][][] */ 26,-101,-100,4,70,-34,56,51,-29,-53,-21,41,-91,-32,-35,24,34,13,-127,67,45,31,57,-51,6,-19,-69,-44,29,-16,-3,-20,-8,24,-68,-20,-40,-25,-96,-54,-38,-51,-39,47,54,-26,82,10,-5,-43,-19,-18,-45,4,45,36,30,97,-5,-20,-14,-49,29,41,-4,57,-76,16,-38,-21,-43,-19,-4,-99,111,41,42,-66,50,38,-2,32,61,-29,-67,64,-61,52,2,-104,3,6,22,68,103,75, 
  /* [2][0][][] */ -69,65,-113,49,45,54,-18,109,9,-125,2,-18,-42,45,-5,-21,69,8,-24,9,64,41,85,28,18,99,-48,-15,28,48,99,-34,58,82,-27,9,-51,-35,-27,106,-18,-31,-18,-62,17,-106,105,35,103,122,-33,-48,3,-55,7,-42,9,28,-65,-22,23,15,-9,-5,-14,21,-1,54,80,35,14,-10,-36,-60,-39,36,24,35,-5,33,27,14,-20,43,-12,-14,-20,92,16,19,-6,-127,30,-32,0,68, 
  /* [3][0][][] */ -6,41,42,21,20,-4,-14,28,-32,-61,0,-3,49,27,-4,15,34,-24,52,46,59,25,9,14,29,-3,51,45,47,25,-9,25,-20,-56,9,10,10,24,16,127,-51,15,31,-30,15,10,-50,-20,15,63,-17,26,0,-66,51,-15,-25,5,36,11,-18,96,3,-73,-24,-17,-8,-46,80,35,32,-55,12,-27,24,8,-23,21,29,50,24,-21,21,26,-22,-6,97,-21,17,58,9,-14,0,24,75,46, 
  /* [4][0][][] */ -31,-47,-47,-7,41,24,-1,18,-41,-38,-10,5,23,33,54,2,14,-40,-87,127,-46,83,44,-28,7,36,-1,-13,34,29,23,-35,66,-16,-41,44,-11,-43,-39,58,-22,-88,4,-7,-2,-65,-35,-19,26,54,-38,-39,-6,-76,18,-1,65,6,-45,24,-12,45,25,82,-16,4,-15,35,33,31,-24,19,-4,14,9,-2,120,-29,40,7,52,66,-2,10,-65,37,30,-2,-42,21,-3,-22,-34,81,2,7, 
  /* [5][0][][] */ -29,90,-118,90,23,18,28,-24,19,29,-18,-6,-107,0,27,15,-16,11,33,-30,-57,1,-8,-48,0,-13,-12,5,-20,42,66,52,-67,-32,19,8,-3,4,-6,47,-39,107,0,-45,13,-68,0,2,-33,-21,20,8,-56,-33,-16,-87,-42,97,-52,1,68,49,21,7,13,-1,23,27,19,47,0,-5,4,-64,-19,127,-7,30,14,3,-51,-7,0,-43,-43,17,-53,22,3,-45,-25,24,2,46,-49,31, 
  /* [6][0][][] */ -6,-78,28,-10,-30,35,-6,26,-21,4,-13,-10,-22,-45,-60,24,12,31,45,-114,18,1,9,30,4,-16,-12,19,-12,-13,-14,-9,-1,-20,43,0,6,72,22,-75,2,127,-20,15,24,23,0,20,-30,6,23,40,-1,-20,38,-13,-36,-6,17,4,8,3,40,-78,39,-48,-25,-50,-71,17,75,-4,-30,-19,40,43,-89,9,15,5,-9,-9,46,-16,12,48,13,9,28,-34,16,6,28,-16,-5,17, 
  /* [7][0][][] */ 42,73,-22,-11,58,31,74,-60,-21,-22,7,26,-82,-32,29,14,5,-13,-55,-6,20,-93,-6,-38,-21,-70,65,-42,-9,-13,45,21,-39,4,-38,-34,3,-4,6,18,-24,28,-7,57,-30,7,14,11,-38,-80,6,59,-34,12,-51,6,6,57,26,-18,-19,18,127,-5,17,69,-9,-44,18,-68,-5,-1,5,-69,19,103,-4,5,45,-81,-57,-44,26,-73,-27,34,56,-39,-10,-6,-15,13,-28,60,17,-36, 
  /* [8][0][][] */ 3,45,45,-18,-87,22,32,-98,105,48,29,7,-3,6,57,-15,-53,-18,-16,28,-20,-20,-111,26,-11,-18,52,-96,-18,22,-9,22,2,26,12,-23,-5,-81,32,-49,-7,-98,28,28,-97,26,0,17,-49,-17,7,35,5,-19,-61,0,28,-47,26,-30,-35,32,-26,17,-7,62,48,-16,-24,-3,-37,13,38,44,-52,-54,5,-50,-18,-85,-20,-26,-34,-42,18,-30,127,-8,10,17,-2,-31,-12,-7,-45,-67, 
  /* [9][0][][] */ -29,-52,-67,37,10,-1,-114,32,50,-28,21,28,-15,34,85,-45,-35,-19,-2,29,-92,32,43,-11,-15,117,-96,-25,-3,28,6,13,31,27,-90,-11,-37,-59,-38,-4,12,-93,-37,8,-26,-62,-4,-19,22,85,-18,-111,29,-20,-37,-96,11,7,-49,-3,16,-16,-57,89,-50,38,3,1,-24,41,-59,-57,19,52,-36,18,127,-7,-35,21,-25,-56,-21,60,20,-1,-39,34,-21,-58,-32,-110,-39,-35,-65,-21, 
  /* [10][0][][] */ -72,-58,20,-1,-20,4,9,29,18,18,8,36,-30,4,-8,7,15,0,-26,-19,-7,92,50,51,1,15,-13,-82,15,-22,61,-20,11,34,-1,-14,2,51,0,-40,9,-10,23,-38,79,-23,44,0,63,77,6,37,-44,-44,49,-80,11,55,0,-45,20,13,-18,-15,-10,55,-24,35,-6,56,25,7,-42,-19,-9,84,-66,35,-1,69,-12,11,36,-11,-27,-21,-37,127,28,-4,3,-60,72,-81,5,88, 
  /* [11][0][][] */ -127,52,13,49,11,-25,-7,-16,-31,-35,-25,9,-6,48,-45,-20,28,-5,6,-83,15,37,30,31,34,12,60,7,5,13,10,3,-9,49,-5,-41,10,74,44,59,-29,41,18,-56,69,0,82,3,100,88,-7,29,-38,-84,28,-74,-117,4,-27,-68,-28,45,-23,-47,-30,-24,10,40,81,35,36,58,-54,-47,-29,1,-97,58,-81,51,-16,-23,-50,-48,49,-23,33,25,16,61,-26,-115,34,-15,-21,86, 
  /* [12][0][][] */ 34,2,-127,30,15,-20,1,29,-2,72,5,-18,-47,24,11,-11,-41,20,-10,-25,-31,-28,32,1,-14,67,-65,21,15,26,2,14,-32,55,-13,0,-24,-24,-39,-59,1,-45,-13,13,-57,-29,38,-18,16,-39,-16,-13,-39,18,-28,-15,9,-6,-55,-7,28,12,-11,49,24,-13,16,65,58,-85,0,71,20,46,-18,21,19,-18,-28,-29,-18,72,-10,26,1,0,-66,45,-48,-9,-11,-29,-9,5,-21,2, 
  /* [13][0][][] */ -15,97,-19,31,-86,2,19,-30,6,27,4,47,-32,-17,29,-1,-10,31,-68,-55,-62,85,59,-25,30,63,-38,-69,33,-27,55,-32,-127,35,6,-83,-20,29,-15,-106,-18,-4,-15,-5,-10,-20,25,-16,90,14,20,113,-16,-15,58,-43,-34,49,16,-34,-42,1,-41,-23,20,61,39,63,-20,50,5,12,19,-51,-37,46,-56,51,-6,-33,-17,-8,34,-116,-16,-28,-34,72,10,-38,-9,-54,46,-96,-44,84, 
  /* [14][0][][] */ 6,32,-52,-1,38,-13,-57,46,-35,62,14,-3,-127,-37,-11,-13,-68,7,55,-13,-45,-34,-2,-37,-14,20,-56,5,-6,-2,12,3,-39,7,13,-1,-15,-1,-28,-41,13,59,-22,-34,-16,-7,0,-18,36,-47,6,-83,-10,57,-90,-26,-37,-1,-109,13,32,-16,-6,-17,14,42,4,29,-45,-45,-17,-12,20,-4,-18,-7,68,-9,-11,-39,-31,-103,-1,5,12,-12,-89,16,-40,-11,11,51,12,-39,17,-33, 
  /* [15][0][][] */ 10,-25,-47,-10,-69,13,44,-56,16,34,-20,29,48,-1,64,-21,-29,-18,-87,19,-37,73,-36,-13,-4,-32,-1,-46,29,-1,10,-95,-58,41,-9,-20,-7,-15,-121,-109,4,-127,0,73,-80,-21,60,-9,71,-12,-22,9,10,17,2,44,108,76,52,28,-19,26,36,23,21,13,15,33,37,25,-1,45,-27,34,-2,17,9,-78,-4,-35,8,89,71,-35,-21,-69,13,8,-16,33,8,-76,30,33,-46,13, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.020259257405996323, 0.01206270232796669, 0.0032570573966950178, 0.007610703818500042, 0.013385213911533356, 0.011038239113986492, 0.011375456117093563, 0.0090426411479711533, 0.01232548151165247, 0.0066887526772916317, 0.013182074762880802, 0.012228061445057392, 0.0098702646791934967, 0.0056191300973296165, 0.015120378695428371, 0.012727434746921062, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 12048, 56341, 3387, 3424, 32867, -21839, 1886, -6211, 6880, 22708, 2913, 886, -70, -2753, -1115, -21362, -5621, 1760, -1193, 5783, -4563, 12831, 703, 2136, 8981, -1440, -3832, 22859, -1507, -12512, 553, 24777, 23107, -14308, 4990, 5095, -1955, -9781, 9240, -5561, -7464, 548, -7295, 2096, 33763, -5317, 14985, -3188, -13132, -6190, -1012, 907, -11029, 20060, -6018, 14499, 17183, -4433, 21456, 5028, -20177, -1237, -7664, 1899, -16972, 29703, -8707, -11282, -3241, 714, -6666, 2798, 1615, 1312, -1725, -11087, 1697, -3779, 59435, -15290, -6353, -1322, 2825, -2624, 56830, -12842, -20207, -31589, -7509, 1026, -2679, 40225, 5146, -2445, -8206, -2287, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00027001913986168802, 0.00011262841144343838, 0.00013203805428929627, 0.00016416129074059427, 0.00011649974476313218, 4.3153551814612001e-05, 0.00017382638179697096, 0.00011601816368056461, 0.00022839789744466543, 0.00015858862025197595, 0.00017011364980135113, 8.7316118879243731e-05, 0.00040744294528849423, 0.00020150431373622268, 0.00034546136157587171, 6.8833200202789158e-05, 0.00013876018056180328, 8.2626094808802009e-05, 0.00016954097372945398, 0.00013566862617153674, 7.611551700392738e-05, 6.0412599850678816e-05, 0.00013638833479490131, 0.00040977107710205019, 7.6279749919194728e-05, 0.00019141676602885127, 0.00014930630277376622, 0.00016071207937784493, 6.4303261751774698e-05, 0.00038892443990334868, 0.00041975380736403167, 0.00016409422096330673, 0.00015392900968436152, 9.52780173975043e-05, 0.00024433826911263168, 0.00022146441915538162, 0.00047069956781342626, 0.00016561822849325836, 0.00020479150407481939, 0.00014310923870652914, 0.00019361425074748695, 0.0002416440547676757, 0.00029923010151833296, 7.4725823651533574e-05, 0.00025756785180419683, 7.0386020524892956e-05, 0.00012383121065795422, 0.00022030221589375287, 0.0005920642870478332, 0.00016544174286536872, 0.00026837413315661252, 0.00013846170622855425, 5.9009031247114763e-05, 0.00021875223319511861, 0.0001575366040924564, 9.2892922111786902e-05, 0.00023423835227731615, 0.00031977606704458594, 6.6879416408482939e-05, 0.00014345174713525921, 0.00019084688392467797, 0.00021330328308977187, 6.5528751292731613e-05, 0.00019001895270776004, 6.8036970333196223e-05, 7.5935422501061112e-05, 0.0002784871612675488, 0.00018042259034700692, 0.00020448524446692318, 0.00028448848752304912, 9.2521928308997303e-05, 9.4299371994566172e-05, 0.00026165443705394864, 0.0001284612953895703, 0.00029551517218351364, 0.00017519253015052527, 0.00016878181486390531, 5.7981724239652976e-05, 4.3991389247821644e-05, 9.5126626547425985e-05, 0.00018060619186144322, 0.00023286753275897354, 0.00010614254279062152, 0.00023982269340194762, 6.3553816289640963e-05, 0.00011304079089313745, 8.5320905782282352e-05, 0.0004516390326898545, 0.00035529071465134621, 0.0001043677912093699, 0.00039756580372340977, 4.0598326449980959e-05, 0.00015576148871332407, 0.00011466001888038591, 0.00022008686210028827, 0.00022871294640935957, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -32,-72,16,127,24,61,69,-41,-5,-13,-21,-10,-33,-10,42,21,-16,-85,34,55,69,-108,110,51,-80,-3,35,-43,-44,-127,40,16,-1,26,89,-41,-25,1,24,-44,-12,45,-108,94,27,-89,27,50,-20,69,-25,20,7,-31,9,53,-62,-22,-72,-37,-12,-20,23,29,87,-34,83,16,18,5,29,127,16,8,40,44,-19,28,127,15,-1,27,-57,-1,102,-3,-28,-9,14,-18,-21,-33,-9,-20,-7,24, 127,-127,51,97,-44,127,17,-107,72,-5,-26,97,127,-88,-10,30,11,127,127,-89,127,102,81,103,-127,-61,-55,-45,5,38,-58,-28,-62,89,-127,-127,-24,-16,-32,64,1,127,113,67,-39,-127,-127,-51,-20,-112,37,65,123,-45,35,100,-22,37,-48,-127,-63,-40,-44,47,93,-63,40,46,-87,26,-19,100,127,118,20,79,-5,77,-44,78,67,95,117,-13,-22,52,-92,127,-122,-96,4,-122,-108,-127,-28,112, -65,-23,66,-58,15,-54,119,-16,91,-39,-48,17,-15,-12,-12,-7,-10,-85,30,10,-53,-113,35,14,-103,40,-11,-68,127,44,-6,0,-6,71,13,-76,-12,57,15,2,27,24,-127,127,27,-31,36,12,-15,40,-21,21,-12,-11,-21,40,-98,-4,-93,69,20,42,35,2,11,-58,-7,20,0,0,-3,50,-9,-31,-27,85,-38,21,-93,34,-19,16,-10,13,-85,-5,-64,-14,-34,43,-22,-7,17,-56,-9,1, 
  /* [0][1][][] */ -49,-87,18,-47,-49,106,-6,127,-42,-13,-12,-127,23,-104,88,67,-16,-57,6,90,89,-124,39,87,-74,-6,127,-28,-48,42,127,-127,-127,127,-78,-102,-26,46,-64,120,-44,-9,4,65,-70,111,-2,67,20,101,23,7,5,-85,48,45,120,127,-127,-89,127,-42,-51,127,86,-47,5,17,125,43,127,47,-62,127,16,53,26,7,-27,8,-32,75,-127,122,-1,53,-35,33,94,-127,-31,4,127,-51,7,-20, 57,108,20,-98,127,86,57,35,-127,127,127,-38,-41,-105,-127,127,127,-66,-127,-54,83,120,-127,127,-84,-49,-25,127,-127,84,-123,-115,-52,122,120,117,127,-127,-119,41,-68,-103,104,-124,-127,-37,-121,-127,127,-107,84,39,127,127,127,-127,40,-90,-67,116,22,-67,-106,-78,-127,127,-127,127,-127,-115,-102,-96,-125,-82,127,127,-127,127,-78,127,127,-11,-78,-127,46,127,54,55,127,19,127,-3,-67,33,127,-127, -55,-20,-39,44,-63,-127,50,22,11,-35,-49,63,4,111,56,25,1,95,23,127,-27,-8,-77,1,-59,21,-117,-36,-76,-19,40,-101,-78,53,-29,-37,-23,81,-91,83,127,-3,-39,41,-62,-64,20,47,13,127,-19,17,-83,-103,17,44,127,-17,1,25,14,127,124,-61,-36,-11,68,-4,-86,100,-15,-75,-1,-46,-4,37,-5,47,85,-22,-80,-31,55,9,-33,-26,65,31,27,107,-41,-2,-33,60,-21,-17, 
  /* [0][2][][] */ -52,18,-41,-54,4,-48,-36,47,55,-26,-46,-17,17,7,-22,7,-2,52,-14,0,-63,-127,-30,37,-32,8,35,-83,88,37,10,33,12,-5,-16,-87,10,79,-19,31,-3,-33,-64,64,-5,74,6,39,-20,3,13,-36,71,-15,-20,1,-85,36,86,1,34,-18,-77,14,3,-58,-32,7,6,24,22,-12,18,-45,32,48,22,30,-69,31,-15,-25,23,17,-127,13,58,-44,-63,-57,-23,-52,7,91,-10,25, 90,16,-127,-52,-78,-31,26,39,-75,-37,-31,-79,-81,127,-4,62,-4,-77,-31,-60,60,14,-35,34,-105,127,-54,13,-34,-16,-20,-7,-58,60,14,4,-12,-19,127,127,0,-50,57,10,-52,110,-81,-47,-40,-7,-127,-127,-75,-62,44,75,-34,6,57,27,23,-9,13,-25,-50,32,84,-25,103,127,-33,-116,30,-76,27,93,100,49,68,43,0,-127,-59,12,-24,17,127,35,-72,45,-18,-127,35,115,-18,65, -57,29,-50,-9,6,-98,-127,20,-30,-32,-31,-13,1,-1,16,18,21,-14,-28,8,-90,-98,1,40,10,-24,3,2,-54,-35,-15,23,30,-35,-50,-27,-22,27,39,-3,11,-29,-55,13,2,112,31,10,-13,4,8,-13,82,0,-18,-10,-79,-14,37,-39,4,25,127,-40,49,3,-13,25,-5,12,-26,-45,2,47,-24,61,38,32,72,12,-4,-56,-10,-11,42,-27,47,-36,71,55,-18,-65,-22,8,-21,5, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.011475812643766403, 0.0047867074608802795, 0.0056116171181201935, 0.0069768545217812061, 0.0049512390978634357, 0.0018340259557589889, 0.0073876213282346725, 0.0049307718873023987, 0.0097069106996059418, 0.0067400163970887661, 0.0072298301383852959, 0.0037109348922967911, 0.017316324636340141, 0.0085639329627156258, 0.014682107605040073, 0.0029254110995680094, 0.0058973073028028011, 0.0035116088110953569, 0.007205490954220295, 0.0057659163139760494, 0.0032349093817174435, 0.0025675354991108179, 0.0057965042069554329, 0.017415270209312439, 0.0032418894115835428, 0.0081352125853300095, 0.0063455179333686829, 0.0068302634172141552, 0.002732888562604785, 0.01652928814291954, 0.017839536070823669, 0.0069740042090415955, 0.0065419827587902546, 0.004049315582960844, 0.010384376160800457, 0.0094122374430298805, 0.020004730671644211, 0.0070387744344770908, 0.0087036387994885445, 0.0060821427032351494, 0.0082286056131124496, 0.010269871912896633, 0.012717279605567455, 0.00317584746517241, 0.010946633294224739, 0.0029914057813584805, 0.005262826569378376, 0.009362843818962574, 0.025162732228636742, 0.0070312740281224251, 0.011405901052057743, 0.0058846226893365383, 0.0025078838225454092, 0.009296969510614872, 0.0066953054629266262, 0.0039479490369558334, 0.009955129586160183, 0.01359048206359148, 0.0028423750773072243, 0.0060966992750763893, 0.0081109926104545593, 0.0090653896331787109, 0.002784971846267581, 0.0080758053809404373, 0.0028915712609887123, 0.0032272553071379662, 0.011835703626275063, 0.0076679601334035397, 0.0086906226351857185, 0.012090760283172131, 0.0039321817457675934, 0.0040077231824398041, 0.011120312847197056, 0.0054596047848463058, 0.012559394352138042, 0.007445682305842638, 0.0071732271462678909, 0.0024642231874167919, 0.0018696340266615152, 0.004042881540954113, 0.0076757627539336681, 0.0098968697711825371, 0.0045110578648746014, 0.010192464105784893, 0.0027010370977222919, 0.0048042335547506809, 0.0036261384375393391, 0.019194658845663071, 0.01509985513985157, 0.0044356309808790684, 0.016896545886993408, 0.0017254288541153073, 0.0066198632121086121, 0.0048730508424341679, 0.0093536917120218277, 0.0097203003242611885, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { -378, 1566, 5592, 24335, 10799, -4258, -5721, 12297, 54591, -4700, 22377, 5806, 7278, 14975, 33020, 3484, 2071, 6405, 11244, 4716, -1797, -420, 7934, -3835, 6811, -591, 9955, 20306, 6396, 64928, 100857, 14861, 12317, -4644, 18982, 5782, 2339, 5719, 21444, -3815, 22730, 5928, 42611, -6844, 27775, 5580, 8729, 19005, 118180, 7946, -1058, 6454, -1729, -1301, -4412, 3766, -1236, 19547, 7886, 7318, 7041, 12111, 8545, 8631, 10264, 8197, 7722, -4548, 12998, -7433, 2785, 14678, 8293, 1562, -8055, -5805, 7850, -389, 593, -2518, 17713, 11314, 4248, 11613, 7607, 121, 7928, 70736, 9947, 15955, 10737, 131, 10177, 4119, 7527, 1252, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00017424930410925299, 0.00029696652200073004, 0.00026249649818055332, 0.0001007540849968791, 0.00023922280524857342, 0.00022587839339394122, 0.00018999476742465049, 0.00014139189443085343, 4.6678000217070803e-05, 0.00024039037816692144, 0.00012767681619152427, 0.0001426484523108229, 0.00013068715634290129, 0.00014619083958677948, 7.571994501631707e-05, 0.00022237838129512966, 0.00018692578305490315, 0.00018845596059691161, 0.00017959062824957073, 0.00020659601432271302, 0.00020465017587412149, 0.00038213693187572062, 0.00023270948440767825, 0.00030337279895320535, 0.00036932356306351721, 0.00026268002693541348, 0.00022831591195426881, 8.2218241004738957e-05, 0.00019174125918652862, 5.4561620345339179e-05, 2.9481379897333682e-05, 0.00016534779570065439, 0.00013947294792160392, 0.00010130442387890071, 0.00010836040019057691, 0.00011866824206663296, 0.00016282153956126422, 0.000228070595767349, 0.00012174861331004649, 0.00026880335644818842, 9.0983223344665021e-05, 0.00017299586033914238, 6.107774970587343e-05, 0.00019611245079431683, 0.00011581314902286977, 0.00026274516130797565, 0.00019161467207595706, 0.00015131407417356968, 3.6729765270138159e-05, 0.00016769913781899959, 0.0001883176009869203, 0.00023850165598560125, 0.00045653356937691569, 0.00020709939417429268, 0.00023514789063483477, 0.00024102107272483408, 0.00024084940378088504, 8.4048049757257104e-05, 0.00032205646857619286, 0.00018138108134735376, 0.00024493227829225361, 0.00011473034101072699, 0.00015506947238463908, 0.0001331436651526019, 0.00019180355593562126, 0.00024872523499652743, 0.00016180887178052217, 0.00026614783564582467, 0.00014950115291867405, 0.00013448820391204208, 0.00028348230989649892, 0.00011290080146864057, 0.00021853137877769768, 0.00034087104722857475, 0.0001787021174095571, 0.0002492662169970572, 0.00021951740200165659, 0.00025216012727469206, 0.00037680397508665919, 0.00018127144721802324, 0.00010502117947908118, 0.00014048961747903377, 0.00020474653865676373, 0.00017106228915508837, 0.00016326799232047051, 0.00028773944359272718, 0.00025623213150538504, 5.1683862693607807e-05, 0.00014620265574194491, 0.0001445431262254715, 0.00011887926666531712, 0.00030393569613806903, 0.00017788191325962543, 0.00034768431214615703, 0.00016185780987143517, 0.00025928698596544564, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -80,82,-35,33,18,21,32,1,54,-66,-82,-42,41,-80,20,-127, 
  /* [1][0][][] */ 26,121,-16,-18,30,-83,71,-90,-33,93,54,-76,127,-62,-6,-33, 
  /* [2][0][][] */ -80,-6,-76,-36,6,-44,-20,-9,-51,-4,29,11,-11,-37,48,-127, 
  /* [3][0][][] */ 108,-57,60,-45,-34,123,34,-12,-29,127,-51,-28,37,34,48,-57, 
  /* [4][0][][] */ 103,28,127,43,26,31,-28,-102,-11,56,45,39,75,114,-68,74, 
  /* [5][0][][] */ 7,-69,33,-49,41,-8,11,19,-61,127,99,26,-44,78,-40,0, 
  /* [6][0][][] */ 16,7,124,73,-35,-5,-101,-127,-62,-107,10,-7,80,6,-89,-78, 
  /* [7][0][][] */ 23,121,77,-46,30,37,4,-33,-127,-43,5,-93,93,-21,11,-29, 
  /* [8][0][][] */ 18,127,77,56,-38,71,-15,28,-88,-19,1,25,-13,30,-98,-46, 
  /* [9][0][][] */ 61,-29,17,127,117,-55,-84,-5,72,20,63,112,-45,-63,-110,26, 
  /* [10][0][][] */ -39,81,51,48,-116,24,-8,102,37,-22,36,-31,-1,127,46,-21, 
  /* [11][0][][] */ 10,-66,-73,-127,75,-22,-79,42,84,-38,0,-27,-74,-55,54,48, 
  /* [12][0][][] */ -20,-2,96,7,-27,82,-71,-3,-70,-89,-28,-11,52,127,81,-14, 
  /* [13][0][][] */ -127,-16,-38,29,-25,16,41,-20,61,-83,37,-25,28,103,53,20, 
  /* [14][0][][] */ -21,-42,58,-11,73,45,-27,60,67,69,-30,-38,-28,6,0,127, 
  /* [15][0][][] */ -28,-7,-9,39,0,15,77,21,-32,-127,5,-40,9,-20,31,-36, 
  /* [16][0][][] */ 27,-127,-73,10,-20,5,44,-38,96,56,58,-69,-16,43,116,62, 
  /* [17][0][][] */ -71,-42,36,90,104,-5,69,-100,-22,85,-1,23,-127,82,23,0, 
  /* [18][0][][] */ 17,5,-1,36,-61,26,27,-14,-30,56,-62,-14,-34,-41,112,-127, 
  /* [19][0][][] */ 64,12,7,-127,115,-123,-40,26,60,21,15,-38,41,-15,-71,53, 
  /* [20][0][][] */ 46,-91,33,-65,35,33,-97,-26,66,19,69,-23,35,37,-8,127, 
  /* [21][0][][] */ 48,-60,-35,-48,12,-15,-38,-109,-109,127,90,26,-37,68,119,-40, 
  /* [22][0][][] */ 39,-33,0,-64,-55,-89,7,19,-127,-63,33,20,-35,-14,-42,-8, 
  /* [23][0][][] */ -1,25,66,15,-7,2,-47,24,-3,27,23,24,127,11,4,10, 
  /* [24][0][][] */ 54,14,-27,-103,-18,-88,94,-21,4,92,-13,-81,-31,-127,3,34, 
  /* [25][0][][] */ -89,42,-4,77,53,-40,-127,-26,-42,35,-40,94,-59,-14,-91,1, 
  /* [26][0][][] */ 44,35,88,-10,35,100,32,-46,5,-66,127,-2,74,52,-1,-19, 
  /* [27][0][][] */ 127,30,55,-33,-1,-34,28,-11,9,-4,-49,22,54,-35,-95,103, 
  /* [28][0][][] */ 25,44,-73,-127,-18,-38,52,5,42,64,-125,18,15,-83,20,105, 
  /* [29][0][][] */ -88,71,28,95,94,48,-17,-8,-48,-70,-127,-10,27,-66,-76,-28, 
  /* [30][0][][] */ 25,-70,94,25,62,127,-125,111,-32,-121,-20,7,-50,-89,-122,115, 
  /* [31][0][][] */ 31,0,14,-22,32,-23,4,-28,34,44,87,15,45,35,20,127, 
  /* [32][0][][] */ -34,-64,-21,35,-127,65,-31,44,-3,-39,15,54,11,105,26,85, 
  /* [33][0][][] */ 93,-65,-74,-64,71,-81,66,-99,-98,127,101,-43,-23,-44,77,68, 
  /* [34][0][][] */ 48,127,-22,8,114,-101,-97,-34,-40,106,0,-50,-8,-42,25,60, 
  /* [35][0][][] */ 96,4,47,23,12,-84,16,-46,16,39,-50,89,43,18,-127,96, 
  /* [36][0][][] */ -78,94,0,4,108,32,-122,42,85,-46,-11,-23,61,48,-127,51, 
  /* [37][0][][] */ 23,-37,-9,-13,2,98,60,-127,-12,9,35,54,8,15,61,-75, 
  /* [38][0][][] */ -84,62,-18,5,114,62,-59,37,127,-36,99,-48,56,46,-5,40, 
  /* [39][0][][] */ -6,29,-24,-1,3,41,-106,21,-54,1,-127,-34,-83,-74,7,-105, 
  /* [40][0][][] */ 59,105,8,86,-47,-41,1,64,8,-68,-46,24,71,55,-127,91, 
  /* [41][0][][] */ 49,25,-13,-5,-68,39,60,5,-49,18,-93,-38,-63,0,60,-127, 
  /* [42][0][][] */ -14,39,-49,-31,-10,118,-29,36,32,-103,86,-33,127,55,16,69, 
  /* [43][0][][] */ 23,-80,12,15,37,-108,-60,-127,-69,-23,-11,-14,-33,-38,-39,34, 
  /* [44][0][][] */ -27,-62,14,21,-18,-8,5,5,127,-33,34,3,28,106,1,62, 
  /* [45][0][][] */ -30,-49,23,-14,32,-11,-48,77,14,-21,-45,-48,12,43,-10,127, 
  /* [46][0][][] */ -127,-14,-29,51,-60,12,43,-44,17,-20,15,-45,18,41,21,-45, 
  /* [47][0][][] */ 7,28,-127,-11,-92,80,1,91,16,43,-33,51,-103,-64,-27,-70, 
  /* [48][0][][] */ -38,106,40,-71,112,-69,-70,12,106,-127,6,-116,79,-16,-6,70, 
  /* [49][0][][] */ -76,106,-32,19,-58,29,24,89,28,-14,-127,18,-4,-63,-74,-44, 
  /* [50][0][][] */ 10,-39,-11,-101,25,0,-7,39,127,-39,0,11,-25,-18,-63,57, 
  /* [51][0][][] */ -35,-29,63,43,-75,3,-84,-127,-30,-69,-35,46,-23,-9,5,-58, 
  /* [52][0][][] */ -53,61,40,9,127,44,-56,2,5,48,15,14,76,83,-6,-3, 
  /* [53][0][][] */ -39,106,15,-59,-5,58,12,53,-11,-73,-71,10,60,-57,-127,-27, 
  /* [54][0][][] */ -127,36,-18,101,109,-56,51,-87,122,71,31,-50,12,62,-49,-96, 
  /* [55][0][][] */ -25,46,3,24,54,-127,-32,-44,-56,-62,25,-111,3,-26,12,20, 
  /* [56][0][][] */ -44,-18,3,-32,39,34,32,36,127,-23,27,18,-7,51,71,33, 
  /* [57][0][][] */ -56,112,-3,-15,-49,106,127,107,-56,-33,13,-30,47,-25,-27,-61, 
  /* [58][0][][] */ 127,64,60,-72,74,72,19,38,37,-29,4,-39,46,59,-18,117, 
  /* [59][0][][] */ 43,-7,85,-47,-37,-44,32,29,23,19,82,85,20,46,-127,89, 
  /* [60][0][][] */ 27,6,21,-90,16,127,-19,-60,-57,-4,-26,-71,77,-23,99,-50, 
  /* [61][0][][] */ -7,33,-30,-22,6,18,-14,127,46,23,-113,19,19,-78,-37,26, 
  /* [62][0][][] */ 71,-65,37,-50,88,-13,-127,-110,-53,15,-48,-77,24,-110,36,4, 
  /* [63][0][][] */ 19,-4,-19,-95,127,37,-50,-42,50,65,-42,-42,70,-28,-61,-35, 
  /* [64][0][][] */ 80,50,48,-21,116,-73,-94,-127,-93,-40,3,13,119,-6,-118,59, 
  /* [65][0][][] */ -127,-56,-21,-44,-23,15,-23,-28,-63,41,-22,67,-22,-1,59,-121, 
  /* [66][0][][] */ -25,40,115,-7,-33,72,-77,83,96,20,-44,-66,93,127,-18,102, 
  /* [67][0][][] */ 50,-33,1,2,-33,-127,-63,7,-36,-12,-34,35,-88,9,-78,53, 
  /* [68][0][][] */ -47,-45,-49,8,-39,-31,102,-42,29,-55,127,-15,17,75,29,25, 
  /* [69][0][][] */ 1,87,-79,-78,-5,17,33,63,51,-26,-50,3,34,-91,-127,-60, 
  /* [70][0][][] */ 21,35,43,48,15,6,127,-37,-1,64,14,103,-19,69,76,-7, 
  /* [71][0][][] */ -4,-99,85,-72,41,61,-82,-30,-64,-127,-34,-33,103,-38,42,9, 
  /* [72][0][][] */ 32,42,37,127,24,-26,14,-70,75,-10,-43,-35,13,-19,-19,49, 
  /* [73][0][][] */ -46,-39,-43,8,-18,4,-18,29,35,-24,-34,-45,46,-37,127,47, 
  /* [74][0][][] */ -13,113,31,18,-14,102,-34,76,-127,-109,-49,-37,61,-16,6,-17, 
  /* [75][0][][] */ -41,94,-67,-37,-3,127,60,75,33,-20,-45,-61,-69,13,-7,-29, 
  /* [76][0][][] */ 46,40,33,-47,127,20,-118,-38,16,42,-76,-84,55,1,50,60, 
  /* [77][0][][] */ -26,-44,3,14,-25,40,-8,-36,127,31,-31,57,-22,51,58,-77, 
  /* [78][0][][] */ 4,-72,74,90,31,38,48,123,-3,-93,-64,127,15,-37,-38,86, 
  /* [79][0][][] */ 17,-16,-55,-29,45,-10,127,-5,70,64,1,7,-106,-107,68,-127, 
  /* [80][0][][] */ -127,-66,70,23,21,31,8,-53,1,-67,5,-40,35,117,-21,-40, 
  /* [81][0][][] */ -3,-104,31,-6,72,96,-69,-29,11,-127,4,-20,25,15,21,-13, 
  /* [82][0][][] */ 26,0,-63,-127,61,27,-15,2,-13,-14,-29,-36,-26,-36,-8,26, 
  /* [83][0][][] */ 30,-2,-3,-50,-1,-5,-54,-33,-76,39,-13,-127,53,-110,75,-16, 
  /* [84][0][][] */ 26,126,-12,39,-114,12,35,127,27,-46,122,-106,-22,39,45,-58, 
  /* [85][0][][] */ -7,16,5,-38,54,13,-45,127,-92,-78,-47,-21,20,33,53,-95, 
  /* [86][0][][] */ 82,-69,44,13,-29,64,-34,18,118,-48,-68,4,-31,-40,-26,127, 
  /* [87][0][][] */ 127,-73,16,-44,36,-43,-67,-27,-4,59,-56,66,-19,8,-61,32, 
  /* [88][0][][] */ -9,-36,-10,19,6,-30,-10,-36,35,-31,45,-39,22,21,127,-25, 
  /* [89][0][][] */ -5,64,-56,3,-94,-54,-73,36,51,16,-127,-10,-33,-46,-91,-37, 
  /* [90][0][][] */ -81,54,99,6,-61,4,40,5,89,-78,32,-13,100,51,-127,17, 
  /* [91][0][][] */ 67,24,-47,-127,19,30,21,48,0,40,64,73,-20,-68,-22,51, 
  /* [92][0][][] */ -12,-38,4,37,10,24,-11,-127,8,-44,33,-51,-29,-24,59,24, 
  /* [93][0][][] */ 16,-8,55,27,-19,-10,30,1,-12,-3,127,37,-18,32,46,7, 
  /* [94][0][][] */ -72,-5,-12,71,87,-127,-21,-84,46,30,84,-12,36,66,63,47, 
  /* [95][0][][] */ 22,-10,-20,-127,-64,31,2,90,-28,-60,-21,61,27,-13,-54,-5, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00056131801102310419, 0.00095663312822580338, 0.00084559310926124454, 0.00032456417102366686, 0.00077062036143615842, 0.00072763336356729269, 0.00061203964287415147, 0.00045547276386059821, 0.00015036617696750909, 0.00077438156586140394, 0.00041129172313958406, 0.00045952058280818164, 0.00042098906124010682, 0.00047093184548430145, 0.00024392045452259481, 0.00071635859785601497, 0.0006021533627063036, 0.00060708262026309967, 0.00057852425379678607, 0.00066551804775372148, 0.00065924983937293291, 0.0012309968005865812, 0.00074963871156796813, 0.00097726995591074228, 0.0011897204676643014, 0.00084618432447314262, 0.00073548546060919762, 0.00026485373382456601, 0.00061766570433974266, 0.00017576207756064832, 9.4969844212755561e-05, 0.00053264311281964183, 0.00044929119758307934, 0.00032633700175210834, 0.00034906677319668233, 0.00038227194454520941, 0.00052450515795499086, 0.00073469523340463638, 0.00039219489553943276, 0.00086590967839583755, 0.00029308881494216621, 0.00055728020379319787, 0.00019675280782394111, 0.00063174683600664139, 0.00037307469756342471, 0.00084639410488307476, 0.00061725790146738291, 0.00048743557999841869, 0.000118319432658609, 0.00054021761752665043, 0.00060663692420348525, 0.00076829729368910193, 0.0014706543879583478, 0.00066713965497910976, 0.00075749366078525782, 0.00077641324605792761, 0.00077586021507158875, 0.0002707481908146292, 0.0010374565608799458, 0.00058429193450137973, 0.0007890125853009522, 0.00036958657437935472, 0.0004995330236852169, 0.0004289023345336318, 0.0006178664043545723, 0.00080123107181861997, 0.00052124302601441741, 0.00085735536413267255, 0.00048159551806747913, 0.00043323356658220291, 0.00091319577768445015, 0.00036369299050420523, 0.00070396607043221593, 0.0010980649385601282, 0.00057566206669434905, 0.00080297375097870827, 0.00070714240428060293, 0.00081229605711996555, 0.0012138175079599023, 0.00058393878862261772, 0.0003383099683560431, 0.00045256625162437558, 0.00065956026082858443, 0.00055105151841416955, 0.00052594335284084082, 0.00092690944438800216, 0.00082541338633745909, 0.00016649180906824768, 0.00047096994239836931, 0.00046562400530092418, 0.00038295172271318734, 0.00097908324096351862, 0.00057301990455016494, 0.0011200128355994821, 0.00052140065236017108, 0.00083525414811447263, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -20861, -6735, -13716, -10017, 18342, 1387, 5496, 3223, 17304, 3015, 18303, 18328, -1613, 17636, 19943, 4490, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00019797871937043965, 0.00028576326440088451, 0.0001354417618131265, 0.00012166596570750698, 0.00028695663786493242, 0.0002619827282615006, 0.00015483834431506693, 0.00025771200307644904, 0.00024697947083041072, 0.00018963837646879256, 0.00014441632083617151, 0.00031127606052905321, 0.00018208663095720112, 0.00019494221487548202, 0.00046228934661485255, 0.00030857961974106729, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 21,49,-7,35,18,42,-15,-39,72,-10,25,67,23,-15,-4,124,-114,-8,-60,15,76,-79,58,-47,-11,-19,28,-67,29,26,29,35,127,-59,-11,-48,-13,21,21,-29,-22,10,-20,-21,58,-3,-45,9,31,-32,-25,17,-11,-23,7,84,12,93,37,-46,-35,-15,-32,27,36,-13,111,1,-27,34,-33,-45,-24,65,41,-18,-30,-110,43,-35,75,27,3,-45,125,-16,28,-26,-18,-25,49,45,-28,41,66,93, 
  /* [1][0][][] */ 37,-26,34,1,24,-55,-50,-71,63,-73,35,2,4,-14,-10,62,-93,-27,62,-19,-50,-8,-19,23,96,-8,-39,56,2,-50,4,45,12,35,34,-15,-15,62,-79,-13,-12,15,22,-20,-14,33,1,-28,14,-23,-35,14,-6,-10,6,25,-21,-16,-35,-42,7,-25,-82,-33,0,-56,23,18,12,-4,-51,7,18,0,-15,19,-55,51,11,-19,-6,58,-23,9,-2,11,12,127,11,33,79,9,-14,-75,-12,-33, 
  /* [2][0][][] */ 3,50,5,-26,-1,6,26,44,127,-21,114,50,0,8,51,100,-113,65,-73,-30,-5,-84,112,-47,27,17,-1,42,41,62,93,-25,18,-28,-5,43,-15,125,-68,-26,20,-17,-3,29,10,67,-43,-11,-16,42,-80,-28,2,-11,6,11,-19,20,-11,30,-18,-13,22,62,-8,-20,49,-46,17,18,-97,2,-18,62,7,24,-3,3,67,20,19,47,4,-7,35,19,13,52,20,78,58,-28,-80,10,-20,61, 
  /* [3][0][][] */ -9,22,15,15,49,-29,-87,37,66,11,63,-37,-39,5,40,65,30,-8,-20,27,32,-11,9,2,21,-12,-44,13,69,-16,104,-25,13,48,-28,26,-48,31,48,-10,22,-14,15,-19,-11,-62,54,25,-127,7,3,25,-29,-22,11,-30,12,33,11,55,24,20,50,24,-13,-38,-53,45,2,24,-37,66,-1,10,13,11,-5,-13,43,-13,46,-28,12,-38,-10,75,15,65,8,98,51,47,28,33,28,-20, 
  /* [4][0][][] */ 9,-3,25,-28,10,9,23,12,60,-23,-60,-12,29,31,10,66,11,12,-17,15,-17,16,52,23,-17,26,-12,35,45,-15,37,-6,29,-51,38,-48,66,9,-111,-9,-18,88,-62,-8,60,-9,-63,-37,13,80,-59,-8,-16,-16,53,79,27,-69,36,5,-4,4,-74,-9,-16,-54,-13,26,16,0,-2,-34,-27,20,16,-15,-45,10,29,17,-22,36,96,-45,-7,-29,6,53,53,75,21,26,-127,29,-59,18, 
  /* [5][0][][] */ 10,-1,9,-17,1,-40,7,127,28,-14,49,-62,-31,3,32,25,-56,14,17,-29,-37,-53,17,-7,13,10,0,78,54,-14,8,40,-76,102,-24,8,-59,10,4,-2,32,-41,13,-1,-3,-2,26,-13,14,42,-8,28,-31,10,-60,-48,-67,-38,-23,25,-32,13,-18,-30,0,29,-57,-40,13,17,-12,21,0,-1,15,19,-9,9,27,33,3,-6,31,25,25,77,42,53,22,20,21,-19,-41,-15,-8,-46, 
  /* [6][0][][] */ 2,-33,40,-16,56,-12,18,12,-29,-42,-38,25,-16,-36,-39,-123,32,-44,2,38,-28,76,-44,72,34,-45,-25,74,-38,-51,-7,2,-49,91,-20,-18,-63,18,35,26,-23,5,-16,36,4,-22,92,-88,-7,27,118,15,-24,6,-22,-82,3,2,12,-21,46,15,-33,4,-38,58,10,9,-3,-37,10,-3,-13,21,31,33,-67,19,-40,18,-9,107,74,12,-17,51,17,-5,53,-112,21,29,59,40,127,-26, 
  /* [7][0][][] */ 16,-18,2,-12,27,-4,26,3,29,-40,-21,-50,-60,-47,50,51,6,-44,0,-15,-5,-20,-46,-31,-53,-3,-40,3,48,-9,-16,-13,-68,55,-8,16,-29,-20,17,9,15,-28,-10,4,-11,16,-35,-9,24,14,31,-2,-21,15,-31,-127,-16,-41,-27,7,-18,-13,0,-3,30,53,-31,-49,16,25,17,62,22,0,6,-11,7,-25,18,-2,-12,6,4,13,-45,93,10,46,-5,-7,-6,7,-9,12,-23,-1, 
  /* [8][0][][] */ -26,-20,-79,2,7,11,10,5,-17,46,-81,-31,3,18,31,-43,127,24,-39,4,-26,37,-24,21,-95,15,-28,-36,15,-7,6,13,13,7,58,9,17,-53,-11,24,43,58,13,-25,-15,22,26,-37,27,18,30,-11,-18,41,41,-28,-39,-101,-36,10,-1,19,-20,-18,-28,-2,-56,7,-9,-5,53,30,21,0,11,-1,18,-37,-74,16,-10,-61,-77,14,-99,-25,21,-26,-6,-15,-43,-12,-6,12,-115,34, 
  /* [9][0][][] */ -9,-41,-5,-17,22,23,-21,-31,3,6,79,23,94,-19,66,-4,-127,23,17,23,-15,26,51,-9,8,18,74,-10,-57,-52,-24,25,-17,-17,-19,21,2,38,-92,-1,71,-17,-16,-60,21,-15,13,-83,-52,-49,31,41,-32,0,-8,74,-27,31,84,2,-13,-10,9,47,0,56,52,64,-29,-26,-71,-42,-15,-2,-16,43,2,-35,58,0,-35,-19,5,-37,-1,-19,-34,-18,-36,53,-4,0,-12,33,19,-18, 
  /* [10][0][][] */ 24,58,-15,-2,57,-69,-16,-19,8,84,-80,3,5,44,49,-86,48,32,-127,44,-41,74,57,30,-67,13,-26,53,-7,62,6,41,-50,-32,31,-7,32,-4,-49,-15,11,91,34,-7,-12,126,-12,-30,-104,9,-50,-32,3,-33,19,17,17,26,-24,34,-17,29,9,60,18,84,82,85,24,16,53,56,-33,18,-12,47,3,-37,60,14,33,60,-76,-15,26,-81,65,-33,-17,26,4,3,59,53,-48,-51, 
  /* [11][0][][] */ 53,32,11,0,11,37,29,50,15,-21,25,12,-20,21,44,14,12,49,-127,-8,13,-16,64,-12,-28,-34,-24,-19,16,15,33,0,27,36,-4,79,-51,10,38,9,39,27,53,-32,17,37,15,-14,-119,50,-15,-14,9,3,-28,-77,0,12,44,12,-4,-3,16,-26,-41,42,5,4,13,-38,49,35,-72,24,37,11,18,-30,-34,-8,17,-38,32,18,-59,-3,-50,-51,24,50,-36,11,-4,13,15,20, 
  /* [12][0][][] */ -56,-1,-24,-19,-49,2,26,-50,69,-12,-83,-1,41,-25,-68,-1,-79,43,-10,0,29,32,15,-103,42,6,-5,9,-74,112,29,-45,-14,-31,-26,-6,45,-29,-60,5,-43,15,5,-27,22,67,-97,8,41,-34,-50,-27,7,-5,-25,109,57,-78,19,10,1,-67,-35,7,-30,-48,7,-1,-26,-16,-28,-99,40,-55,-49,-10,50,-1,52,-66,-22,-1,66,73,62,5,-15,-14,11,30,127,0,-9,-84,-33,13, 
  /* [13][0][][] */ 12,-61,-67,-16,-47,-14,26,18,-61,30,16,-13,-56,-11,37,-95,4,-11,-45,29,-30,41,62,67,-18,53,-33,35,-59,8,-1,14,-100,1,-11,104,-42,1,-21,12,72,48,35,57,-23,117,-7,-127,-50,0,-19,-17,-21,-22,-12,-75,-24,-2,-73,36,-42,46,41,-32,-3,50,1,-30,-14,-36,-21,-35,19,29,-22,88,-9,-66,35,-22,-12,-52,-79,29,-33,1,31,56,18,25,22,-31,18,17,-59,21, 
  /* [14][0][][] */ -69,-50,-39,31,-32,-63,-36,-16,-77,1,69,-2,16,12,-6,-54,-14,47,44,22,-15,38,95,-11,-53,26,71,-8,-61,-34,-43,-23,-23,0,-43,-44,-10,46,-37,5,48,41,38,-28,-7,70,65,51,-92,56,53,-17,-43,-1,-54,18,-29,-64,37,44,12,65,69,52,23,-3,-21,42,-44,-41,-66,-95,-47,-59,-56,71,-14,17,127,-31,2,-39,47,27,96,4,69,-9,11,-13,90,-14,-42,-13,-44,-23, 
  /* [15][0][][] */ 8,-25,-29,-12,1,24,69,-17,-6,49,-127,-25,-48,1,3,14,50,29,-15,10,-15,17,-1,41,-39,18,-22,52,3,72,1,-32,7,-98,0,18,41,-45,-17,-63,11,50,-18,15,11,76,-67,-82,47,-29,-83,-5,22,-66,10,-10,-9,-59,-13,8,-95,12,-20,-4,21,24,-18,48,-17,26,0,-14,27,30,-4,31,7,-77,38,-7,12,18,-27,25,-49,-60,15,-8,11,-4,10,-38,-27,10,-64,34, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0084140952676534653, 0.012144939042627811, 0.0057562747970223427, 0.0051708035171031952, 0.012195657007396221, 0.011134265922009945, 0.0065806293860077858, 0.010952760465443134, 0.010496627539396286, 0.0080596311017870903, 0.0061376937665045261, 0.013229232281446457, 0.0077386815100908279, 0.0082850437611341476, 0.019647296518087387, 0.013114633038640022, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 17423, -12890, 2240, 111370, -785, -8983, -15805, 1455, -7265, -6000, -2634, -6121, 861, -8108, 7693, -6695, -2857, 18824, 32311, 1559, 9039, -7217, -4071, 1825, 27451, 2632, 2663, -5623, -9828, -8986, 4445, -9248, 3046, -3669, -7087, 8307, 2737, 927, 14850, 2790, -10579, 1675, -8502, -11183, -10698, 54345, -3865, 23926, 35970, -15333, -1562, 9360, 2419, -2566, 1390, -7163, -16496, 2280, 4513, -13153, -9659, 1241, -21424, -3094, 1967, 23923, 35765, 67668, -14236, 2391, -14899, -1613, 115805, 6260, -2806, 639, 10619, 53522, -1842, -13494, 1297, -5247, -567, -6304, 815, -6767, 5777, -1884, -91, -4115, 338, -2891, 727, -1726, 2763, 72136, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00014046028081793338, 8.1209946074523032e-05, 0.00020645583572331816, 2.0428273273864761e-05, 0.00011775696475524455, 0.00021414071670733392, 0.00030749899451620877, 9.137207962339744e-05, 0.00010017990280175582, 0.0003485966008156538, 0.00039627100341022015, 0.00020932689949404448, 7.9960802395362407e-05, 0.00042075759847648442, 0.00019429353415034711, 0.00014016150089446455, 0.0001522494712844491, 0.00026457637432031333, 6.5749656641855836e-05, 0.00016151214367710054, 3.094407293247059e-05, 0.0001494114549132064, 0.0001599213428562507, 0.00031394272809848189, 0.00016127126582432538, 0.00011703297786880285, 0.00015975788119249046, 0.00016250803309958428, 6.5123778767883778e-05, 0.00010841398034244776, 0.00012182477803435177, 0.00010493918671272695, 0.00017220956215169281, 0.0001410239638062194, 0.00014644164184574038, 0.00014704841305501759, 0.00039347598794847727, 0.00011557519610505551, 0.00010255236702505499, 8.8862230768427253e-05, 0.00014304039359558374, 0.0003447596391197294, 0.00034183156094513834, 0.00013753505481872708, 0.00013203101116232574, 6.7285211116541177e-05, 0.0001950119185494259, 0.00015844956215005368, 8.0478137533646077e-05, 0.00012210948625579476, 0.00019914115546271205, 6.1911450757179409e-05, 0.00012855239037889987, 0.00021197117166593671, 0.00020362476061563939, 0.00023321520711760968, 0.00024000497069209814, 0.00032627250766381621, 0.0001108314172597602, 7.1365087933372706e-05, 0.00026969242026098073, 0.00013528879208024591, 0.00018298636132385582, 0.00010751841909950599, 7.2714734415058047e-05, 0.00014102818386163563, 9.7805197583511472e-05, 3.7488633097382262e-05, 0.0002652122057043016, 0.00014302143245004117, 0.00025772594381123781, 7.0086396590340883e-05, 4.7117253416217864e-05, 0.00011767593969125301, 9.5631963631603867e-05, 0.00022485140652861446, 0.00027362591936253011, 5.4065592848928645e-05, 0.00025522746727801859, 0.0001677936379564926, 0.00011557716788956895, 0.0003805240266956389, 0.00016207962471526116, 6.5788997744675726e-05, 0.0001823807688197121, 0.0001109258591895923, 0.00010289509373251349, 0.00036338972859084606, 0.00014984073641244322, 0.00011057857045670971, 0.00017371027206536382, 8.3394341345410794e-05, 0.00013614862109534442, 0.0004443154321052134, 0.00027879441040568054, 6.0649665101664141e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -20,30,-16,110,-18,41,-53,-75,25,-13,127,0,-6,-9,-5,57,-15,13,-114,12,76,43,35,-52,2,5,44,48,32,25,16,66,9,50,1,-8,-3,27,-54,-26,48,-7,21,7,-84,-23,37,-11,-22,-56,10,-11,67,8,-15,-4,10,-65,61,-12,41,-24,127,30,-8,-18,-11,-50,64,37,-6,7,73,-2,60,0,19,-127,22,68,-12,41,108,-18,7,43,-41,-4,38,19,-23,85,10,1,-11,19, -63,24,0,21,49,15,-2,-127,44,25,-127,7,-12,-14,-2,49,16,-27,-55,-26,79,-126,127,20,-72,-64,-101,6,21,65,-50,25,86,12,-4,11,-25,127,-16,-127,35,-29,-30,6,52,-127,127,-59,-81,43,57,3,50,-69,12,86,44,47,-127,97,127,21,-8,-20,38,-46,-113,-16,44,-29,3,47,-60,-47,122,-1,-28,-67,-26,64,-97,56,-28,23,1,45,17,-42,-36,82,-22,56,-115,-42,26,-127, -3,22,-21,-63,6,38,52,-25,3,-2,113,67,3,-11,-20,24,-13,15,-59,10,37,21,31,-41,-2,-69,-19,29,-16,36,40,-101,1,47,26,-18,-4,38,32,-22,47,-1,-17,-6,38,-42,41,-2,-7,24,7,-3,29,10,-27,25,4,35,-19,-4,9,-29,21,-21,-50,-28,-7,-51,-81,-16,23,-24,-127,-32,-15,17,25,-13,-1,31,-14,69,-15,0,-41,21,9,2,-14,-4,30,-3,-11,12,-10,-41, 
  /* [0][1][][] */ -40,87,-16,39,-88,-4,-5,-32,50,114,-44,-5,-37,-24,-13,108,127,-24,-119,-12,81,-127,-20,5,-47,-63,-127,18,80,28,-41,31,-127,-95,-73,12,58,-4,-106,37,-9,70,-6,-4,42,-13,-18,-45,127,73,-15,16,57,18,-66,15,46,18,-122,127,-6,-94,35,127,-76,-52,-88,114,-37,127,-24,103,-17,-59,30,21,-36,-96,127,53,127,87,10,5,127,39,-99,35,-44,-59,-120,39,41,99,28,-57, 127,127,127,127,-42,-127,127,33,127,-127,50,-127,-85,127,127,127,-9,-127,-50,-127,127,26,-46,127,127,127,-55,-127,127,127,-127,127,18,-127,-127,127,-127,-42,66,80,-127,-127,127,127,127,-101,-115,127,-24,127,-127,-127,-127,127,127,-127,127,-127,-60,50,-79,-27,-88,-68,125,127,-30,119,127,-119,-65,127,-44,127,-127,-127,-127,114,-54,127,-78,127,94,127,-42,-127,-42,-64,-127,-122,-36,-127,-8,-127,-127,106, -23,78,-37,4,127,72,-23,36,4,49,-41,-14,-30,-27,-25,23,-119,-19,-127,35,88,46,-10,-106,-43,-44,120,76,19,55,67,6,111,-73,118,1,60,-19,-127,13,47,21,-26,3,-31,-18,-8,-59,85,12,-15,35,4,5,-78,-23,32,41,101,-87,17,127,47,-32,-127,-31,-99,127,16,-15,127,50,-7,-57,-17,42,-39,-29,-50,8,-68,69,46,24,-100,24,127,-20,26,-28,127,-2,-127,51,66,31, 
  /* [0][2][][] */ -8,-39,-29,-64,-2,19,47,53,1,16,-44,53,18,-32,-12,-1,57,-4,2,34,-7,61,-16,-31,-25,-36,18,12,7,-16,52,-100,-42,99,-25,-33,43,-68,3,7,17,15,-29,21,27,-42,-22,-8,-25,19,9,-8,8,0,-53,13,16,54,-23,54,13,1,6,19,-10,-22,21,-116,-81,3,-1,13,-112,-41,-31,22,20,-27,66,37,17,8,-9,23,2,43,-14,-12,3,30,19,-8,33,45,9,-47, -37,-6,-36,17,-45,65,-18,71,15,5,58,-31,127,-4,-30,-12,14,-64,-52,20,-3,103,-44,-108,-69,-50,95,92,63,42,58,-13,-110,78,4,-31,-47,-43,-113,-15,77,-7,-17,40,-21,-69,-14,-61,-62,17,74,26,-8,-90,45,126,31,47,71,-53,15,-59,-10,-11,21,-45,-127,-87,-26,-47,-28,64,26,-43,-18,-15,-48,18,-46,23,50,66,37,30,15,85,-84,127,16,127,-21,-19,116,-21,56,49, -15,-25,-45,27,17,61,-49,39,6,21,-18,-4,11,-44,-6,-21,-48,-11,2,15,-63,24,-21,2,-14,41,-28,88,15,-28,43,9,5,33,34,-26,4,-47,-4,14,12,0,13,17,-85,-41,-12,-3,-7,-34,3,-4,-18,19,-30,-16,-4,-87,3,-22,-26,45,-19,-7,-18,-8,38,-93,54,6,57,-12,22,-70,-11,22,19,-24,-27,34,-36,44,127,-7,-7,75,38,-9,125,9,15,-7,29,-13,12,-65, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0059695616364479065, 0.0034514225553721189, 0.0087743727490305901, 0.00086820160504430532, 0.005004670936614275, 0.0091009801253676414, 0.013068706728518009, 0.00388331338763237, 0.0042576459236443043, 0.014815354719758034, 0.016841517761349678, 0.0088963927701115608, 0.0033983339089900255, 0.017882198095321655, 0.0082574747502803802, 0.0059568635188043118, 0.0064706024713814259, 0.011244495399296284, 0.002794360276311636, 0.0068642660044133663, 0.0013151230523362756, 0.0063499868847429752, 0.006796657107770443, 0.013342565856873989, 0.0068540284410119057, 0.0049739014357328415, 0.0067897099070250988, 0.0069065913558006287, 0.0027677605394273996, 0.0046075941063463688, 0.0051775528118014336, 0.004459915217012167, 0.0073189064860343933, 0.0059935185126960278, 0.0062237693928182125, 0.0062495577149093151, 0.016722729429602623, 0.0049119456671178341, 0.0043584755621850491, 0.0037766448222100735, 0.0060792164877057076, 0.014652283862233162, 0.014527840539813042, 0.0058452398516237736, 0.0056113176979124546, 0.0028596215415745974, 0.0082880062982439995, 0.0067341062240302563, 0.0034203208051621914, 0.0051896530203521252, 0.0084634991362690926, 0.0026312365662306547, 0.0054634762927889824, 0.009008774533867836, 0.0086540523916482925, 0.0099116461351513863, 0.010200210846960545, 0.01386658102273941, 0.0047103352844715118, 0.0030330161098390818, 0.011461927555501461, 0.0057497736997902393, 0.0077769202180206776, 0.0045695328153669834, 0.0030903762672096491, 0.0059936977922916412, 0.0041567208245396614, 0.0015932668466120958, 0.011271518655121326, 0.0060784108936786652, 0.01095335278660059, 0.002978671807795763, 0.0020024832338094711, 0.0050012273713946342, 0.0040643583051860332, 0.0095561845228075981, 0.011629100888967514, 0.002297787694260478, 0.010847167111933231, 0.0071312296204268932, 0.0049120294861495495, 0.016172271221876144, 0.0068883839994668961, 0.0027960324659943581, 0.0077511826530098915, 0.0047143488191068172, 0.0043730414472520351, 0.015444062650203705, 0.0063682310283184052, 0.0046995892189443111, 0.0073826867155730724, 0.0035442595835775137, 0.0057863160036504269, 0.01888340525329113, 0.011848761700093746, 0.0025776107795536518, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 23496, 1163, 18176, -1569, 7114, 18190, 24157, 9424, -2310, 9921, 23438, 2770, 8388, 29570, -1338, -5084, 10022, 24568, 620, -3149, -2927, 13477, 9556, 6900, 13871, 13364, 15823, 1039, -1722, 2550, 4056, 16450, 18620, 2187, 9755, -1668, 28737, 13846, 377, 3467, 1325, 15356, 13872, 6478, 6110, 21738, 14606, 12905, 4651, 3008, -641, -942, 75167, 11638, 14698, 7851, -249, 21258, 6567, 6394, 23370, 11285, 4182, 13427, 6217, 4682, 23086, -365, 42452, 4925, 12714, -2258, -925, 2171, 604, 3225, 13929, 22593, 11765, -3020, 9676, -6333, -3571, 1281, 8352, 5280, 11416, 327, 55868, 2367, 11192, 15604, 17283, 26498, -7879, 21115, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00012179627810837701, 0.00011892944894498214, 8.9400957222096622e-05, 0.00052327045705169439, 0.00022950413404032588, 7.4858602602034807e-05, 0.00013028233661316335, 0.00036829835153184831, 0.00018505984917283058, 0.00016922068607527763, 7.6711294241249561e-05, 0.00022086412354838103, 0.00029736763099208474, 0.00015121705655474216, 0.00017212204693350941, 0.00017691591347102076, 0.0001708191994111985, 9.6211617346853018e-05, 0.00022493716096505523, 0.00018969450320582837, 0.00017168608610518277, 0.00018615159206092358, 0.00015586652443744242, 0.00013644299178849906, 0.0001286002661800012, 0.00018832371279131621, 0.00011818304483313113, 0.00020621226576622576, 0.00027274235617369413, 0.00013449457765091211, 0.00018274752073921263, 0.00011473242193460464, 0.00010322433081455529, 0.00024495064280927181, 0.00018968249787576497, 0.00032438212656415999, 7.8848403063602746e-05, 0.00017984988517127931, 0.00037540591438300908, 0.00027648964896798134, 0.00034592312294989824, 0.00010382988693891093, 0.00016036970191635191, 0.00013947681873105466, 0.00019620695093180984, 0.00014269165694713593, 0.00016202517144847661, 0.00012136211444158107, 0.0004421392222866416, 0.00020575069356709719, 0.00027613691054284573, 0.00086531200213357806, 4.0520339098293334e-05, 0.00015094566333573312, 0.00015555246500298381, 0.00017735257279127836, 0.00031584885437041521, 9.0181361883878708e-05, 0.00014927200390957296, 0.00026142699061892927, 7.8316363214980811e-05, 0.00015414426161441952, 0.00029763756901957095, 0.00020434460020624101, 0.00019035401055589318, 0.00024244512314908206, 9.8396762041375041e-05, 0.00029360494227148592, 6.8878092861268669e-05, 0.00020204581960570067, 0.0001447391405235976, 0.00029357962193898857, 0.00015728274593129754, 0.00047434383304789662, 0.00021004953305236995, 0.00035462653613649309, 0.00013378322182688862, 0.00021003249275963753, 0.00010131818271474913, 0.00031848397338762879, 0.00013416132424026728, 0.00028176826890558004, 0.00012703055108431727, 0.00028434532578103244, 0.00018105872732121497, 0.00016660055553074926, 0.0001210248883580789, 0.00024793227203190327, 3.5517074138624594e-05, 0.00034268875606358051, 0.00012236209295224398, 0.00013227986346464604, 0.00011627508501987904, 0.0001049661950673908, 0.00036384831764735281, 0.0001584785059094429, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -34,-83,38,74,30,-23,1,-57,54,-45,76,-56,56,127,56,-61, 
  /* [1][0][][] */ 59,21,-60,-42,0,-74,41,-2,20,86,-43,63,-84,-127,10,-30, 
  /* [2][0][][] */ 116,9,31,-34,17,43,-92,72,-93,-127,-85,68,52,-68,61,-7, 
  /* [3][0][][] */ 67,55,28,57,-52,-26,-31,20,12,-42,120,0,10,127,12,-28, 
  /* [4][0][][] */ 30,6,-5,-33,7,7,-2,47,-40,-32,-37,5,-5,-127,-1,19, 
  /* [5][0][][] */ 46,-25,-24,56,-4,-84,-26,86,15,23,-127,10,-9,-6,-19,20, 
  /* [6][0][][] */ 31,-61,127,37,22,96,-55,46,-22,1,-10,1,107,25,-34,56, 
  /* [7][0][][] */ 6,73,-127,-28,4,-87,-20,36,-20,-61,-2,9,1,-34,-20,40, 
  /* [8][0][][] */ 20,-79,-59,-3,7,-50,0,-25,12,25,-16,-13,-127,-60,73,23, 
  /* [9][0][][] */ -5,16,127,56,-8,-7,-48,-13,43,-33,0,56,22,33,-65,10, 
  /* [10][0][][] */ -32,-127,-7,-49,37,60,23,48,89,-108,18,-13,28,4,78,111, 
  /* [11][0][][] */ 51,44,-127,-40,80,9,-53,1,-12,14,-56,17,-3,-32,-36,5, 
  /* [12][0][][] */ 41,7,70,47,93,-77,-79,-127,-59,10,-47,-48,-39,6,-125,-26, 
  /* [13][0][][] */ 41,-13,-26,-127,-63,29,87,86,-40,-103,-45,40,-112,-59,-72,85, 
  /* [14][0][][] */ -64,29,-42,16,26,-112,15,-53,-123,-11,42,-59,74,127,-1,-7, 
  /* [15][0][][] */ 21,-58,-21,-27,11,-56,-7,20,-9,-29,-36,-9,-127,-78,82,36, 
  /* [16][0][][] */ 20,50,67,-77,93,107,16,44,17,77,127,43,3,-63,52,35, 
  /* [17][0][][] */ -50,-42,-3,-18,-88,39,89,93,70,127,11,65,30,112,126,30, 
  /* [18][0][][] */ 45,109,16,-20,-13,59,19,16,3,115,-99,127,48,-63,-72,-6, 
  /* [19][0][][] */ 17,4,23,33,27,-22,-30,-38,16,36,-93,-5,-127,-63,-17,-7, 
  /* [20][0][][] */ 40,-127,-10,-24,-23,-45,17,-110,-111,83,-106,-105,-121,-17,76,-40, 
  /* [21][0][][] */ 127,13,79,31,-30,-6,-21,-33,-45,32,-72,0,-32,-1,-2,16, 
  /* [22][0][][] */ -21,-9,6,4,-76,-43,39,127,92,80,25,49,3,30,27,24, 
  /* [23][0][][] */ -22,-45,-127,-40,-12,-9,24,-13,-20,-55,-20,-8,-101,-18,26,31, 
  /* [24][0][][] */ 40,-100,31,-59,56,35,-35,21,46,34,-27,127,-15,51,54,20, 
  /* [25][0][][] */ -120,-123,-96,-18,-37,-117,31,-106,29,21,-61,-49,-127,-42,5,-43, 
  /* [26][0][][] */ -14,-64,-12,-20,127,67,-108,-50,-60,0,7,-24,0,-79,57,-77, 
  /* [27][0][][] */ -48,81,-25,42,-19,-1,44,58,46,20,127,52,15,-4,-12,-7, 
  /* [28][0][][] */ -12,-82,-8,40,-1,-43,-29,71,95,-1,-20,-19,-127,-94,90,116, 
  /* [29][0][][] */ -40,-6,10,20,31,-82,-29,-127,-96,34,-21,1,-39,22,-1,-64, 
  /* [30][0][][] */ 22,76,-127,-28,-6,-22,36,69,33,59,-71,27,21,-59,-91,18, 
  /* [31][0][][] */ 50,-37,-81,-99,58,33,-35,107,0,-127,-55,-81,63,26,123,66, 
  /* [32][0][][] */ -127,13,-21,-26,-23,67,-7,12,0,38,118,58,-4,101,21,-85, 
  /* [33][0][][] */ -79,-5,52,53,-60,51,-28,12,127,3,53,20,42,53,11,-18, 
  /* [34][0][][] */ 22,127,-33,-52,9,48,-20,40,-7,-82,-54,-46,50,-19,14,65, 
  /* [35][0][][] */ 34,-77,-20,29,-5,-23,-29,-66,-127,-71,11,-40,-27,86,-40,-3, 
  /* [36][0][][] */ -94,-16,49,46,-61,-66,32,69,127,37,105,56,-31,70,41,79, 
  /* [37][0][][] */ -9,-57,55,5,-76,-127,30,30,86,32,36,43,-68,-37,115,44, 
  /* [38][0][][] */ 41,63,-23,-25,63,127,-88,-1,-78,-35,-1,-7,106,2,1,-51, 
  /* [39][0][][] */ 4,-55,21,-37,-69,-78,22,35,-127,-3,22,22,-75,30,5,110, 
  /* [40][0][][] */ -7,18,4,13,2,60,-23,63,127,42,-53,-23,101,1,-3,-37, 
  /* [41][0][][] */ 9,-40,-104,-127,29,-15,13,-41,24,25,-51,-66,-57,-93,9,-36, 
  /* [42][0][][] */ 91,14,-19,30,0,24,-10,-30,-127,27,122,-49,-48,56,-68,53, 
  /* [43][0][][] */ 23,56,47,127,37,22,-50,-118,-58,77,-34,92,24,-12,23,18, 
  /* [44][0][][] */ 11,-56,-99,-14,78,127,-73,-19,3,-48,21,-60,42,-56,26,17, 
  /* [45][0][][] */ -109,-19,38,73,-68,62,-67,20,62,-127,-64,-69,68,-1,76,-33, 
  /* [46][0][][] */ 10,-20,35,25,-21,56,-25,31,35,-76,65,43,65,119,127,29, 
  /* [47][0][][] */ 8,35,44,-44,-10,48,17,127,19,32,52,110,63,-107,-7,95, 
  /* [48][0][][] */ 6,-67,0,-127,-20,-12,14,24,8,4,11,15,-12,13,28,33, 
  /* [49][0][][] */ -39,-99,22,46,-3,-14,15,22,36,-2,127,37,-29,86,81,57, 
  /* [50][0][][] */ -85,-71,-69,-6,15,38,-33,-49,101,-126,52,-56,-1,66,127,-29, 
  /* [51][0][][] */ 39,31,24,7,8,17,-35,-2,21,29,-18,127,-7,-11,8,-23, 
  /* [52][0][][] */ -57,55,23,-21,21,-89,-22,-72,-68,-2,-52,11,-71,1,-127,-69, 
  /* [53][0][][] */ 8,-31,-38,-127,45,-16,-17,-48,-45,44,32,23,-10,-20,-1,27, 
  /* [54][0][][] */ -14,7,70,28,-32,42,-37,-14,37,0,14,-39,64,127,62,-28, 
  /* [55][0][][] */ 37,-16,-20,-23,17,-22,-126,-127,-19,-84,-55,-11,13,-11,-6,-5, 
  /* [56][0][][] */ 23,-30,54,43,-42,33,5,127,-5,-38,-2,23,37,0,-32,46, 
  /* [57][0][][] */ 41,-60,-6,-28,-17,-118,6,-52,-58,127,-13,44,-94,-44,2,-100, 
  /* [58][0][][] */ 21,110,24,63,22,-71,15,-37,-49,93,-9,12,-72,-21,-127,-87, 
  /* [59][0][][] */ 105,-49,46,59,-25,-28,-41,-4,37,89,-127,32,14,-13,10,-20, 
  /* [60][0][][] */ -88,21,-57,-5,-42,44,-61,19,79,-81,-25,-47,-18,3,106,-127, 
  /* [61][0][][] */ -12,-8,48,46,38,18,-127,-36,-11,-51,-9,22,58,-17,-46,5, 
  /* [62][0][][] */ -93,-15,-127,90,39,-45,-20,-12,20,-60,-20,-99,-96,-20,-42,-122, 
  /* [63][0][][] */ -56,93,127,36,-94,-53,8,63,33,2,-34,-25,22,-29,-39,-25, 
  /* [64][0][][] */ -108,15,-54,36,85,-3,85,-96,127,25,44,-60,21,-2,61,-19, 
  /* [65][0][][] */ -43,59,-65,-10,34,-6,-6,-61,-23,-111,-2,-127,-15,-18,69,19, 
  /* [66][0][][] */ -127,-108,56,76,-86,47,-122,25,23,-89,-103,59,75,79,68,95, 
  /* [67][0][][] */ -127,-8,-10,42,-35,32,30,28,55,-17,40,-38,-8,23,-41,-87, 
  /* [68][0][][] */ 46,-36,-12,127,74,-45,20,-65,-52,88,-32,-37,-44,-66,6,-22, 
  /* [69][0][][] */ 22,58,54,58,66,49,13,9,127,104,-16,78,35,-8,10,27, 
  /* [70][0][][] */ 57,-53,37,-106,66,87,1,-47,50,-26,51,80,5,67,127,97, 
  /* [71][0][][] */ -12,17,-67,-1,1,-107,-30,94,43,-87,6,-27,-24,-87,12,127, 
  /* [72][0][][] */ -124,-120,12,13,-36,70,29,55,4,-25,16,42,-2,68,115,127, 
  /* [73][0][][] */ -13,-39,16,-8,4,51,49,-18,127,44,34,2,54,96,11,30, 
  /* [74][0][][] */ 22,27,1,-18,-32,3,18,16,-69,24,-127,39,-92,-47,-70,24, 
  /* [75][0][][] */ -2,31,28,127,-34,-42,34,-16,5,68,-5,63,4,-38,-30,39, 
  /* [76][0][][] */ -78,-76,-24,68,-22,32,24,-127,12,-124,63,-40,6,-21,62,-42, 
  /* [77][0][][] */ 102,10,101,-26,-38,-75,-37,10,-17,121,6,119,35,27,-127,79, 
  /* [78][0][][] */ -40,97,127,71,-65,23,-116,79,31,-28,-61,16,104,68,-37,7, 
  /* [79][0][][] */ 6,5,102,0,5,60,-63,-42,-18,-28,92,16,127,14,-18,18, 
  /* [80][0][][] */ -29,-22,-78,62,11,19,88,-51,23,44,-35,22,-54,-127,14,-26, 
  /* [81][0][][] */ 20,101,-11,-50,-8,127,23,79,-63,-86,42,-79,44,-25,-93,11, 
  /* [82][0][][] */ -64,71,-35,-2,-37,17,-5,-94,-29,-2,85,-56,-39,127,39,-73, 
  /* [83][0][][] */ 127,21,69,13,22,-17,-55,-13,59,71,105,39,-67,-39,-28,-59, 
  /* [84][0][][] */ 14,-55,-43,-33,46,-23,-10,-127,12,-20,14,-53,-4,-2,-4,-22, 
  /* [85][0][][] */ -127,-50,-101,46,-87,86,111,63,-9,-19,66,-113,27,62,63,-44, 
  /* [86][0][][] */ -50,127,64,41,-44,12,-21,-34,-61,-102,-77,32,107,98,-44,19, 
  /* [87][0][][] */ -5,118,1,-11,43,127,-55,77,-53,-84,-4,-24,72,-23,88,26, 
  /* [88][0][][] */ 121,-48,-116,-36,127,-38,-23,-117,65,75,-74,49,-60,-81,61,-7, 
  /* [89][0][][] */ 77,63,-30,-63,-7,26,-4,127,-8,-17,-29,56,4,-41,-5,50, 
  /* [90][0][][] */ 51,-127,-66,-15,66,-62,26,-70,55,21,-66,-34,-31,-25,19,3, 
  /* [91][0][][] */ 127,42,-18,0,99,-75,-41,15,-69,-46,-111,-6,17,-110,-26,37, 
  /* [92][0][][] */ 97,65,127,-33,87,68,37,37,103,69,-68,26,102,45,-59,83, 
  /* [93][0][][] */ 33,-9,-45,-36,-12,-22,1,83,22,41,-127,32,-8,-45,-31,-37, 
  /* [94][0][][] */ -65,19,-73,-11,60,-18,22,-47,-37,-5,59,-7,-23,49,-14,-127, 
  /* [95][0][][] */ -76,25,23,6,37,127,101,6,1,44,113,-95,7,23,-3,-38, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00044518974027596414, 0.00043471090612001717, 0.0003267783613409847, 0.0019126581028103828, 0.00083888351218774915, 0.00027362315449863672, 0.00047620796249248087, 0.0013462040806189179, 0.00067643076181411743, 0.00061853544320911169, 0.00028039512108080089, 0.00080730253830552101, 0.0010869381949305534, 0.00055272859754040837, 0.00062914047157391906, 0.00064666301477700472, 0.00062437832821160555, 0.00035167270107194781, 0.00082219031173735857, 0.00069337134482339025, 0.00062754697864875197, 0.00068042130442336202, 0.00056972331367433071, 0.00049872644012793899, 0.00047005969099700451, 0.00068836082937195897, 0.00043198265484534204, 0.00075374706648290157, 0.0009969278471544385, 0.00049160455819219351, 0.0006679787184111774, 0.00041936992784030735, 0.000377305579604581, 0.00089534360449761152, 0.00069332745624706149, 0.0011856815544888377, 0.00028820667648687959, 0.00065738731063902378, 0.0013721836730837822, 0.0010106249246746302, 0.0012644181260839105, 0.00037951898411847651, 0.00058618333423510194, 0.00050981563981622458, 0.00071717565879225731, 0.00052156654419377446, 0.00059223436983302236, 0.00044360279571264982, 0.0016161072999238968, 0.00075205991743132472, 0.0010093356249853969, 0.0031628883443772793, 0.0001481099461670965, 0.00055173656437546015, 0.00056857534218579531, 0.00064825912704691291, 0.0011544907465577126, 0.00032963091507554054, 0.00054561899742111564, 0.00095556792803108692, 0.00028626195853576064, 0.0005634280969388783, 0.0010879248147830367, 0.00074692035559564829, 0.00069578195689246058, 0.0008861853857524693, 0.00035965983988717198, 0.0010731847723945975, 0.00025176320923492312, 0.00073851784691214561, 0.00052905047778040171, 0.0010730922222137451, 0.00057489989558234811, 0.0017338215839117765, 0.00076777301728725433, 0.0012962309410795569, 0.00048900442197918892, 0.00076771073509007692, 0.00037033820990473032, 0.0011641226010397077, 0.00049038644647225738, 0.0010299193672835827, 0.00046432207454927266, 0.0010393389966338873, 0.00066180585417896509, 0.00060895836213603616, 0.00044237016118131578, 0.00090624199947342277, 0.0001298220013268292, 0.0012525959173217416, 0.00044725791667588055, 0.00048350935685448349, 0.00042500867857597768, 0.00038367242086678743, 0.001329938299022615, 0.00057927065063267946, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -28008, -23453, 28526, 2551, 33356, 9366, -33443, -41636, 4374, 3854, 32111, 4085, 15697, -10816, 31209, -9573, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00028783263405784965, 0.00048657975276000798, 0.00062612659530714154, 0.00086032541003078222, 0.00045752516598440707, 0.00064736220519989729, 0.00053362821927294135, 0.00055717409122735262, 0.00082178064621984959, 0.0003983992210123688, 0.00048035010695457458, 0.00052098341984674335, 0.00040248106233775616, 0.00084423425141721964, 0.00025390807422809303, 0.00044524227268993855, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -36,0,-73,4,48,-69,81,80,0,1,36,20,-10,7,-19,57,63,-37,-10,2,74,-37,33,127,1,121,21,-32,2,-72,5,-50,-4,80,88,-66,23,3,-15,12,-104,2,13,76,34,-1,-116,-84, 
  /* [1][0][][] */ -53,-74,-3,-1,-71,-8,-64,127,-58,34,38,-40,-12,-23,13,-17,22,87,8,13,0,33,-23,-18,-12,-59,88,29,-14,-11,-60,40,-28,-84,8,-40,55,-47,79,25,-83,-50,123,-6,13,1,48,-26, 
  /* [2][0][][] */ -19,4,-83,-90,5,-72,48,-6,31,39,17,61,-24,8,-70,-16,23,-60,-59,-48,-1,-16,16,-127,-50,90,-21,5,-15,-59,-9,-52,7,31,25,-16,-8,1,10,-13,-95,-8,24,-10,16,-35,-29,-23, 
  /* [3][0][][] */ -3,24,-11,-33,-3,-13,2,-15,-19,-4,4,19,-127,5,0,4,7,-1,-27,-22,-24,5,13,6,-29,-21,-15,13,-1,22,11,13,2,3,18,12,-17,37,28,7,7,-7,40,-14,27,-5,21,9, 
  /* [4][0][][] */ 64,-56,6,-12,23,-7,36,-28,-61,14,-21,-45,16,-26,21,13,4,-2,-49,25,29,49,8,69,-17,-22,16,16,15,-87,-33,2,16,-17,23,-127,14,16,-25,26,-18,-35,47,-10,-6,-25,-4,7, 
  /* [5][0][][] */ 47,-42,-12,25,-24,-22,-13,26,11,33,37,14,16,35,3,-3,28,56,23,2,-10,13,2,-26,-8,-1,7,-27,39,19,7,20,34,-127,-23,-1,-35,8,12,8,-102,14,11,-42,-33,4,-89,-15, 
  /* [6][0][][] */ -24,-13,13,11,12,-1,-24,-8,-14,-32,12,24,-19,6,0,27,6,-21,127,-24,41,-46,49,-34,-8,-27,59,-24,-5,37,-39,28,54,-25,49,-38,11,-39,96,1,-15,38,-43,15,-34,26,76,-24, 
  /* [7][0][][] */ -43,-29,14,48,-39,29,19,34,-8,36,23,70,50,21,-2,-4,-20,5,1,0,-50,10,-31,30,-13,-21,-12,-26,15,30,-27,12,-6,-2,-30,10,9,-43,127,-39,17,19,-5,-93,-14,-2,12,-11, 
  /* [8][0][][] */ -30,-6,25,8,-11,-11,-13,28,3,-33,11,5,24,10,-26,-31,-18,7,-26,2,-36,2,9,-9,-17,16,-11,8,6,61,11,0,31,17,-4,-71,-127,13,35,6,44,23,66,-29,-5,6,13,5, 
  /* [9][0][][] */ -10,1,-15,30,10,-15,-36,25,105,-50,39,84,-35,-2,-1,-1,-43,18,-19,1,67,-22,-21,-5,-15,17,43,1,-2,-11,-3,18,76,13,35,-127,-29,-81,-80,-13,-6,51,-13,68,-34,8,14,-40, 
  /* [10][0][][] */ 9,-5,-12,-104,57,95,38,-28,0,13,35,22,35,-46,-16,29,43,-6,50,-35,76,-26,53,30,-54,-127,15,-10,46,17,24,-39,-13,-44,-3,-8,-15,-22,19,-26,-41,-40,-13,-12,18,-2,42,-22, 
  /* [11][0][][] */ 1,47,-20,57,-35,-33,-40,2,89,41,5,71,-32,55,-37,-24,0,71,0,-40,-46,-127,10,7,7,-27,20,-17,42,-51,-1,-92,35,38,-27,-84,18,-12,-22,-102,28,21,88,-13,-3,-38,26,-5, 
  /* [12][0][][] */ 67,-54,-24,-32,-47,48,-22,127,27,43,-17,-31,-1,-1,-29,-35,-11,-12,-8,0,-11,10,-14,-24,-1,40,-1,20,-18,-21,-14,-9,2,-125,-31,-9,-26,-42,-26,16,-107,-58,-12,-106,-65,-18,23,-21, 
  /* [13][0][][] */ 21,6,-15,-9,15,3,-18,-4,0,5,22,19,-3,3,-1,-6,-8,3,20,-15,20,-6,3,-16,-2,0,12,127,25,-1,11,-16,-8,-10,-44,13,-14,7,6,-27,-15,-6,-10,4,4,-5,-3,-3, 
  /* [14][0][][] */ 122,-18,46,-43,64,17,20,-89,-27,2,18,117,-23,-2,12,16,63,62,-7,67,65,-1,127,1,34,34,-21,-59,27,21,97,20,-4,77,-124,-32,-61,61,52,12,-29,-9,-38,-8,-15,19,-51,-14, 
  /* [15][0][][] */ -5,-17,-84,-28,27,-10,66,8,-17,-9,-25,-20,47,42,-51,77,-10,-5,43,-56,-30,-43,48,3,-57,79,2,23,29,-10,-28,-45,-5,45,34,30,-33,-91,38,-51,57,0,75,-127,-5,-5,-47,9, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.012232886627316475, 0.020679639652371407, 0.026610380038619041, 0.036563828587532043, 0.019444819539785385, 0.027512893080711365, 0.022679198533296585, 0.02367989718914032, 0.034925676882266998, 0.016931965947151184, 0.02041487954556942, 0.022141793742775917, 0.017105445265769958, 0.035879954695701599, 0.010791093111038208, 0.018922796472907066, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 6956, 45907, 3850, 66011, 1915, 145888, -3053, 61895, 4286, 26316, 18711, -6577, -14054, 19741, 2618, -2792, -2034, -14589, 1590, -551, 659, -13448, 1894, 7988, -8405, 36800, 118498, 99449, 2929, 6833, 1892, 4679, 25522, -805, 43038, -22635, 86167, 7222, 65808, 3723, 1941, 824, 546, 781, 20443, -1736, -1663, 35078, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.900411972310394e-05, 3.2260704756481573e-05, 0.00016511973808519542, 3.9102327718865126e-05, 0.00017302022024523467, 3.9955299143912271e-05, 0.00017199521244037896, 9.6811279945541173e-05, 0.00012966048961970955, 3.2997348171193153e-05, 3.2169551559491083e-05, 0.00011337629985064268, 3.8565940485568717e-05, 3.7387253541965038e-05, 0.00011457673826953396, 0.00011380768410163, 0.00011126788012916222, 6.0280090110609308e-05, 0.00028703687712550163, 0.00012788311869371682, 7.9100915172602981e-05, 0.00011974100198131055, 8.5879590187687427e-05, 5.315914677339606e-05, 7.2775328590068966e-05, 0.00012492688256315887, 1.5803618225618266e-05, 5.6749562645563856e-05, 0.00014647447096649557, 0.0002047093294095248, 8.1968413724098355e-05, 0.00019257098028901964, 4.780639210366644e-05, 0.00020778036559931934, 2.9381331842159852e-05, 7.7897115261293948e-05, 6.8000204919371754e-05, 6.0023736295988783e-05, 0.00010144470434170216, 6.1684680986218154e-05, 0.00029769467073492706, 0.0063141374848783016, 0.00015584069478791207, 0.00025996996555477381, 1.6742773368605413e-05, 9.1150133812334388e-05, 0.00012696438352577388, 1.6559628420509398e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 87,-85,106,86,41,-42,103,-62,75,-82,-84,55,57,-38,-98,-108,112,98,50,84,81,-77,-100,50,-35,-29,-87,-66,-59,60,-72,-107,-2,64,59,39,-46,49,-49,-7,82,-69,69,66,-78,-6,54,-34, 95,-78,127,106,-90,-51,-62,-79,118,-31,-49,77,80,-83,-127,95,-51,112,88,127,93,-120,50,74,-58,-54,-102,-79,56,79,-57,-127,-47,102,65,64,-81,73,-89,-3,103,-103,82,78,-79,-127,72,-106, 33,-52,64,50,28,-39,-57,-24,48,-25,16,30,29,-51,-50,-3,-65,16,30,66,27,-55,21,21,-17,-34,-34,-20,21,35,90,-80,-74,40,29,33,-36,43,-6,9,61,-42,48,43,-10,-12,31,-71, 
  /* [0][1][][] */ 102,-127,-52,117,53,-92,127,-81,85,-84,-65,83,87,-85,-22,-127,127,115,76,-53,96,109,-127,61,66,-73,-95,-99,-127,90,-77,0,-111,67,106,102,-90,99,-91,78,95,-117,97,113,-102,87,89,-83, 127,-111,-78,127,-127,-127,-87,-127,127,-127,-127,127,127,-127,-14,111,-77,127,127,-57,127,127,81,127,127,-127,-127,-127,46,127,-57,22,-127,127,127,127,-127,127,-127,118,127,-127,127,127,-127,-11,127,-127, 17,-84,-47,73,39,-54,-45,-60,59,-53,-86,49,59,-43,-9,-13,-66,45,60,-44,47,73,39,64,74,-56,-53,-53,38,61,127,5,-54,78,44,66,-52,79,-71,46,96,-64,62,71,-65,-56,45,-70, 
  /* [0][2][][] */ 32,-97,-70,52,44,-83,74,-35,47,-90,-10,55,59,-75,97,-96,82,97,36,-40,22,13,-87,28,-43,-71,-34,-55,-82,43,-64,71,-65,37,61,52,-88,50,-82,-109,73,-47,53,57,-32,16,37,-63, 73,-78,-69,74,-65,-92,-71,-60,45,-104,-77,71,76,-56,121,48,-59,87,69,-56,78,21,62,68,-76,-89,-100,-72,40,72,-35,88,-42,94,84,71,-100,76,-108,-127,88,-61,60,85,-72,42,58,-30, 30,-63,-53,49,51,-51,-2,-48,7,-46,-43,43,25,21,58,-3,-50,11,25,-47,18,30,28,36,-27,-55,-58,-29,25,42,75,37,7,63,29,41,-75,41,-45,-71,63,-57,52,13,-107,-2,26,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029326749499887228, 0.001371079939417541, 0.0070175887085497379, 0.0016618488589301705, 0.007353359367698431, 0.0016981002409011126, 0.0073097962886095047, 0.0041144792921841145, 0.0055105709470808506, 0.001402387279085815, 0.0013672059867531061, 0.0048184925690293312, 0.0016390524106100202, 0.0015889581991359591, 0.0048695113509893417, 0.0048368265852332115, 0.0047288849018514156, 0.0025619037915021181, 0.012199066579341888, 0.0054350323043763638, 0.0033617888111621141, 0.0050889924168586731, 0.0036498825065791607, 0.0022592637687921524, 0.0030929513741284609, 0.0053093922324478626, 0.00067165377549827099, 0.0024118563160300255, 0.0062251649796962738, 0.0087001463398337364, 0.0034836574923247099, 0.0081842662766575813, 0.0020317716989666224, 0.008830665610730648, 0.0012487065978348255, 0.0033106273040175438, 0.0028900085017085075, 0.0025510087143629789, 0.0043114000000059605, 0.0026215990073978901, 0.012652023695409298, 0.26835083961486816, 0.0066232294775545597, 0.011048723012208939, 0.00071156781632453203, 0.0038738804869353771, 0.0053959861397743225, 0.00070378417149186134, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 115, 1161, 6240, 678, 15547, 13232, 4236, -64, -2858, -532, 571, 1679, 2202, 884, 31379, 2960, 3331, -58, -3065, 6876, -703, 7079, 9610, 7569, 9381, 889, 5472, 2493, 7157, -1613, 15278, 8450, 877, -1379, 5233, 8240, -1275, 188, -293, 5611, -3352, -5559272, -1711, -2051, 886, 5360, 1089, 1221, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00058685202384367585, 0.00077735481318086386, 0.00012883027375210077, 0.0003325933066662401, 0.00015705035184510052, 0.00030565718770958483, 0.00031764907180331647, 0.00038101477548480034, 0.00021824153373017907, 0.00057723699137568474, 0.0011423627147451043, 0.00028353856760077178, 0.00069389579584822059, 0.00098892673850059509, 0.0001357203145744279, 0.00030724698444828391, 0.00017769084661267698, 0.00041721589514054358, 0.00015017588157206774, 0.00016547528502997011, 0.00059723830781877041, 0.00033857062226161361, 0.00037295246147550642, 0.00016276312817353755, 0.00018557894509285688, 0.00022330149658955634, 0.001246719853952527, 0.00056925410171970725, 0.00024104423937387764, 0.00035633210791274905, 0.00017933420895133168, 0.00016713704098947346, 0.00049108086386695504, 0.00021689658751711249, 0.00065428263042122126, 0.00025729485787451267, 0.00093082449166104198, 0.0004409592947922647, 0.0002841854584403336, 0.00035041515366174281, 0.00013952542212791741, 1.4983797314016556e-07, 0.00028637686045840383, 0.00021629092225339264, 0.0019223220879212022, 0.00027525113546289504, 0.0002942265709862113, 0.0009625981911085546, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,16,34,46,-28,4,34,-34, 
  /* [1][0][][] */ 38,102,127,-2,51,-50,59,80, 
  /* [2][0][][] */ -49,4,-39,-29,-127,-75,53,-9, 
  /* [3][0][][] */ 86,-15,-12,-127,-99,-30,77,26, 
  /* [4][0][][] */ -127,63,17,-78,75,-42,-48,8, 
  /* [5][0][][] */ -127,-45,90,-63,-120,10,-76,24, 
  /* [6][0][][] */ -1,-127,31,-19,-25,-15,-17,45, 
  /* [7][0][][] */ -64,39,-38,90,127,-99,-29,-27, 
  /* [8][0][][] */ 127,109,32,-16,-49,-17,-66,-93, 
  /* [9][0][][] */ -11,-127,-7,-88,-10,123,28,60, 
  /* [10][0][][] */ -54,-48,9,49,-48,127,42,-15, 
  /* [11][0][][] */ 95,45,30,26,-72,-41,-10,-127, 
  /* [12][0][][] */ 14,37,16,-2,1,-78,127,54, 
  /* [13][0][][] */ 40,-6,-37,-86,52,22,127,-43, 
  /* [14][0][][] */ 63,15,-127,17,-111,-70,12,41, 
  /* [15][0][][] */ 5,-127,-8,30,-18,12,33,96, 
  /* [16][0][][] */ -22,7,49,45,-127,-7,39,22, 
  /* [17][0][][] */ -11,79,-70,-33,-38,-127,90,-33, 
  /* [18][0][][] */ 36,-63,-68,53,18,29,-5,127, 
  /* [19][0][][] */ 78,36,7,6,-28,-127,71,31, 
  /* [20][0][][] */ 55,7,-48,127,-6,15,-7,-3, 
  /* [21][0][][] */ -35,-15,-75,-3,1,24,-127,-35, 
  /* [22][0][][] */ -127,21,-21,25,52,83,-87,-30, 
  /* [23][0][][] */ -50,-100,11,38,-127,71,108,32, 
  /* [24][0][][] */ 68,23,-21,47,-127,-90,39,-32, 
  /* [25][0][][] */ 107,16,-58,38,127,68,22,-119, 
  /* [26][0][][] */ -9,-20,2,-91,-4,-127,26,-101, 
  /* [27][0][][] */ -4,-127,7,-19,-9,-42,25,-8, 
  /* [28][0][][] */ 3,7,-51,2,46,126,127,11, 
  /* [29][0][][] */ -7,87,3,9,8,12,-54,-127, 
  /* [30][0][][] */ 127,54,46,-3,-122,-52,32,90, 
  /* [31][0][][] */ 51,-62,37,-29,3,-59,31,127, 
  /* [32][0][][] */ -110,68,-87,-81,-127,-17,-31,15, 
  /* [33][0][][] */ 28,7,-9,22,-127,-41,-49,-19, 
  /* [34][0][][] */ 31,-127,43,-5,14,101,-68,38, 
  /* [35][0][][] */ -25,-21,-127,5,3,-54,22,-37, 
  /* [36][0][][] */ -18,127,41,31,10,-22,5,-4, 
  /* [37][0][][] */ -127,24,-14,10,49,-16,-21,-83, 
  /* [38][0][][] */ -127,-27,-111,-45,85,114,38,54, 
  /* [39][0][][] */ 35,6,25,18,-38,-91,127,42, 
  /* [40][0][][] */ 6,-37,-52,-82,-127,52,67,-67, 
  /* [41][0][][] */ -87,92,-103,-33,-106,-97,-127,2, 
  /* [42][0][][] */ -56,-127,-71,-38,-65,61,-57,-49, 
  /* [43][0][][] */ -67,-8,-3,-61,127,23,-26,8, 
  /* [44][0][][] */ 127,-24,41,16,33,-5,16,70, 
  /* [45][0][][] */ -3,-127,-38,27,-55,24,44,22, 
  /* [46][0][][] */ 90,18,-21,-38,127,17,-17,-26, 
  /* [47][0][][] */ 127,27,61,105,6,3,15,-51, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0010916008614003658, 0.0014459543162956834, 0.00023963661806192249, 0.00061865535099059343, 0.00029212867957539856, 0.00056855159346014261, 0.00059085764223709702, 0.00070872390642762184, 0.00040595012251287699, 0.0010737159755080938, 0.0021249039564281702, 0.00052740884711965919, 0.0012907125055789948, 0.0018394982907921076, 0.00025245276628993452, 0.00057150877546519041, 0.0003305219579488039, 0.00077606143895536661, 0.00027934150421060622, 0.00030779984081164002, 0.0011109203333035111, 0.00062977371271699667, 0.00069372722646221519, 0.0003027549828402698, 0.00034519456676207483, 0.00041536212665960193, 0.0023190181236714125, 0.0010588670847937465, 0.00044836531742475927, 0.00066281179897487164, 0.0003335787623655051, 0.00031089087133295834, 0.00091345730470493436, 0.00040344838635064662, 0.0012170282425358891, 0.0004785930213984102, 0.0017314224969595671, 0.00082022644346579909, 0.00052861211588606238, 0.00065180566161870956, 0.00025953061413019896, 2.7871294605574803e-07, 0.00053268834017217159, 0.00040232180617749691, 0.0035757028963416815, 0.00051199342124164104, 0.00054728955728933215, 0.0017905246932059526, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -18262, 30039, -14137, 3461, 27027, -14145, 49741, 26399, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00056913471780717373, 0.00046142819337546825, 0.00085698772454634309, 0.0011922918492928147, 0.00050912477308884263, 0.00037424213951453567, 0.0003569177642930299, 0.00054451526375487447, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 8,-33,36,5,1,6,43,-32,-127,124,-17,58,53,23,47,6,22,-45,-14,-8,-32,-3,0,4,28,-78,11,12,-11,-28,19,-24,-12,-32,43,21,35,-4,13,-33,3,25,61,-29,-19,22,-21,-19, 
  /* [1][0][][] */ 19,3,127,-24,-44,-50,4,-79,17,-33,45,1,-55,48,27,-35,-1,-59,18,7,-25,55,6,-17,18,-15,-5,21,2,16,19,-23,-9,21,-1,24,7,-7,47,-64,-37,31,10,58,-49,60,-2,-48, 
  /* [2][0][][] */ 30,-56,82,-71,16,-15,-38,-74,50,-11,12,-12,12,84,42,32,-28,114,4,-14,12,66,-85,15,127,29,11,-3,-63,3,-8,-68,-68,10,-25,41,2,46,14,2,-29,-1,-41,44,-48,52,-34,-94, 
  /* [3][0][][] */ -9,-36,12,37,8,-31,3,-28,-38,-6,35,18,-13,18,47,21,-21,-17,-20,-4,22,81,-26,-19,15,1,5,4,7,-31,127,-13,-11,-11,-33,17,-32,-14,6,2,-31,-3,14,36,11,13,-2,-15, 
  /* [4][0][][] */ -62,19,4,12,18,-127,5,23,21,-50,40,-15,-4,14,-26,-16,-24,1,-4,-10,4,31,10,-29,-6,60,-21,78,21,15,6,-47,13,-80,-56,-46,46,0,16,-11,-13,3,-17,56,-68,-18,8,-1, 
  /* [5][0][][] */ 11,23,55,-7,-9,-4,33,120,58,30,59,-26,-34,-68,-2,-32,4,-66,-25,87,54,-54,82,32,-32,-37,-55,-52,-9,-41,12,57,47,-77,40,-64,97,-18,-62,38,45,-89,-19,-16,127,4,-19,24, 
  /* [6][0][][] */ -44,13,-87,-59,26,-11,-24,-8,14,18,34,29,11,10,-54,-56,23,19,-10,-113,-101,-60,34,-104,21,6,-42,-127,6,39,-48,2,-10,-93,2,85,-53,-47,19,-108,-16,23,2,-16,92,-82,34,44, 
  /* [7][0][][] */ 29,49,-81,66,41,55,-13,90,-3,-42,18,4,11,-5,-19,46,-38,-56,24,-44,127,61,35,-73,-1,-9,12,-30,-17,-15,-4,13,-47,70,-27,-47,-32,-55,0,-65,-11,-48,44,58,-4,-26,35,10, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.024188226088881493, 0.019610697403550148, 0.036421976983547211, 0.05067240446805954, 0.021637802943587303, 0.015905290842056274, 0.015169004909694195, 0.023141898214817047, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51087, -3126, 4528, 7217, 2014, -1596, 1993, 17495, 1412, 31986, -7297, 40421, -168, -728, 15928, 6757, 2337, 33957, 56912, 10260, 3219, 355, -7014, 14823, -10576, 20632, 47728, 22851, 6243, 1712, -5728, 891, 1428, 18229, -9128, 12968, -9897, 23012, -26737, 57111, 37186, 37346, 21864, -3512, 15999, 1420, 3197, -795, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00027450034394860268, 0.00016703161236364394, 0.00025135732721537352, 0.00027661086642183363, 9.7919015388470143e-05, 9.3299458967521787e-05, 0.00040470229578204453, 0.00023918676015455276, 0.0001638157555134967, 0.00014228912186808884, 0.0001272171939490363, 0.00010333957470720634, 0.00038818139000795782, 0.00047180228284560144, 0.00016524667444173247, 0.00012185812374809757, 0.00011694173008436337, 0.00013408518861979246, 3.913054388249293e-05, 0.00016769958892837167, 0.00031312796636484563, 0.00022526377870235592, 0.00016666136798448861, 0.00016231153858825564, 0.00014342469512484968, 0.00013995834160596132, 0.00027888893964700401, 0.00013461156049743295, 6.6402877564541996e-05, 0.000541442830581218, 0.00013135325571056455, 0.00015150074614211917, 0.00035978754749521613, 0.000139281852170825, 0.00019272332428954542, 0.00019535089086275548, 0.00032126603764481843, 0.0001172097836388275, 0.00023726304061710835, 3.0702951335115358e-05, 8.5371299064718187e-05, 5.8775764046004042e-05, 8.8501881691627204e-05, 0.00014630310761276633, 0.00015829296899028122, 0.00015437156253028661, 7.0896014221943915e-05, 0.00010517567716306075, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-13,19,107,9,92,5,22,19,8,11,4,-34,-4,-55,17,1,7,-27,-112,-30,-37,127,-13,1,16,-8,17,6,10,36,112,17,15,51,-25,-2,37,0,2,21,-78,-13,-12,13,6,0,-4, 127,1,15,-127,32,118,9,10,101,127,15,43,-75,-19,6,9,127,-59,-51,-27,-121,30,-103,10,16,74,-35,-77,36,24,25,-127,1,-77,127,12,-46,-44,-1,96,-72,-104,-39,19,-34,-10,-127,19, -30,-1,9,13,6,93,3,21,43,19,-2,32,-38,1,2,4,-99,27,1,90,-50,-6,-24,-13,4,-38,-4,15,-8,7,7,-45,8,-34,17,-21,-2,53,41,-17,49,32,-11,23,-55,5,3,-6, 
  /* [0][1][][] */ 125,8,-5,-113,13,-58,47,-22,-2,2,-18,47,-10,2,22,-32,3,-54,-61,-109,5,-99,-107,-19,1,108,-16,-127,-14,37,25,-109,13,-42,7,127,1,54,-34,48,-58,-127,40,-96,-49,-11,-2,-2, 17,-127,-127,95,-127,-127,-127,-127,-127,-109,127,-127,127,127,46,-127,-87,127,127,-106,127,127,101,127,127,-127,-127,30,-127,-127,98,127,-127,127,-40,-33,127,-127,127,127,127,-90,127,127,127,-127,93,106, 52,8,46,-22,8,-63,44,14,-15,31,-90,-6,1,-32,127,3,60,-70,-56,87,4,-61,20,-46,-6,2,-37,66,12,40,-5,30,23,-35,15,73,-3,71,65,-3,-80,-7,-88,-29,34,-21,-16,8, 
  /* [0][2][][] */ -54,6,28,-32,6,14,-31,24,-5,-44,15,28,11,-5,-51,22,-2,18,-2,94,18,-40,-9,-18,0,26,3,55,-22,6,64,-45,-10,-35,-43,-36,-1,37,10,-20,10,-24,59,-36,-51,28,-14,13, 64,127,75,14,20,-30,115,35,-19,-24,53,25,-24,2,-97,25,-65,-61,-15,127,-23,57,10,13,55,-71,-43,36,64,-1,127,3,82,-16,6,-24,-25,-15,-8,111,-25,-32,-34,46,16,-32,-1,-127, -42,-1,8,-10,15,-3,-68,10,-35,-16,-21,-42,22,-6,-22,12,30,20,6,-126,30,-10,21,-24,-13,-2,-9,-48,-27,6,10,-3,-12,90,-32,-14,-8,41,28,-56,1,20,-32,5,-55,122,-12,-7, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.01166626438498497, 0.0070988433435559273, 0.010682686232030392, 0.011755961924791336, 0.0041615581139922142, 0.0039652269333600998, 0.017199847847223282, 0.010165437124669552, 0.0069621694274246693, 0.0060472874902188778, 0.0054067308083176613, 0.0043919319286942482, 0.016497708857059479, 0.020051596686244011, 0.0070229833945631981, 0.0051789702847599983, 0.0049700234085321426, 0.0056986203417181969, 0.0016630480531603098, 0.0071272323839366436, 0.013307938352227211, 0.0095737101510167122, 0.0070831081829965115, 0.0068982401862740517, 0.0060955495573580265, 0.0059482292272150517, 0.011852779425680637, 0.005720991175621748, 0.0028221223037689924, 0.02301131933927536, 0.0055825132876634598, 0.0064387815073132515, 0.015290970914065838, 0.0059194783680140972, 0.0081907408311963081, 0.0083024129271507263, 0.013653806410729885, 0.0049814158119261265, 0.010083679109811783, 0.0013048754772171378, 0.0036282800137996674, 0.0024979698937386274, 0.0037613299209624529, 0.0062178820371627808, 0.0067274509929120541, 0.0065607912838459015, 0.0030130806844681501, 0.0044699660502374172, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 58144, 5895, 5109, 10410, 1497, 8398, -2776, 582, 1946, 5674, 4992, -351, 15833, -5770, 1178, -2843, 3583, 16582, -319, 36423, 9085, 4017, 15376, -164, 6700, 3822, 36124, 15315, 173, -3854, -23, 2125, -2198, 10663, 7463, 4682, 10595, 4052, 52181, 3178, -770, 3974, 1065, 2942, 5645, 3652, -1174, 5270, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.4791656516026706e-05, 0.00033069821074604988, 0.00024536438286304474, 0.00028178468346595764, 0.0011110372142866254, 0.00054157472914084792, 0.00065713655203580856, 0.0005385297117754817, 0.000428585713962093, 0.00030329849687404931, 0.00035687201307155192, 0.00038720373413525522, 0.00010541190567892045, 0.00018302683020010591, 0.00021502021991182119, 0.0013229753822088242, 0.00055690197041258216, 0.00027169982786290348, 0.0011815081816166639, 7.2862552769947797e-05, 0.00014276437286753207, 0.0002528006152715534, 0.00030804850393906236, 0.00093307130737230182, 0.00018456496763974428, 0.00030417786911129951, 0.00011426596756791696, 0.00023225405311677605, 0.00081135035725310445, 0.0006950749084353447, 0.00047055628965608776, 0.00032620085403323174, 0.00075498264050111175, 0.00020779212354682386, 0.00017581763677299023, 0.00029164028819650412, 0.00034109974512830377, 0.00031268195016309619, 4.6627319534309208e-05, 0.0016394685953855515, 0.00078831840073689818, 0.0007790332892909646, 0.00036480466951616108, 0.00044080140651203692, 0.00018122188339475542, 0.00026839968631975353, 0.00057865440612658858, 0.00050890538841485977, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 88,104,21,9,127,-53,43,-7, 
  /* [1][0][][] */ 1,-20,-49,127,12,-13,-8,-41, 
  /* [2][0][][] */ 19,-36,33,14,-15,-57,127,76, 
  /* [3][0][][] */ 127,28,-41,1,-55,-16,8,-10, 
  /* [4][0][][] */ 11,-76,66,2,-3,59,-56,-127, 
  /* [5][0][][] */ 12,40,22,-38,127,-3,13,28, 
  /* [6][0][][] */ 35,25,54,95,101,127,-100,-105, 
  /* [7][0][][] */ 3,127,-65,-1,-7,-42,1,-31, 
  /* [8][0][][] */ 127,71,-11,-13,-49,-24,3,-39, 
  /* [9][0][][] */ -127,34,-17,50,22,-44,21,-15, 
  /* [10][0][][] */ -62,-35,32,127,-1,1,28,14, 
  /* [11][0][][] */ -99,-23,-30,-54,-3,23,-127,-78, 
  /* [12][0][][] */ 61,127,-41,18,-122,-98,49,-55, 
  /* [13][0][][] */ 40,-14,-7,-3,-15,127,-84,63, 
  /* [14][0][][] */ 20,98,-127,87,23,-40,-68,-127, 
  /* [15][0][][] */ 37,127,-15,1,-19,-34,19,-28, 
  /* [16][0][][] */ -31,-1,0,20,27,-127,56,-41, 
  /* [17][0][][] */ 15,127,11,-21,46,53,-58,-4, 
  /* [18][0][][] */ -24,27,-127,-79,-64,-13,-25,50, 
  /* [19][0][][] */ -51,-101,17,-28,-15,75,-35,127, 
  /* [20][0][][] */ -121,72,-52,14,17,-127,45,3, 
  /* [21][0][][] */ 43,-63,-42,21,-127,-26,16,-6, 
  /* [22][0][][] */ -105,74,26,28,127,-14,23,-10, 
  /* [23][0][][] */ -30,4,-18,14,1,-1,-127,-65, 
  /* [24][0][][] */ 58,34,-127,-18,-86,-54,40,123, 
  /* [25][0][][] */ 22,-19,30,127,-8,29,13,-7, 
  /* [26][0][][] */ 16,-32,-12,-7,-17,93,127,-17, 
  /* [27][0][][] */ 82,-61,-43,-127,124,-45,123,37, 
  /* [28][0][][] */ 17,-5,-32,-18,-42,10,34,127, 
  /* [29][0][][] */ 1,42,-8,-49,19,9,-127,-99, 
  /* [30][0][][] */ -16,0,-9,-127,16,-15,-7,-15, 
  /* [31][0][][] */ -45,-30,-5,60,-127,-10,17,11, 
  /* [32][0][][] */ -70,-23,-25,7,127,65,-60,-86, 
  /* [33][0][][] */ -61,16,-9,23,-127,-3,8,-14, 
  /* [34][0][][] */ -127,85,30,-23,101,-70,56,55, 
  /* [35][0][][] */ 43,127,-34,-13,37,-94,33,-17, 
  /* [36][0][][] */ 37,127,-13,12,46,10,-127,-23, 
  /* [37][0][][] */ 16,-48,-9,17,-6,-60,127,-17, 
  /* [38][0][][] */ 65,-127,51,-59,-71,104,-70,57, 
  /* [39][0][][] */ 5,-127,-27,-19,-20,3,-83,-117, 
  /* [40][0][][] */ 74,39,29,37,15,29,-58,-127, 
  /* [41][0][][] */ 38,-101,-17,-9,7,80,-127,41, 
  /* [42][0][][] */ -48,24,-10,-127,6,-53,30,-22, 
  /* [43][0][][] */ 6,-37,-65,-127,-38,-4,3,6, 
  /* [44][0][][] */ 21,-24,68,127,-72,7,107,-16, 
  /* [45][0][][] */ -17,-16,76,28,53,-52,127,72, 
  /* [46][0][][] */ 70,126,39,-18,-127,-45,95,28, 
  /* [47][0][][] */ -86,-57,-60,55,-127,-16,76,21, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00021913810633122921, 0.00096893939189612865, 0.00071891292463988066, 0.00082562369061633945, 0.0032553176861256361, 0.0015868035843595862, 0.0019253974314779043, 0.0015778817469254136, 0.0012557478621602058, 0.00088865874568000436, 0.0010456281015649438, 0.001134499441832304, 0.00030885485466569662, 0.00053626508451998234, 0.0006300050881691277, 0.0038762923795729876, 0.0016317119589075446, 0.00079607521183788776, 0.0034617963247001171, 0.00021348586597014219, 0.00041829686961136758, 0.00074070092523470521, 0.0009025761391967535, 0.0027338808868080378, 0.00054077181266620755, 0.00089123524958267808, 0.00033479707781225443, 0.0006804998847655952, 0.0023772409185767174, 0.0020365561358630657, 0.0013787208590656519, 0.00095576216699555516, 0.0022120845969766378, 0.00060882692923769355, 0.00051514228107407689, 0.0008545003947801888, 0.00099941564258188009, 0.00091615208657458425, 0.00013661714910995215, 0.0048036114312708378, 0.0023097577504813671, 0.0022825524210929871, 0.001068870653398335, 0.0012915396364405751, 0.00053097662748768926, 0.00078640587162226439, 0.0016954462043941021, 0.0014910829486325383, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 10827, -9258, 45656, 30525, 8186, 2794, 56394, 10142, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00055302039254456758, 0.00047451353748328984, 0.00035777129232883453, 0.00080822443123906851, 0.00051436020294204354, 0.00064009771449491382, 0.00044339903979562223, 0.00034521883935667574, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -16,-34,23,-127,16,0,-5,19,12,5,5,-31,123,0,-12,5,0,-22,0,7,80,8,-22,33,53,59,35,67,9,-5,-7,-103,13,3,-4,-2,-32,9,-32,37,8,-42,-19,-12,-14,-22,4,-3, 
  /* [1][0][][] */ -86,-7,15,-7,68,35,-74,72,26,15,-39,-43,4,0,10,71,0,55,0,-114,3,43,127,50,2,10,70,14,20,-77,48,-36,1,20,5,-19,-29,-37,8,-16,-30,-16,-84,32,-88,6,-66,-68, 
  /* [2][0][][] */ -119,47,38,12,44,78,80,8,-41,32,-9,-49,56,0,-81,73,0,7,-127,59,107,12,-16,38,-4,-35,-17,35,49,79,53,57,19,-73,-6,56,-12,37,5,-30,33,-19,20,-11,104,-78,82,43, 
  /* [3][0][][] */ 11,-15,21,7,-7,20,8,-15,69,-17,13,19,14,0,-24,-20,0,0,-27,-17,-24,-14,-4,-12,-28,-37,18,-6,-7,-15,-22,-8,-28,69,-88,3,20,21,21,-127,0,11,-5,-49,-7,-16,2,-8, 
  /* [4][0][][] */ -13,15,111,44,9,-13,8,12,1,13,-19,-19,-82,0,-27,19,0,25,-2,-11,78,-10,-3,-11,-61,46,-26,18,-2,8,8,63,1,8,-17,-25,36,-42,-42,7,-3,-127,-25,11,-22,7,17,10, 
  /* [5][0][][] */ 14,48,30,-4,-13,41,55,20,-17,34,-10,48,21,0,-127,-24,0,40,-33,70,52,13,-5,13,-43,-19,13,21,-5,66,-2,-14,26,49,-37,6,77,44,-71,2,26,-38,3,26,88,36,11,29, 
  /* [6][0][][] */ -62,-87,4,-1,69,-15,-6,-28,66,-60,27,106,-9,0,-87,59,0,-71,91,-38,-48,-2,38,-48,20,-17,-27,-37,64,-5,22,1,80,-68,31,26,-29,29,-28,-36,-21,-25,22,-58,-34,-127,-15,-38, 
  /* [7][0][][] */ -95,-55,44,8,127,58,102,-20,36,-14,35,-17,-39,0,43,113,0,-30,0,75,6,1,-53,19,-13,28,42,-23,75,47,101,-17,15,-48,-15,-41,-27,47,51,53,113,-16,-7,-54,76,-8,100,86, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.023503364995121956, 0.020166825503110886, 0.015205279923975468, 0.034349538385868073, 0.021860308945178986, 0.027204152196645737, 0.01884445920586586, 0.014671800658106804, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 42647, 62254, 77783, 47655, 1306, 14462, 1008, 26968, 34605, 28613, 22326, -22600, -59252, -127, 86209, -2794, -204, 37724, 4604, -246, -15534, -7687, 44363, 51326, 12692, 18660, 37402, 25726, -1211, 5705, -6054, -51814, 22715, 60114, 34623, 537, 47891, 1104, 111101, -36038, 13643, -36488, 7609, 63660, -3493, 137824, 1569, -25197, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0001465813402319327, 6.837705586804077e-05, 7.3951880040112883e-05, 7.3708426498342305e-05, 8.6442872998304665e-05, 9.9720564321614802e-05, 0.00011354935850249603, 4.145945786149241e-05, 5.8716450439533219e-05, 2.5017230655066669e-05, 6.9388617703225464e-05, 2.6306763174943626e-05, 0.00017703860066831112, 0.005541567225009203, 3.0820472602499649e-05, 0.00016415814752690494, 0.0027484172023832798, 2.1536121494136751e-05, 5.4263164201984182e-05, 0.00019182929827366024, 6.7443492298480123e-05, 0.00010416292934678495, 0.00012142124614911154, 1.8314267435926013e-05, 2.9769957109238021e-05, 0.00011641751189017668, 3.3678832551231608e-05, 6.1470127548091114e-05, 0.00040965332300402224, 6.591410783585161e-05, 4.9074413254857063e-05, 0.00014129979535937309, 0.00011419625661801547, 2.0312614651629701e-05, 6.4594933064654469e-05, 0.00013266353926155716, 2.6180705390288495e-05, 0.00038708417559973896, 4.0927981899585575e-05, 0.00010670304618543014, 5.2963703637942672e-05, 0.00014891351747792214, 5.4755495511926711e-05, 1.3525269423553254e-05, 0.00015263177920132875, 4.2178486182820052e-05, 0.00019738696573767811, 4.877598985331133e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -46,-39,-20,-13,7,-40,-80,-84,-7,-52,34,80,44,-71,116,-35,-113,-80,44,-15,30,-86,-98,-74,-18,-127,-56,-13,67,21,81,20,-127,-37,13,88,-3,53,-127,102,-91,2,100,-103,-4,-44,-74,92, 85,-4,-41,-30,50,-127,-127,-87,65,-77,-127,107,51,-82,-1,64,-52,-118,53,-4,15,-117,-121,-74,4,-101,-102,4,-65,38,-70,47,33,-127,59,84,18,70,-81,127,-127,14,123,-127,-12,-34,-118,85, -33,39,10,-6,-67,-104,-55,-20,95,-12,-103,41,16,-71,-106,-9,-127,-11,31,7,1,-68,-37,-42,2,-50,-60,-1,-16,24,-13,-4,98,-82,83,30,11,31,-13,34,-74,5,6,-74,-15,3,-50,7, 
  /* [0][1][][] */ -85,-127,-50,-48,-9,53,96,-98,-8,-93,8,127,105,-64,29,-91,-121,-118,95,-80,61,-127,-106,-127,53,-95,-82,-12,104,-52,127,92,-49,-71,-11,127,-53,-95,-69,99,46,78,123,-87,-88,-127,77,127, 127,-85,-127,-127,125,37,97,-127,115,-127,-114,121,127,-14,5,127,-60,-127,127,-113,127,-112,-127,-109,127,-89,-127,-28,-127,-127,-73,114,29,-104,123,109,-56,-127,-71,97,65,127,127,-89,-101,-113,127,119, -61,31,-53,-93,-127,-20,29,-34,127,-28,-73,30,61,-70,-32,-33,-37,-36,36,-66,73,-71,-37,-39,55,-37,-46,-45,2,-76,-26,13,25,-110,127,51,-25,-61,8,-4,46,61,0,-86,-59,-42,68,37, 
  /* [0][2][][] */ -51,-116,-37,-37,-5,33,5,-58,-12,-77,-10,41,102,-127,-127,-66,-43,-19,61,83,79,-47,-30,-69,47,-58,-13,-102,71,29,87,75,95,-11,-39,55,-99,36,-15,38,18,56,28,-49,106,-86,-7,28, 100,-67,-101,-100,86,17,12,-56,59,-75,-14,46,102,-26,18,96,-24,-8,94,127,120,-68,-38,-55,112,-56,-21,-127,-30,49,-58,127,-14,-31,62,1,-127,51,-5,2,18,39,34,-56,127,-99,-23,49, -36,15,-51,-43,-84,-17,26,-14,66,-6,24,31,45,-43,115,-24,-93,4,20,53,103,-31,-10,3,69,-31,-5,-91,1,27,-16,29,-85,-22,82,32,-36,16,31,-36,10,60,13,-31,55,-42,-9,9, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0062297065742313862, 0.0029060249216854572, 0.0031429547816514969, 0.0031326080206781626, 0.0036738219205290079, 0.0042381240054965019, 0.0048258476890623569, 0.00176202692091465, 0.002495449036359787, 0.001063232310116291, 0.0029490161687135696, 0.0011180373840034008, 0.0075241401791572571, 0.23551659286022186, 0.0013098700437694788, 0.0069767213426530361, 0.1168077290058136, 0.00091528514167293906, 0.0023061844985932112, 0.0081527447327971458, 0.002866348484531045, 0.0044269245117902756, 0.0051604029722511768, 0.00077835633419454098, 0.0012652231380343437, 0.0049477443099021912, 0.0014313503634184599, 0.0026124804280698299, 0.017410265281796455, 0.0028013496194034815, 0.0020856624469161034, 0.0060052410699427128, 0.0048533407971262932, 0.00086328608449548483, 0.0027452846989035606, 0.0056382003240287304, 0.0011126799508929253, 0.016451077535748482, 0.0017394392052665353, 0.0045348792336881161, 0.002250957302749157, 0.0063288244418799877, 0.0023271085228770971, 0.00057482393458485603, 0.0064868503250181675, 0.0017925855936482549, 0.0083889458328485489, 0.0020729794632643461, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 6831, -541, 6012, 6948, 3159, 16921, 6662, -148, -200, -476, 2088, 308, 19439, -95999480, 3769, 12197, -77495760, -247, -699, 16023, 1557, 10, -963, 194, 3487, -1288, 17, 1925, 16119, 2228, 2500, 21805, 6631, 327, 280, -3329, 486, 11114, -347, 19889, 2735, 9804, -799, -126, 7957, -218, 14056, 4152, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00025342233129777014, 0.00043555200682021677, 0.0004954719333909452, 0.00023076871002558619, 0.00042095620301552117, 0.00013060148921795189, 0.00057472387561574578, 0.00080029561650007963, 0.00057731429114937782, 0.0030872647184878588, 0.00068940781056880951, 0.0023913532495498657, 0.00011858077778015286, 1.6894222687469096e-09, 0.00060240324819460511, 0.00025224348064512014, 1.6894222687469096e-09, 0.003864184720441699, 0.00062399619491770864, 0.0001993721816688776, 0.00051900558173656464, 0.0037515042349696159, 0.00027609866810962558, 0.0017390416469424963, 0.0010201714467257261, 0.00072283303597941995, 0.0016157751670107245, 0.00072450621519237757, 7.9804827691987157e-05, 0.0014972536591812968, 0.0012549398234114051, 0.0001163155393442139, 0.00014345241652335972, 0.0085187265649437904, 0.00042935574310831726, 0.00041336027788929641, 0.0029863344971090555, 0.00013307693006936461, 0.0022547801490873098, 0.00016851538384798914, 0.00083181413356214762, 0.00023380944912787527, 0.00027104018954560161, 0.0069554601795971394, 0.00055195105960592628, 0.0011067088926210999, 0.0001846629602368921, 0.00015853480726946145, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -7,-119,-6,-113,35,39,-127,41, 
  /* [1][0][][] */ 11,90,-75,-127,5,50,-94,103, 
  /* [2][0][][] */ 14,24,7,27,3,127,26,93, 
  /* [3][0][][] */ 67,87,-79,127,-125,-16,-20,52, 
  /* [4][0][][] */ -20,-127,25,6,61,-27,-45,-80, 
  /* [5][0][][] */ 115,60,-88,108,73,-58,127,107, 
  /* [6][0][][] */ 2,-22,-51,-33,127,47,21,1, 
  /* [7][0][][] */ 127,-22,-6,-64,73,24,85,-46, 
  /* [8][0][][] */ -27,-45,4,62,-13,27,0,-127, 
  /* [9][0][][] */ 85,-127,-34,60,27,35,21,-21, 
  /* [10][0][][] */ -127,-74,-9,42,21,3,-35,14, 
  /* [11][0][][] */ -38,-38,19,-88,-127,5,33,6, 
  /* [12][0][][] */ 18,48,-71,106,-114,-2,29,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -25,-59,3,-7,46,127,8,46, 
  /* [15][0][][] */ 9,0,16,-127,23,71,-26,73, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 8,61,127,29,-27,0,57,11, 
  /* [18][0][][] */ 127,-56,43,-61,-25,51,-83,78, 
  /* [19][0][][] */ -127,43,38,110,-108,-63,-110,65, 
  /* [20][0][][] */ -13,39,-57,96,-9,-127,-50,12, 
  /* [21][0][][] */ 24,53,127,-30,-25,-4,58,-5, 
  /* [22][0][][] */ -74,-4,-127,-6,-8,5,-56,20, 
  /* [23][0][][] */ -127,10,-54,-20,19,36,92,-104, 
  /* [24][0][][] */ -14,-11,-108,90,-97,13,122,127, 
  /* [25][0][][] */ 29,8,0,37,72,127,-4,-57, 
  /* [26][0][][] */ -61,-10,-127,-38,-1,12,-49,-27, 
  /* [27][0][][] */ 75,-83,-90,-103,104,127,76,-29, 
  /* [28][0][][] */ 90,24,-52,27,110,127,54,82, 
  /* [29][0][][] */ 36,49,127,-2,-15,-31,17,-7, 
  /* [30][0][][] */ -108,107,60,79,-68,-77,77,-127, 
  /* [31][0][][] */ -84,-127,-53,-31,111,-84,77,112, 
  /* [32][0][][] */ 28,-40,-90,127,-20,47,62,71, 
  /* [33][0][][] */ -5,37,-16,-87,-2,-51,2,127, 
  /* [34][0][][] */ -27,124,-19,-61,-1,-5,-13,127, 
  /* [35][0][][] */ 127,-88,-34,-3,-75,-5,-39,-70, 
  /* [36][0][][] */ 5,-20,2,29,10,127,-47,107, 
  /* [37][0][][] */ 53,2,-11,57,64,127,82,8, 
  /* [38][0][][] */ 10,-21,6,72,127,-23,-32,75, 
  /* [39][0][][] */ 38,32,46,-116,66,-77,-89,127, 
  /* [40][0][][] */ 59,21,127,53,27,48,69,60, 
  /* [41][0][][] */ 3,-11,25,29,-3,127,38,53, 
  /* [42][0][][] */ -48,52,127,36,-83,3,22,59, 
  /* [43][0][][] */ -46,-50,23,127,16,-13,-8,-127, 
  /* [44][0][][] */ -5,-9,-73,-53,127,-2,-11,3, 
  /* [45][0][][] */ -11,127,-69,-36,-12,5,66,-24, 
  /* [46][0][][] */ -127,-19,43,48,-3,25,-60,47, 
  /* [47][0][][] */ 121,64,88,2,-6,-42,127,55, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00059057213366031647, 0.0010150048183277249, 0.0011546415043994784, 0.00053778046276420355, 0.0009809909388422966, 0.00030435202643275261, 0.0013393291737884283, 0.0018649986013770103, 0.001345365890301764, 0.0071945223025977612, 0.0016065870877355337, 0.0055727791041135788, 0.00027633912395685911, 3.937008052901092e-09, 0.00140383280813694, 0.00058782496489584446, 3.937008052901092e-09, 0.0090050464496016502, 0.0014541527489200234, 0.00046461436431854963, 0.0012094839476048946, 0.0087424572557210922, 0.00064341677352786064, 0.0040526404045522213, 0.0023773943539708853, 0.0016844808124005795, 0.0037653816398233175, 0.0016883800271898508, 0.00018597615417093039, 0.003489180700853467, 0.0029244956094771624, 0.0002710602420847863, 0.00033429966424591839, 0.019851930439472198, 0.0010005651274695992, 0.00096328952349722385, 0.0069593158550560474, 0.00031012078397907317, 0.0052545107901096344, 0.00039270610432140529, 0.0019384489860385656, 0.00054486654698848724, 0.00063162855803966522, 0.016208915039896965, 0.0012862596195191145, 0.0025790601503103971, 0.0004303361929487437, 0.00036944748717360198, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -11752, -49140, -7772, -23607, -11510, -16567, -32786, -28081, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0013778939610347152, 0.0012981529580429196, 0.0023509657476097345, 0.00098269456066191196, 0.00093715876573696733, 0.0017038043588399887, 0.00080623419489711523, 0.0013667976018041372, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,0,7,12,127,9,11,-19,-4,-95,-55,-31,0,68,-3,0, 
  /* [1][0][][] */ 0,-9,-16,71,127,41,-2,9,-8,34,123,-68,0,32,-34,0, 
  /* [2][0][][] */ 0,-7,4,-11,-19,-25,6,-7,-1,15,-9,26,0,127,-11,0, 
  /* [3][0][][] */ 0,-8,-7,-127,104,7,81,19,8,91,3,31,0,14,6,0, 
  /* [4][0][][] */ 0,5,-22,26,-98,5,127,9,7,-89,1,19,0,-18,31,0, 
  /* [5][0][][] */ 0,10,8,2,-17,8,0,19,3,-11,-6,-31,0,5,127,0, 
  /* [6][0][][] */ 0,17,-36,1,75,-8,-13,4,10,-117,121,127,0,97,80,0, 
  /* [7][0][][] */ 0,37,-19,127,28,-20,12,15,-6,69,-32,19,0,-5,34,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.058560490608215332, 0.055171497166156769, 0.099916040897369385, 0.041764520108699799, 0.039829246699810028, 0.072411686182022095, 0.034264951944351196, 0.058088894933462143, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 29167, 401422, 7717, 7550, 215948, 9522, 323038, -26320, 3512, 27834, 14132, -445, 29959, 8522, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 9.2911614046897739e-05, 1.0022410606325138e-05, 0.00043960459879599512, 0.00039051109342835844, 1.5139592505875044e-05, 0.00036944838939234614, 1.1835665645776317e-05, 1.3819390915159602e-05, 0.00043577671749517322, 0.00019282902940176427, 0.00079450150951743126, 0.00072724185883998871, 0.00015045344480313361, 0.00027430447516962886, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,-16,-78,-126,38,-64,80,-77,-90,-3,-1,29,-127,9,54,-73, 51,-23,-127,127,127,-127,127,-127,-85,127,-127,56,-105,12,127,-25, 24,28,105,-2,-74,70,-89,78,-95,-27,9,-17,61,7,-99,-29, 
  /* [0][1][][] */ -127,-127,-18,13,-46,21,-26,13,-28,-1,8,-111,-49,9,-30,-14, -78,46,-55,-15,-10,-23,11,-27,-108,-91,22,-8,-104,-127,1,23, 14,2,76,2,2,33,-21,34,-127,7,3,0,-21,15,-3,43, 
  /* [0][2][][] */ -115,78,79,2,-10,45,-37,51,-77,-1,2,5,40,4,-30,23, 23,7,38,-2,-31,44,-31,21,-125,-14,3,85,-58,5,-31,-111, 21,10,26,0,2,13,12,23,-115,4,3,-127,107,6,15,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0039487434551119804, 0.00042595245759002864, 0.018683195114135742, 0.016596721485257149, 0.00064343266421929002, 0.015701556578278542, 0.0005030157626606524, 0.00058732408797368407, 0.018520509824156761, 0.0081952335312962532, 0.033766314387321472, 0.030907778069376945, 0.0063942712731659412, 0.011657940223813057, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 18369, -67969, 30965, 65396, -51444, 64781, -111664, -166025, 25699, 28883, 4683986, -1073741824, 31607, 13505, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00017760384071152657, 0.00024297194613609463, 4.0817143599269912e-05, 3.4589753340696916e-05, 0.00034679259988479316, 5.3831528930459172e-05, 0.00018890992214437574, 7.0645310188410804e-06, 6.4598949393257499e-05, 0.00011838645150419325, 1.2243792752997251e-06, 1.1533876076441629e-09, 0.00013287804904393852, 0.00010158088844036683, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 33,-4,-7, -25,-34,-21, -127,-120,-91, 
  /* [1][1][][] */ 14,9,0, -17,4,-25, -8,-32,-13, 
  /* [1][2][][] */ 9,25,-1, -5,7,-25, 28,-13,2, 
  /* [2][0][][] */ 11,11,-28, 46,98,-23, 20,-9,-22, 
  /* [2][1][][] */ 10,22,-27, 73,127,-27, 26,22,-22, 
  /* [2][2][][] */ 38,-17,-14, 72,21,-28, 32,-6,-15, 
  /* [3][0][][] */ -6,103,-4, -1,101,-23, -23,-5,-27, 
  /* [3][1][][] */ 2,111,1, 22,127,-21, -18,-6,-13, 
  /* [3][2][][] */ 6,45,5, 23,58,-2, -8,4,-19, 
  /* [4][0][][] */ 15,35,15, 1,19,21, -27,-18,12, 
  /* [4][1][][] */ -7,95,1, -20,39,-4, -29,-4,-23, 
  /* [4][2][][] */ 33,127,8, 20,90,7, -28,20,-7, 
  /* [5][0][][] */ 40,44,-111, 30,44,-96, 56,91,19, 
  /* [5][1][][] */ 37,-4,-127, 20,-15,-120, 26,40,-16, 
  /* [5][2][][] */ 74,68,7, 60,53,15, 31,41,0, 
  /* [6][0][][] */ 41,-71,62, 38,-109,37, -1,-37,4, 
  /* [6][1][][] */ 61,-90,93, 68,-127,84, 2,-36,32, 
  /* [6][2][][] */ 22,-49,47, 20,-49,58, -8,-1,35, 
  /* [7][0][][] */ 6,83,39, -81,13,29, 5,68,22, 
  /* [7][1][][] */ 28,60,57, -127,-38,36, 17,56,48, 
  /* [7][2][][] */ 28,119,80, 4,89,53, -23,70,36, 
  /* [8][0][][] */ 120,125,119, 120,125,119, 112,120,111, 
  /* [8][1][][] */ 120,125,119, 120,125,119, 113,121,112, 
  /* [8][2][][] */ 123,127,121, 123,127,121, 118,124,116, 
  /* [9][0][][] */ -23,56,15, -24,39,4, -9,31,-8, 
  /* [9][1][][] */ 37,127,30, 4,102,22, -32,29,13, 
  /* [9][2][][] */ -56,-30,-22, -43,-39,-34, 5,23,-15, 
  /* [10][0][][] */ -26,-89,-21, 37,95,17, -4,-12,-5, 
  /* [10][1][][] */ -64,-112,-18, 82,127,12, -10,-24,0, 
  /* [10][2][][] */ -35,-26,-2, 41,23,-11, 2,5,11, 
  /* [11][0][][] */ -70,-82,-66, -51,-97,-61, -36,-127,-91, 
  /* [11][1][][] */ -102,-104,-87, -93,-122,-103, -58,-97,-96, 
  /* [11][2][][] */ -23,-53,-87, 82,86,33, -48,-8,-59, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -49,-112,-23, -61,-127,-31, -11,-35,-12, 
  /* [13][1][][] */ 72,109,20, 63,118,26, 10,4,9, 
  /* [13][2][][] */ 9,-16,18, 15,-18,10, 7,-3,1, 
  /* [14][0][][] */ 47,-8,-34, 78,-16,-35, 40,-8,-18, 
  /* [14][1][][] */ 81,-32,-66, 127,-33,-56, 68,-20,-38, 
  /* [14][2][][] */ 69,-29,-44, 99,-30,-35, 73,-5,-21, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.9080731539797853e-07, 0.052975639700889587, 0.072473622858524323, 0.012174929492175579, 0.010317425243556499, 0.10344123095273972, 0.016056858003139496, 0.056348014622926712, 0.0021072069648653269, 0.019268561154603958, 0.035312287509441376, 0.00036520761204883456, 3.4403223025947227e-07, 0.039634838700294495, 0.030299527570605278, 3.7087357185328074e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.4291132390499115, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.34129917621612549, } };
const TfArray<1, int> quant50_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.48961928486824036, } };
const TfArray<1, int> quant53_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53760677576065063, } };
const TfArray<1, int> quant54_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.27358284592628479, } };
const TfArray<1, int> quant58_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.2595880925655365, } };
const TfArray<1, int> quant61_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.31042885780334473, } };
const TfArray<1, int> quant62_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.28814917802810669, } };
const TfArray<1, int> quant65_zero = { 1, { 38 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.377512127161026, } };
const TfArray<1, int> quant66_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.21905744075775146, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant69_scale = { 1, { 0.41501328349113464, } };
const TfArray<1, int> quant69_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 52, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2928, (TfLiteIntArray*)&tensor_dimension69, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
