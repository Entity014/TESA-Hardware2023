/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.11.2023 07:48:03

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 20252, -29506, -30715, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00024999675224535167, 0.00018980074673891068, 0.00018594613356981426, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 86,84,115,-70,-65,10,4,24,-12,68,27,4,-23,-62,69,10,-25,55,61,93,-2,-11,37,-53,-127,61,-40,-22,57,33,-16,6, 
  /* [1][0][][] */ 67,-43,-69,16,-14,127,-35,-8,123,-58,-4,-103,-66,106,47,-53,93,-44,-16,-96,-124,15,114,71,23,31,2,-14,-66,-53,-4,-24, 
  /* [2][0][][] */ -40,76,-81,81,85,-46,-45,118,94,31,127,-34,-101,-90,88,122,-87,-53,4,-117,73,118,-48,-102,101,-53,-18,-122,15,-81,86,-22, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0042396159842610359, 0.0032187707256525755, 0.0031534016598016024, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 644, 259, -35, -152, -45, 8, 321, -17, -40, 325, -69, 1320, -257, -204, 225, -41, -64, -370, 92, -310, 601, -187, -4, 108, 327, 5, -437, -250, -398, 31, -475, -377, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5759956265101209e-05, 4.3901814933633432e-05, 4.5447159209288657e-05, 4.2513798689469695e-05, 4.9189024139195681e-05, 3.9454618672607467e-05, 4.6611254219897091e-05, 4.2639127059374005e-05, 4.2680348997237161e-05, 4.3495663703652099e-05, 4.1258597775595263e-05, 4.5626962673850358e-05, 4.2369199945824221e-05, 4.4117645302321762e-05, 4.3487296352395788e-05, 4.3293912312947214e-05, 4.2932992073474452e-05, 4.2389787267893553e-05, 4.0396727854385972e-05, 4.1388360841665417e-05, 4.4842869101557881e-05, 4.7799112508073449e-05, 4.4842046918347478e-05, 4.9447429773863405e-05, 4.7640220145694911e-05, 4.2480503907427192e-05, 4.4381122279446572e-05, 4.049859126098454e-05, 4.2247254896210507e-05, 4.0454022382618859e-05, 4.3368469050619751e-05, 4.2724208469735458e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -30,-31,121,15,94,-2,-73,-89,64,-78,-91,16,49,16,-22,64,-33,-21,-53,-47,-61,-84,20,115,-92,29,86,-26,121,-23,-3,-75,85,-55,-83,80,-79,-69,-88,36,79,-68,-77,116,58,-89,110,-11,24,-40,-56,100,-64,-56,-78,110,17,78,116,-88,-78,107,-41,61,-9,26,79,95,59,108,90,-112,105,-83,30,97,-100,30,-46,39,64,15,87,10,-42,-26,-66,105,32,116,-2,-127,16,72,32,37, 
  /* [1][0][][] */ -63,31,-64,4,-49,80,43,19,85,-97,-100,85,62,-22,31,55,112,-38,45,114,-42,3,41,33,29,-2,-36,112,16,-1,97,-66,46,106,-5,25,50,64,-5,-60,-58,12,-14,-91,-29,37,-28,-44,-24,-83,115,54,23,85,-69,-43,26,96,67,83,-51,108,-78,-99,-66,35,83,44,91,25,22,17,-113,80,-43,50,86,-39,-36,69,-79,83,-45,-127,29,117,-64,-70,84,82,96,-2,85,92,23,-11, 
  /* [2][0][][] */ 36,33,-43,93,-24,-62,81,114,-96,81,-37,107,71,-18,76,-107,-54,-32,49,41,-99,-14,106,20,-21,66,92,31,-60,64,69,81,-75,-24,-87,-106,-75,83,127,-30,-117,-78,10,-4,-85,104,-32,-72,88,33,76,-92,-19,54,14,8,-63,81,-65,8,-25,77,-43,56,86,38,47,78,-99,58,15,-76,28,-78,37,36,-58,-20,3,9,29,-93,-17,-48,-4,-98,-22,-38,78,101,-2,-3,-49,-88,-53,-70, 
  /* [3][0][][] */ 77,-2,30,-30,-96,64,-113,24,51,13,66,-3,114,100,73,1,104,109,-56,31,127,-91,-68,-119,-46,-107,-75,102,41,-72,90,13,-49,-32,-12,-17,-102,-20,16,52,-21,-88,-102,-8,77,32,-43,-87,73,-90,60,8,94,35,99,-89,-111,-114,-111,-67,-84,18,-24,89,52,-33,-64,-29,-26,-74,4,113,26,-107,65,-57,47,95,98,-67,-87,-118,51,99,30,50,-44,-113,-74,50,-10,-100,103,-82,-82,44, 
  /* [4][0][][] */ 49,85,-12,44,-42,-8,30,-5,54,69,-6,34,40,-27,-9,-65,-21,4,-64,24,103,-79,73,24,-46,-1,62,-58,-42,47,-56,-41,64,104,20,-95,-54,0,-127,45,-38,-49,-63,-86,33,95,37,52,23,-31,-2,-56,-87,46,-66,27,40,-78,30,7,18,-83,-22,-49,-42,50,1,-29,29,-86,-86,-63,-42,18,100,38,64,-22,-5,-55,8,-34,-73,-16,2,65,79,6,-93,-60,28,48,35,97,-76,-10, 
  /* [5][0][][] */ 111,-99,79,76,39,-111,29,33,109,-121,-1,-64,26,101,37,42,69,70,-93,117,34,52,17,-30,-116,-57,-13,-115,53,45,24,-102,-32,-2,-75,21,-121,-37,34,26,-93,-56,44,107,-35,30,42,-69,-115,123,14,44,15,9,46,-18,101,58,-54,-47,30,-69,50,-63,-22,113,-34,33,88,6,103,-92,-48,92,-49,-82,17,-57,13,86,122,32,20,127,-84,93,-6,48,72,-103,120,106,-24,33,87,-81, 
  /* [6][0][][] */ 13,-29,123,76,-58,-51,6,77,-12,-55,12,-70,73,59,115,-96,54,3,12,88,-70,-97,116,65,-36,-77,-4,-31,-12,-112,46,-76,-87,-108,-31,-86,18,38,-85,77,82,55,26,3,-102,98,-84,-32,-73,15,-28,-61,76,-54,88,-27,17,-5,-61,127,-89,34,60,-70,-36,64,105,-44,68,-3,-79,-4,62,-67,-56,-18,-73,-73,-44,-23,33,-11,43,-28,-60,-75,-27,-89,80,91,107,9,-41,-63,68,-27, 
  /* [7][0][][] */ 118,66,-48,-44,-93,127,-19,-12,119,1,-98,5,63,-87,48,66,51,21,-2,124,60,35,-8,87,-99,103,45,50,-80,119,-19,40,26,27,70,96,-118,92,-26,-27,99,-74,87,64,54,-1,108,-111,55,-51,-103,-64,-31,91,24,38,119,-90,10,-66,14,-22,84,-110,-73,-55,68,25,-108,22,63,92,87,24,64,52,-58,52,-100,42,94,-36,-11,-74,88,36,-111,96,88,9,78,64,-52,-33,3,-62, 
  /* [8][0][][] */ 17,31,-56,-96,51,43,-75,-42,5,38,45,100,17,-44,-86,-75,-70,101,-75,29,37,-27,80,110,-127,102,51,63,-71,34,-87,123,100,-32,50,-4,112,7,-41,73,85,106,-110,-122,-8,-25,-18,106,23,-85,-54,7,-83,-7,-24,-101,50,114,-88,99,119,31,52,120,-27,-43,-25,103,-78,57,26,2,80,73,8,14,-40,102,83,70,40,81,-105,-79,28,46,75,-36,43,-34,-97,109,-78,-91,-39,70, 
  /* [9][0][][] */ -1,11,126,59,126,-105,-43,-91,47,55,-4,53,-28,-70,-98,-10,17,1,-90,-73,5,110,-89,-98,127,-9,-7,40,-6,-36,-82,99,59,3,33,-17,-54,15,2,-39,48,-57,66,-78,80,25,-104,63,51,-11,-81,-51,97,-77,-71,99,78,-42,-14,23,-90,112,77,-81,-56,7,115,49,-44,112,120,-80,26,77,-106,-78,-72,-92,-34,111,33,43,99,30,-40,-95,55,-16,101,32,-23,106,115,-2,58,-29, 
  /* [10][0][][] */ -66,82,84,-71,-39,115,112,17,40,27,23,-84,111,86,-37,4,-41,87,-104,-60,-15,28,56,-75,6,55,-120,-127,-57,89,-98,-86,88,106,124,71,-56,9,-52,37,-35,123,-116,-46,-100,-60,0,-63,-1,1,46,14,58,24,-61,-31,-106,-16,37,-56,3,63,118,46,119,-81,-103,-22,17,-22,-102,-65,91,61,-85,104,-11,62,68,18,80,-1,65,107,-107,72,104,-26,42,11,-17,-83,-53,-45,-44,-66, 
  /* [11][0][][] */ 112,39,17,119,127,48,75,75,122,122,-54,112,-23,-50,59,-44,-27,-87,79,16,30,105,56,-70,-66,-116,-8,97,96,-35,36,-11,-84,-44,61,58,-31,86,-1,-47,-14,110,-43,46,-25,-41,-86,-59,83,93,108,34,-46,-66,27,21,-36,-50,-5,-49,-80,106,64,-10,48,94,-18,32,63,71,-41,-60,63,95,-60,83,-65,71,-22,107,-99,5,-45,-51,57,-62,31,-28,-83,22,40,-103,-68,-39,-65,-31, 
  /* [12][0][][] */ 7,64,-55,-5,94,-7,-42,35,-84,54,-21,8,-52,6,42,-84,-106,-41,-49,-92,18,-16,12,92,-68,-59,94,-98,89,2,-44,109,-94,-78,-52,10,-5,-84,-17,37,109,33,-119,-45,-29,-92,-48,113,-52,-127,-87,96,43,-7,-93,77,-28,-66,47,66,51,119,-13,47,101,26,-51,114,48,96,43,65,80,109,-24,-7,-45,32,-124,-100,-66,101,38,7,-44,25,49,108,-103,-118,100,35,95,-25,20,70, 
  /* [13][0][][] */ 121,-52,89,79,91,126,72,39,62,-94,13,-12,91,62,54,-39,-112,-63,-79,44,62,-38,112,-54,-63,59,9,7,-91,-66,90,46,56,95,-24,47,-72,-28,9,69,-58,70,-57,15,-44,36,7,-44,40,105,-38,-84,-115,22,96,-80,-44,38,-25,-71,-33,127,-55,35,-33,-53,-103,87,-23,-8,89,-13,-81,52,-77,-44,-99,60,76,-59,62,-98,86,38,-72,-89,93,127,-18,-47,-80,70,106,-48,77,4, 
  /* [14][0][][] */ -52,-103,96,58,76,-15,-9,-116,-80,-29,72,88,-35,-89,-83,-90,-42,-53,5,39,-39,37,2,68,-127,-56,-19,40,-104,-105,-65,50,104,-21,-28,1,103,121,33,-106,0,-106,38,92,73,-106,69,-80,117,44,67,66,98,-16,-3,23,-53,-10,54,85,-18,-81,-17,87,-109,-5,80,-109,-76,-90,-92,89,-11,91,49,-69,65,-105,60,26,57,-38,-110,-23,-105,-82,-124,113,116,15,89,-41,77,115,-6,67, 
  /* [15][0][][] */ 14,-29,-35,77,80,-82,64,-100,64,-15,-70,-15,114,8,-85,-127,87,16,-87,33,57,22,72,110,64,53,44,91,23,67,64,-99,3,13,-56,-10,-81,118,98,-64,21,117,-45,-31,30,-76,-38,-73,-5,-76,7,33,-94,-93,-40,3,73,52,-39,100,-34,-82,-4,95,-39,96,-68,7,-64,0,63,-62,19,-20,67,-112,7,54,107,75,-82,62,-96,-71,-121,-34,-91,35,94,74,-117,-52,62,116,-101,106, 
  /* [16][0][][] */ -55,8,98,-70,46,123,-56,23,43,56,-101,89,-12,-55,-58,-50,112,85,62,79,106,72,-37,48,-30,76,-60,57,-105,29,54,23,-89,71,55,70,-23,56,-58,-64,28,-48,73,98,65,115,112,-27,-53,-104,2,126,-58,107,68,41,24,100,67,18,108,120,50,84,70,24,-45,96,57,107,-36,-20,38,108,51,89,-8,97,-109,-9,27,-86,51,31,22,110,107,23,70,20,-17,127,65,-27,-70,36, 
  /* [17][0][][] */ 28,-119,23,77,-44,-121,-75,-103,36,-96,79,42,94,54,-124,42,25,47,104,108,-103,-21,7,-60,20,61,-87,20,100,-62,-40,70,-40,-31,26,-1,-57,95,-94,-38,-104,-49,-22,-17,0,5,80,-119,79,100,-22,19,-24,73,94,-83,-125,81,-92,-121,25,-103,68,92,-93,-83,36,-112,-120,-10,104,23,8,-127,-73,60,110,-56,35,-66,3,-24,-86,-102,-122,66,74,-42,13,71,-108,-127,-20,89,5,9, 
  /* [18][0][][] */ -101,108,126,-70,-4,-93,-110,27,-8,94,-111,-47,-50,36,70,-60,28,-30,66,-22,102,-44,26,-80,39,-98,-19,122,35,36,5,49,42,-32,-112,-107,-25,35,-10,67,-44,0,-38,3,-117,21,27,1,17,-27,70,33,-110,-14,11,92,-56,33,-16,-122,83,127,11,37,-69,-126,-30,93,74,-68,-76,112,-108,-31,-99,-105,58,63,-2,-83,-58,-11,-34,-67,111,-36,77,71,-118,-82,-66,115,92,-57,51,-11, 
  /* [19][0][][] */ 16,27,77,40,68,-91,96,97,94,-68,26,-16,-101,31,-60,59,72,-111,115,55,-27,80,-60,10,82,-86,26,-71,-98,-126,-70,43,78,-88,31,-5,5,-75,-57,-107,42,-123,-87,7,-92,27,75,-99,-32,35,-45,42,-35,12,2,-14,21,99,-4,-30,53,-54,99,60,-73,-6,-29,-4,-14,53,76,-56,-67,-127,-62,-84,-28,-118,12,110,56,-119,-34,76,-93,-11,6,-8,88,27,-4,61,-37,113,68,-52, 
  /* [20][0][][] */ -13,78,77,101,-70,79,33,75,27,10,-72,-4,-3,101,59,-67,-35,-23,-52,-36,37,-23,-55,-52,83,-80,-90,61,41,7,-36,104,90,62,-6,59,42,-15,-9,-94,-67,-14,-60,-90,-10,-51,-59,124,61,-99,-85,29,67,127,59,13,98,75,103,94,123,-46,-73,-40,-37,-61,-28,17,-82,-58,-53,94,-52,-86,49,27,111,94,117,107,81,23,95,-33,60,113,-2,67,36,95,32,55,41,26,-10,13, 
  /* [21][0][][] */ 84,64,49,-99,66,-79,61,-1,-5,-70,-69,21,13,33,-52,-89,-101,-25,18,-5,99,-50,58,-83,30,-75,-29,51,-4,11,-8,-24,8,18,-88,-106,84,88,-127,-32,-6,6,22,-24,-88,-75,-69,78,-20,-72,1,77,20,63,-86,30,-54,48,-43,98,54,-91,14,-6,63,24,-39,-63,-98,-4,47,72,28,-21,61,49,-102,-34,51,91,9,88,35,-65,19,-87,55,-76,-92,69,79,-107,-39,-57,63,-25, 
  /* [22][0][][] */ 31,-52,-66,-105,80,-53,105,45,-95,88,-74,-93,125,-116,-110,-82,40,83,-127,-53,83,-71,31,30,87,4,-104,105,-51,-71,-57,-103,46,53,12,14,8,-16,-60,-112,2,-12,5,92,54,-110,89,-26,-67,-75,-8,-12,-72,-98,-41,35,-32,-27,-14,-33,96,-70,-72,-100,-80,20,-111,-49,109,107,-22,-7,-61,8,45,-85,42,-50,62,88,107,-111,-77,-106,79,82,96,-29,-56,33,-65,62,8,26,-24,103, 
  /* [23][0][][] */ 65,-68,3,37,76,-95,1,-116,46,-65,78,78,16,-96,12,-28,82,-23,-102,94,82,-75,94,-33,-15,5,76,12,61,40,72,-29,-21,36,7,42,94,-3,-127,7,-86,3,5,-89,-57,-69,106,8,75,-93,-79,-34,52,-57,-46,82,-78,-6,82,42,-101,-69,-33,8,38,39,-108,-94,61,-10,93,-73,3,-19,-43,-82,39,-18,82,107,-37,-48,12,-77,89,14,104,-10,-82,42,85,1,92,-45,-20,80, 
  /* [24][0][][] */ -60,-35,-111,-56,-99,-76,-51,-113,67,100,85,20,127,67,-29,-105,-67,62,12,-23,110,-68,-42,-28,18,-22,78,44,82,83,10,-58,33,28,63,31,-54,-60,17,-6,-49,-74,91,-1,33,-27,57,73,-47,-52,16,29,52,77,73,-48,23,87,26,7,106,-28,57,105,-82,91,-36,-66,-83,45,-47,-4,-19,37,113,87,76,-62,-84,-64,-64,-69,-33,-99,9,74,-4,-82,45,-83,-14,-60,3,43,-72,29, 
  /* [25][0][][] */ -92,-60,-79,-16,93,-54,-109,54,41,-95,-41,45,62,-12,-110,-16,-67,53,30,-119,59,84,-11,-60,38,-42,-112,35,78,-92,40,113,90,-119,68,74,109,-59,-11,-23,-87,94,-112,12,99,40,73,34,-107,111,-84,9,39,-31,-65,7,-30,51,-113,81,105,79,51,41,12,79,-21,-14,-74,-22,-30,-126,32,-116,69,19,65,75,10,20,52,39,-57,82,-74,-49,-102,-92,-31,-44,106,19,-127,-9,-8,-109, 
  /* [26][0][][] */ 58,-116,-36,-23,-98,-8,-17,-27,-109,-127,99,75,-72,-49,3,-18,100,27,-93,-61,12,60,88,5,22,63,7,30,1,15,-92,-1,-25,-61,-98,-98,-76,80,-62,102,-98,95,48,22,-74,70,-40,92,-23,20,-1,97,-7,-45,-9,-105,97,64,47,16,3,-106,71,-16,117,-23,-64,54,-78,70,76,90,75,-85,-82,-5,43,-114,-99,6,-30,77,77,-69,73,-3,-49,14,-83,107,-5,43,-52,105,52,82, 
  /* [27][0][][] */ 11,6,-70,-105,-58,-55,-77,-5,43,100,37,-118,-26,56,83,-33,64,-22,66,-92,-103,8,-34,-28,-81,43,-120,-6,64,26,-39,-14,64,70,-96,-96,-99,-72,-85,90,-104,15,24,14,101,21,68,106,93,69,58,-84,-82,-92,-12,-41,119,-30,-125,-84,-65,-70,-38,52,51,-54,-121,109,47,6,-127,5,59,-58,-10,-95,44,-73,90,109,85,-31,118,-64,-83,-91,-40,28,-55,-9,-33,-61,55,14,87,54, 
  /* [28][0][][] */ 93,-12,80,42,-105,-63,-105,-77,-45,-113,51,64,-77,-93,-4,92,84,106,-72,72,-35,15,-119,-84,-127,75,-92,-66,-77,-75,-11,-25,-113,9,83,63,7,-117,-42,24,97,34,-99,40,-117,-19,5,43,15,-62,-78,-38,-77,18,48,34,55,-22,78,42,-11,-48,-91,-3,51,65,-30,78,-81,23,-113,-50,63,33,-13,-110,-122,-75,-95,38,-84,-99,113,-39,53,-123,57,-92,-112,-77,-39,-64,-46,49,-102,-75, 
  /* [29][0][][] */ 55,62,74,-47,-72,3,-122,31,108,-11,-92,-100,100,-108,-47,-42,-101,106,44,-76,-83,-31,63,10,-18,4,-48,-14,-102,-16,108,-4,52,3,-86,-53,0,108,16,101,50,113,-46,94,0,111,-58,-21,19,-12,55,-104,99,-104,115,45,-98,57,-56,124,-127,119,-104,-61,-63,-66,61,94,98,-92,45,-77,117,81,66,38,118,-58,-29,42,-7,-85,-14,-84,68,122,49,82,-42,101,89,83,-110,12,-7,58, 
  /* [30][0][][] */ 17,-76,-72,31,-97,12,-75,-22,110,-26,-12,-44,-99,15,46,10,-16,25,91,-112,35,-110,-122,2,-113,13,-73,113,-14,-107,-98,-4,-87,-80,-124,-64,4,-29,-11,20,76,-83,-20,85,91,-49,89,47,-80,74,16,-111,93,-59,-22,89,-82,-55,-83,-55,-105,-15,-83,-28,-111,-97,-104,87,-68,104,46,-36,-89,93,27,-92,-58,-81,-85,-64,18,26,-109,-23,-117,16,-109,104,-43,-127,73,53,-34,-14,-1,-73, 
  /* [31][0][][] */ 78,-96,33,103,49,58,-65,-101,-31,-24,-85,-94,116,-127,-53,108,-67,-96,41,44,60,31,-36,102,44,-119,32,38,-78,-77,43,104,14,17,-97,-10,92,-36,-64,-116,56,-73,-33,27,0,-59,-44,19,66,23,93,-35,-112,-62,-87,19,-122,70,2,111,-43,-5,82,-79,66,108,-50,-81,68,-122,-119,8,-102,-48,-1,3,-64,-52,45,111,-82,-47,52,69,52,92,-96,13,13,-58,-86,-60,8,100,-9,-24, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019447981612756848, 0.0018658271292224526, 0.0019315042300149798, 0.0018068363424390554, 0.002090533496811986, 0.0016768212663009763, 0.0019809782970696688, 0.001812162809073925, 0.0018139147432520986, 0.0018485656473785639, 0.0017534904181957245, 0.0019391458481550217, 0.0018006910104304552, 0.0018749999580904841, 0.0018482099985703826, 0.0018399913096800447, 0.0018246520776301622, 0.0018015658715739846, 0.0017168609192594886, 0.00175900524482131, 0.0019058218458667397, 0.0020314622670412064, 0.0019057869212701917, 0.0021015156526118517, 0.0020247092470526695, 0.0018054214306175709, 0.0018861977150663733, 0.0017211900558322668, 0.0017955083167180419, 0.0017192959785461426, 0.0018431599019095302, 0.0018157787853851914, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1788, 2896, 7230, 2196, -3349, -3149, 17258, 1529, 2116, -1586, 8487, -282, -5916, 1763, 12769, 5849, 13306, 4312, -3785, -4721, 3570, 27827, 18952, 17156, 1055, 768, 3312, 2433, 2218, -3710, 5917, -2485, -247, 5332, 48, 773, 7839, 4104, -1121, 4570, 6564, 5637, 4277, 9309, 3607, 3357, 1543, 5792, 4721, -5771, -5189, 377, -177, -1411, 1789, -23, 172, -682, -3540, 9439, -850, 1372, -988, -1519, -2949, 5173, 20535, 1667, -1769, 648, 1215, 1878, 1306, -891, 505, 8208, -408, 15189, 15738, -814, 6554, 1412, -471, 996, 10238, 6331, 3330, 1079, 4927, 3386, -238, -6365, 555, -1498, -1435, -1904, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00035361057962290943, 0.00054483744315803051, 0.00033194985007867217, 0.00040570303099229932, 0.00031868016230873764, 0.00046733915223740041, 0.00019253602658864111, 0.00048311342834495008, 0.00028879885212518275, 0.00042824761476367712, 0.00022864868515171111, 0.00026599623379297554, 0.00042604739428497851, 0.0015832027420401573, 0.00024272859445773065, 0.0002008060400839895, 0.00014043995179235935, 0.00033529504435136914, 0.00050703302258625627, 0.00035637625842355192, 0.00017347776156384498, 9.6603303973097354e-05, 0.0001616441149963066, 9.785017027752474e-05, 0.00018513313261792064, 0.0006264527328312397, 0.00089208135614171624, 0.00044340585009194911, 0.00023776425223331898, 0.00052689271979033947, 0.00024879752891138196, 0.00031184963881969452, 0.00020684447372332215, 0.00021745139383710921, 0.00045036981464363635, 0.00032584831933490932, 0.00024376872170250863, 0.00026007814449258149, 0.00048949650954455137, 0.0003813454823102802, 0.00019440795585978776, 0.00045931409113109112, 0.00035229965578764677, 0.00025041445042006671, 0.00053250830387696624, 0.00030018718098290265, 0.00033390981843695045, 0.00037021818570792675, 0.00028843086329288781, 0.00022877697483636439, 0.0003076441353186965, 0.00024140073219314218, 0.0005326451500877738, 0.00021202286006882787, 0.00043649080907925963, 0.00043033630936406553, 0.00059495313325896859, 0.00041542670805938542, 0.00043431215453892946, 0.00019589178555179387, 0.00087424501543864608, 0.0005018634838052094, 0.00027926921029575169, 0.00051920674741268158, 0.00064186187228187919, 0.00037082034396007657, 0.00010647271119523793, 0.00023169032647274435, 0.00065452925628051162, 0.00044910024735145271, 0.00029548027669079602, 0.00026967658777721226, 0.0010167164728045464, 0.0004614240606315434, 0.00034056688309647143, 0.00026427707052789629, 0.00034059907193295658, 0.0001235994859598577, 0.00011577219993341714, 0.00022540234203916043, 0.0002237362350570038, 0.00023269488883670419, 0.00020033313194289804, 0.0002294444857398048, 0.00017963460413739085, 0.00037689495366066694, 0.00068985810503363609, 0.0002713788126129657, 0.0001455597230233252, 0.0006112557603046298, 0.0003037747519556433, 0.00030775580671615899, 0.00037569954292848706, 0.00069606432225555182, 0.00044365230132825673, 0.00022690725745633245, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -31,102,2,-127,-40,-25,-34,-74,-28,5,-9,66,35,-53,-26,53, 
  /* [1][0][][] */ -27,18,-69,-7,-31,-39,15,-75,56,59,-67,24,-6,-4,53,-127, 
  /* [2][0][][] */ -15,33,-59,39,34,37,-39,-105,123,-68,-4,-5,-1,127,-100,20, 
  /* [3][0][][] */ 36,-62,13,-103,16,-23,9,4,127,11,90,53,-17,47,15,120, 
  /* [4][0][][] */ -99,61,9,49,2,-12,12,44,-7,6,22,-36,-127,-23,-19,33, 
  /* [5][0][][] */ 3,68,113,-1,11,76,-90,70,-65,75,-37,-49,39,-55,-127,24, 
  /* [6][0][][] */ 63,-60,122,-127,41,-7,-58,114,-82,-98,51,-28,-2,92,-19,84, 
  /* [7][0][][] */ 31,104,-23,-49,84,13,6,-35,127,99,-12,30,17,-15,59,37, 
  /* [8][0][][] */ 20,-92,5,-89,18,-60,14,-76,19,54,65,-13,23,127,81,63, 
  /* [9][0][][] */ 16,-31,2,127,45,-7,35,-45,-49,118,33,-15,-11,-50,-14,-13, 
  /* [10][0][][] */ -17,28,-48,-127,1,5,-1,27,12,-54,5,-42,-2,-44,-13,32, 
  /* [11][0][][] */ 1,15,18,-21,78,-29,85,-65,-92,29,-9,21,7,127,-65,-22, 
  /* [12][0][][] */ 63,-42,-127,-13,23,-85,9,15,1,58,-93,-55,-20,106,4,40, 
  /* [13][0][][] */ -12,12,-22,10,6,-127,-6,21,2,-14,8,-4,8,-12,9,12, 
  /* [14][0][][] */ 13,-23,105,-26,71,12,-127,-86,-9,-35,40,31,8,-60,-26,-42, 
  /* [15][0][][] */ -101,22,-21,-63,-2,7,127,18,-40,37,75,-42,-3,71,72,6, 
  /* [16][0][][] */ 30,68,127,91,-1,17,85,65,-104,3,-85,-21,14,6,-1,-73, 
  /* [17][0][][] */ -31,-99,-13,27,-70,-22,-58,10,-127,-36,7,-52,4,38,51,-32, 
  /* [18][0][][] */ 7,46,11,64,46,11,17,-7,79,38,-23,-28,14,127,48,13, 
  /* [19][0][][] */ 3,-3,34,5,90,22,-85,-63,-104,-67,-43,-127,-25,-47,-4,-25, 
  /* [20][0][][] */ 87,-16,-74,-40,-4,-107,19,15,-70,18,-127,-34,36,9,31,11, 
  /* [21][0][][] */ 56,-14,105,-11,13,23,6,114,38,-51,127,67,-26,126,31,79, 
  /* [22][0][][] */ -21,51,-43,127,-59,8,100,57,-22,20,-30,18,24,9,18,3, 
  /* [23][0][][] */ 92,1,106,-89,58,-3,-17,40,0,8,-11,-43,11,-10,-127,36, 
  /* [24][0][][] */ -127,40,16,-16,6,103,21,-20,1,25,111,-3,-86,19,64,-33, 
  /* [25][0][][] */ 33,26,11,21,8,8,66,-58,-9,-127,-21,-27,-5,-30,11,24, 
  /* [26][0][][] */ -37,-4,6,15,-43,-8,-44,-24,-105,-33,2,-29,20,127,-48,45, 
  /* [27][0][][] */ -1,25,6,61,40,-30,-22,-34,52,5,-29,-4,4,127,-7,18, 
  /* [28][0][][] */ 21,59,67,59,127,-8,19,51,-73,-10,-38,-23,14,92,34,-37, 
  /* [29][0][][] */ 9,-10,6,13,27,-7,-1,31,-25,-7,-24,-127,1,-20,-15,8, 
  /* [30][0][][] */ -28,87,-47,79,-37,-14,51,-127,-39,62,-11,1,60,40,75,83, 
  /* [31][0][][] */ -48,-26,-8,-70,-1,4,-55,-105,30,90,-4,-127,-43,-54,17,18, 
  /* [32][0][][] */ -127,-91,-15,60,49,31,-25,4,-12,-52,-119,42,71,-1,72,83, 
  /* [33][0][][] */ -1,-39,-48,-12,-103,-18,-95,-6,59,10,5,-58,39,-124,127,40, 
  /* [34][0][][] */ 52,-15,59,19,38,12,-53,75,-85,-49,60,16,12,-9,-11,127, 
  /* [35][0][][] */ -34,55,-80,19,-17,-22,47,-127,82,88,-92,-5,13,-1,81,-125, 
  /* [36][0][][] */ -32,37,0,84,27,9,127,-3,-25,13,-38,-23,-30,4,-46,-23, 
  /* [37][0][][] */ 19,-16,17,-56,10,-10,-50,-38,-67,8,0,0,-1,-127,65,-38, 
  /* [38][0][][] */ 38,86,-28,-64,127,-11,34,-50,122,85,-15,-4,-2,-46,73,23, 
  /* [39][0][][] */ -38,75,-7,-127,-19,16,-38,31,42,-83,-29,-31,23,76,37,29, 
  /* [40][0][][] */ 10,-27,15,-78,7,-16,-17,-33,-127,-8,-15,-26,-7,-97,84,-55, 
  /* [41][0][][] */ -5,-22,-48,-22,1,-39,11,-13,-35,13,-52,-11,-127,6,28,37, 
  /* [42][0][][] */ 125,97,-27,-23,-72,-47,-12,-61,16,27,101,-61,-57,56,97,-127, 
  /* [43][0][][] */ -35,117,-64,-1,60,-4,127,-44,69,82,-31,17,32,-118,-90,-58, 
  /* [44][0][][] */ -30,-17,-2,-44,43,-1,-80,-127,-24,-14,0,-4,-10,-29,66,-52, 
  /* [45][0][][] */ -27,54,-127,-40,37,-65,35,-66,21,39,16,-74,28,-40,47,-29, 
  /* [46][0][][] */ 2,6,-19,-88,-17,19,30,-39,-127,-35,2,4,-4,-119,61,-28, 
  /* [47][0][][] */ 7,51,15,-23,122,-22,-28,11,-65,30,-13,19,8,-6,127,-18, 
  /* [48][0][][] */ -127,-90,-23,42,70,6,3,-16,3,-9,-120,53,58,8,98,48, 
  /* [49][0][][] */ 9,20,101,84,122,4,53,38,-115,-41,-28,-67,20,127,15,-66, 
  /* [50][0][][] */ 36,-23,-80,-2,37,-127,-42,-17,-11,-13,8,-34,35,-15,-13,1, 
  /* [51][0][][] */ 12,34,37,10,22,3,0,14,-127,46,0,-117,12,-99,-21,85, 
  /* [52][0][][] */ 13,57,9,55,57,-3,8,59,92,95,-19,-53,36,127,68,23, 
  /* [53][0][][] */ 6,-53,-23,-17,-100,-18,-95,5,40,15,6,-64,36,-127,125,18, 
  /* [54][0][][] */ 38,-7,-35,14,127,82,-113,-31,-69,-3,-24,-71,1,-39,-22,-44, 
  /* [55][0][][] */ 47,-11,9,6,40,-30,-64,-127,-27,-60,-45,16,-10,-23,14,-11, 
  /* [56][0][][] */ -13,10,23,-27,-11,-31,-107,67,-16,127,-10,-19,27,1,1,13, 
  /* [57][0][][] */ 3,21,-40,-6,-49,-38,127,75,-26,22,-12,-12,28,35,94,-14, 
  /* [58][0][][] */ 51,26,-127,39,101,111,-31,57,-100,-42,4,12,-34,32,-5,-31, 
  /* [59][0][][] */ -89,63,102,24,-74,-68,114,127,15,11,26,-10,10,8,76,1, 
  /* [60][0][][] */ 15,2,-57,-5,15,-127,-27,-6,-18,-27,-16,-32,32,-13,6,14, 
  /* [61][0][][] */ 17,-8,24,127,73,21,31,9,-89,1,18,38,-10,22,27,-53, 
  /* [62][0][][] */ -32,127,16,-50,-35,-14,-84,54,-29,-67,-96,-63,0,-98,-56,-36, 
  /* [63][0][][] */ -43,25,-27,127,-75,14,-64,-31,-64,-29,-32,-41,35,65,30,38, 
  /* [64][0][][] */ 3,2,5,50,12,16,-8,72,35,9,-7,-37,-17,-127,51,-6, 
  /* [65][0][][] */ -9,-41,17,-127,41,-37,68,-32,-12,40,5,-125,1,12,1,-51, 
  /* [66][0][][] */ 46,-25,87,-15,15,4,-22,127,25,-60,84,53,-23,117,23,61, 
  /* [67][0][][] */ -6,61,-12,-127,-8,4,-53,39,89,-96,-24,-7,31,87,67,31, 
  /* [68][0][][] */ -45,39,127,4,8,11,5,-3,-44,-26,-13,-34,19,-13,93,-29, 
  /* [69][0][][] */ 127,88,-4,10,-74,-27,-24,-34,13,21,94,-65,-59,67,51,-102, 
  /* [70][0][][] */ 38,12,-64,-3,-40,37,74,127,-38,89,-37,0,19,79,-29,12, 
  /* [71][0][][] */ 15,-7,-7,13,8,-84,-7,27,-34,20,-79,11,-127,-3,49,46, 
  /* [72][0][][] */ 17,15,-127,18,16,12,21,105,-38,-19,8,-3,24,21,-8,6, 
  /* [73][0][][] */ -49,31,38,0,44,-23,-69,-127,14,-79,28,-24,21,-46,27,-8, 
  /* [74][0][][] */ 9,27,32,127,8,-16,-97,85,-83,7,-61,44,22,-124,52,-97, 
  /* [75][0][][] */ 1,19,-53,8,10,-14,4,-6,101,21,-17,1,8,127,-31,5, 
  /* [76][0][][] */ 6,-18,3,25,8,-15,-17,70,23,-25,-17,-127,-10,-5,6,7, 
  /* [77][0][][] */ -6,32,-23,127,-58,13,86,90,0,31,-19,24,-5,-19,-8,-7, 
  /* [78][0][][] */ 28,-2,22,-127,41,-43,-52,33,11,-65,-7,-57,33,124,28,56, 
  /* [79][0][][] */ -7,-102,-87,-64,-95,-11,22,-88,127,12,26,57,15,47,53,-49, 
  /* [80][0][][] */ -37,17,94,-79,5,-6,35,-103,-75,26,-53,-127,36,87,53,-33, 
  /* [81][0][][] */ -39,40,-127,24,65,-125,-18,51,-9,-46,60,-1,25,2,14,-2, 
  /* [82][0][][] */ 127,-3,-1,20,18,-107,-11,22,-12,-8,-96,1,109,11,-10,21, 
  /* [83][0][][] */ -44,86,-105,-83,-36,-6,52,-127,52,35,-38,-122,24,55,39,92, 
  /* [84][0][][] */ -30,15,54,-43,-5,-37,58,-127,-47,37,-16,-59,30,42,79,1, 
  /* [85][0][][] */ -78,121,21,-127,-82,-35,-34,-7,-65,-13,-76,15,3,-9,-86,-22, 
  /* [86][0][][] */ -9,12,-21,1,-27,-22,127,16,-5,-30,-2,1,13,35,67,-20, 
  /* [87][0][][] */ -33,-32,5,-122,10,-30,60,-17,-2,17,-6,-127,-21,5,10,-44, 
  /* [88][0][][] */ 127,-17,44,-9,22,-107,-24,23,-67,40,-115,-65,28,30,84,2, 
  /* [89][0][][] */ 34,-29,-33,-48,34,-20,-33,-2,-41,17,49,-60,127,-14,35,-58, 
  /* [90][0][][] */ 0,-41,40,-45,72,8,-48,90,57,-76,-29,-22,-8,105,8,-127, 
  /* [91][0][][] */ -50,1,-20,-51,12,-8,-24,-90,-1,46,-14,-127,-17,-17,-8,25, 
  /* [92][0][][] */ -29,28,42,19,1,-127,20,1,1,-32,0,-21,5,-20,17,6, 
  /* [93][0][][] */ 42,-23,127,-7,-46,57,23,-23,-15,29,-66,-15,-27,0,35,0, 
  /* [94][0][][] */ 18,7,-10,-20,29,0,-9,-2,-27,-21,20,-52,127,-12,26,-32, 
  /* [95][0][][] */ 127,100,0,38,-88,-10,-57,-7,-27,-15,90,-59,-44,35,69,-79, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0007797014550305903, 0.0012013514060527086, 0.00073194014839828014, 0.00089456385467201471, 0.00070268084527924657, 0.0010304697789251804, 0.00042453655623830855, 0.0010652516502887011, 0.0006367933820001781, 0.00094427407020702958, 0.00050416396697983146, 0.000586514244787395, 0.00093942263629287481, 0.0034909178502857685, 0.00053520977962762117, 0.00044277170673012733, 0.00030966618214733899, 0.00073931622318923473, 0.0011179936118423939, 0.00078579969704151154, 0.00038251362275332212, 0.00021300758817233145, 0.00035642075818032026, 0.00021575689606834203, 0.00040821338188834488, 0.0013813107507303357, 0.0019670145120471716, 0.00097769754938781261, 0.00052426353795453906, 0.0011617837008088827, 0.0005485916044563055, 0.0006876197294332087, 0.00045608630171045661, 0.00047947425628080964, 0.00099305284675210714, 0.00071848643710836768, 0.0005375032196752727, 0.00057346507674083114, 0.0010793261462822556, 0.00084085616981610656, 0.00042866411968134344, 0.0010127747664228082, 0.00077681092079728842, 0.0005521568818949163, 0.001174165983684361, 0.00066190434154123068, 0.00073626183439046144, 0.00081632076762616634, 0.00063598202541470528, 0.00050444685621187091, 0.00067834672518074512, 0.00053228187607601285, 0.0011744677321985364, 0.00046750449109822512, 0.00096245005261152983, 0.00094887957675382495, 0.0013118550414219499, 0.00091600429732352495, 0.00095764617435634136, 0.00043193591409362853, 0.0019276859238743782, 0.0011065949220210314, 0.00061578082386404276, 0.0011448364239186049, 0.0014152874937281013, 0.00081764848437160254, 0.00023476935166399926, 0.00051087071187794209, 0.0014432187890633941, 0.00099025352392345667, 0.00065152579918503761, 0.00059462932404130697, 0.0022418315056711435, 0.0010174271883442998, 0.00075094046769663692, 0.00058272358728572726, 0.00075101142283529043, 0.00027253341977484524, 0.00025527446996420622, 0.0004970058798789978, 0.00049333216156810522, 0.00051308574620634317, 0.00044172897469252348, 0.00050591869512572885, 0.0003960892790928483, 0.00083104288205504417, 0.0015211178688332438, 0.00059838272863999009, 0.00032095512142404914, 0.0013478018809109926, 0.00066981487907469273, 0.00067859294358640909, 0.00082840700633823872, 0.0015348023734986782, 0.00097824097611010075, 0.00050032418221235275, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -10050, 18569, -20398, -1528, -10711, 12657, 29099, -54310, 691, 20386, 24850, 15416, -12254, 13855, -8863, 9891, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00076385494321584702, 0.00039287609979510307, 0.00022316091053653508, 0.00019091436115559191, 0.00035614633816294372, 0.00037141356733627617, 0.00036875795922242105, 0.00027989948284812272, 0.0003618028131313622, 0.00026044648257084191, 0.00066298275487497449, 0.00063779018819332123, 0.00038417187170125544, 0.00023555582447443157, 0.00053081830265000463, 0.00054735346930101514, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -16,-9,-1,-35,13,-11,-38,-1,11,8,-5,6,-11,-6,-31,6,2,3,-3,-8,4,-27,7,6,8,11,-1,127,38,-33,46,-7,4,9,3,2,-12,12,-42,-8,-7,2,6,39,-1,14,18,1,30,5,-6,3,21,-23,-7,77,9,4,-25,-41,-2,20,-3,-21,-45,-61,-21,32,5,5,13,-19,-11,-36,-1,-26,-33,22,1,12,-11,-25,24,23,2,-9,-14,-88,5,-20,7,1,49,-34,-38,-12, 
  /* [1][0][][] */ 56,-77,-84,-62,127,-24,74,23,-25,-89,-52,-33,-3,-10,-50,59,-65,4,38,33,28,32,-7,-54,4,-3,-13,-78,47,-10,-52,24,-13,41,1,6,7,-13,7,14,-27,32,-55,-11,-28,77,17,1,30,-75,13,-49,-13,36,39,13,-43,-30,-19,-34,24,-23,-18,-32,-82,106,-28,-27,-12,-42,-23,15,52,-107,-24,3,30,-36,48,15,11,-36,21,14,-70,43,-24,16,9,-50,-11,16,31,8,36,104, 
  /* [2][0][][] */ -4,65,-85,-7,89,79,21,74,-10,-101,-2,-5,6,4,22,6,7,-26,-35,58,10,8,63,14,62,27,-3,-30,44,0,55,-68,38,32,-15,45,-127,-74,25,22,10,-45,10,-25,7,-23,10,68,-17,29,-17,-13,104,-15,10,56,32,14,21,9,21,31,39,-25,6,-1,-35,4,-42,8,-25,-39,-54,-65,17,61,61,43,24,-8,22,-39,9,-16,-28,25,17,43,-16,31,9,-27,-2,-36,-68,-10, 
  /* [3][0][][] */ 51,20,107,3,44,-30,7,1,-16,-71,26,-37,4,39,34,86,20,0,34,6,116,0,21,10,64,-26,-23,35,20,51,-1,98,-105,10,44,2,-15,-10,-13,43,-78,-24,79,2,12,63,-55,-80,-47,-23,-57,41,11,-127,7,17,-122,88,42,42,11,104,-10,-72,22,69,3,-51,31,-12,8,-67,46,-27,51,-14,6,-15,37,36,-37,-73,20,-28,-15,7,35,57,43,25,26,35,27,115,50,-48, 
  /* [4][0][][] */ 23,1,16,-13,127,32,-4,-31,-49,-60,-35,-12,-51,31,-8,34,17,-102,-44,83,-24,15,34,-16,-8,0,12,-57,16,-6,74,-43,107,14,-30,16,39,34,17,-2,-20,-16,-35,-30,-10,-51,-15,18,56,22,-22,20,11,-40,13,-37,37,-15,-38,33,2,61,60,38,26,66,-26,-17,-54,-3,34,66,18,-69,-54,-32,16,30,89,-33,1,-37,17,-21,-63,13,40,68,-43,35,15,-46,12,8,30,-32, 
  /* [5][0][][] */ 6,-10,-22,7,13,-20,32,-34,-29,-40,-1,11,1,23,-3,9,-7,-6,11,-16,17,19,-38,56,11,-8,7,-101,4,39,24,33,6,0,5,-47,21,31,-3,2,-2,-14,29,-22,-11,1,9,-26,-6,-11,15,-12,8,-32,-4,-56,5,14,-16,11,57,14,-9,44,-4,57,2,61,6,77,5,23,6,9,-3,62,-42,-6,7,21,-15,-11,-1,22,-3,15,-21,127,1,17,-8,-6,0,10,-47,19, 
  /* [6][0][][] */ 40,-80,12,-47,-35,1,31,7,-10,3,-3,-81,-37,-4,-33,48,23,-7,-6,-24,-55,41,23,0,-26,-4,-19,-21,4,26,52,-7,76,17,60,3,-13,-12,21,-112,-15,82,-4,-25,8,-35,-19,8,-3,38,-26,61,-8,-69,-18,-8,17,-72,11,5,-20,57,27,-63,39,-29,7,-36,-6,-22,127,6,-43,10,-21,28,-95,15,10,16,25,32,21,11,-19,-4,27,21,5,-4,37,-26,-10,-12,-38,-8, 
  /* [7][0][][] */ -16,127,52,16,120,55,34,-17,-17,-28,26,-4,-19,29,17,8,13,-27,14,42,27,-36,27,17,-8,16,15,17,9,-24,-1,20,32,-14,-36,3,20,6,-12,88,-47,34,22,9,-15,-14,18,-14,-33,-25,31,16,14,-36,-34,47,30,10,-30,-3,-12,-37,14,-17,-50,68,-27,-74,-5,-19,-1,65,-14,-23,7,18,69,48,41,-23,-46,-26,-9,-15,-10,50,2,4,-18,39,-22,-41,-38,-16,19,-6, 
  /* [8][0][][] */ -8,0,43,26,-127,-29,35,-17,16,87,59,27,-2,12,20,-9,-47,10,16,-11,-53,5,-98,57,16,-33,50,-22,21,19,-1,37,77,-17,3,2,-26,5,13,19,16,-31,34,-1,-48,0,36,4,-80,22,19,36,-44,-45,-20,32,14,-49,-83,-21,8,-29,-29,7,-14,78,-1,-63,24,-16,-46,-13,29,63,59,-14,-39,-33,-25,20,-85,2,1,-3,34,25,48,53,29,-34,49,48,0,1,43,9, 
  /* [9][0][][] */ -3,-104,-6,36,73,86,-45,-11,31,-49,81,117,-11,7,92,-127,6,-19,0,17,-62,-41,15,-16,-33,5,-11,28,-27,15,9,-14,16,1,-97,29,4,35,-20,67,35,-72,-15,48,-13,5,-84,-19,40,45,-21,-69,50,29,-22,-67,-16,97,-50,0,17,-48,-38,120,-99,-3,12,-17,-4,47,-53,-69,52,9,0,30,48,-72,11,-8,-12,-23,17,11,14,-67,29,11,18,-26,-38,29,-66,-3,8,-46, 
  /* [10][0][][] */ -38,-18,-43,-48,-32,-15,65,-29,24,22,26,38,26,-7,-7,-8,-17,14,-33,-31,-11,43,18,22,-5,-12,5,-127,38,-37,61,-33,15,20,-6,0,-10,37,7,-19,13,-44,20,-43,11,-9,28,16,2,37,-27,-18,-24,-25,1,-57,30,8,1,-41,17,9,-11,23,-44,94,-16,-43,12,-44,-9,-22,-40,-8,24,51,-22,42,-23,16,-21,-10,9,24,10,-14,-17,114,-1,-8,11,20,24,-42,43,-41, 
  /* [11][0][][] */ -85,17,2,4,6,-58,-23,6,-42,-1,-6,32,33,18,-23,-21,40,6,-54,-39,6,-3,-15,-5,64,7,51,1,-22,26,-42,13,-10,11,-4,-7,-7,19,20,-3,-16,-3,-2,-3,65,25,61,23,42,40,-15,38,19,-55,28,-6,-66,-9,-48,-41,-12,-7,-1,16,-7,-22,28,-1,22,14,-5,32,-19,20,23,4,-19,72,-122,54,-36,-12,-54,-72,127,12,35,-10,16,48,-22,-58,-16,42,-22,-10, 
  /* [12][0][][] */ -12,-3,-42,-8,73,23,9,-13,-16,15,19,-9,9,-13,28,-7,-38,-13,11,-22,-3,-25,-34,53,-30,41,-20,104,-19,23,-39,3,-14,28,3,28,-25,-27,15,14,3,-17,-4,2,-11,-3,28,17,-1,-15,3,-29,-21,7,-11,-8,-13,-18,20,21,-18,-20,1,51,42,-94,3,57,-31,-127,-6,59,0,4,-2,79,8,-25,3,-5,-1,20,-40,12,11,-9,-3,-54,-17,26,1,2,-35,28,-18,26, 
  /* [13][0][][] */ -72,60,-13,-9,-64,4,-20,10,-54,-19,43,-3,68,10,-27,7,-13,25,-53,-20,2,-4,42,-55,62,24,-13,3,13,-20,-25,-81,-68,-26,5,11,-4,18,30,-22,-40,69,24,4,34,1,2,-8,69,-14,37,62,57,-58,70,-26,-15,45,53,4,13,27,-22,10,12,-16,7,-3,8,4,24,-127,15,-37,-61,6,27,48,-49,-15,70,-19,-14,-24,38,-30,67,18,-18,-12,-32,46,35,-41,-14,9, 
  /* [14][0][][] */ -25,11,-2,-52,41,-1,-4,26,-84,6,9,6,-31,-55,-71,-14,-85,-17,74,19,40,-15,21,-91,-38,17,-47,-14,4,-27,-14,-32,-74,-23,21,12,-16,-16,5,-3,-3,81,-75,-6,-44,13,4,12,127,-32,20,-13,24,59,-96,30,-23,24,-94,7,13,23,43,22,1,24,-3,3,-52,23,64,32,33,-11,-23,22,64,-78,-23,-102,21,-33,11,38,24,-66,-33,6,-46,20,37,45,10,40,13,-18, 
  /* [15][0][][] */ -41,-67,-9,-36,6,15,-4,-53,-14,9,-4,-36,41,-13,46,-8,-83,2,-21,11,-21,1,-63,-40,-8,5,-1,19,-27,-15,63,-80,-14,25,23,4,-10,15,-90,18,27,-61,-4,26,-19,-45,46,26,43,18,-15,-127,-10,45,1,33,27,-5,-14,43,11,4,44,-10,14,-5,-18,0,-18,19,7,34,-37,3,-3,-33,-22,-4,14,5,-9,43,-16,64,-17,-39,-29,-36,-36,58,21,71,-28,-9,-2,-10, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.032463833689689636, 0.01669723354279995, 0.0094843385741114616, 0.0081138601526618004, 0.015136219561100006, 0.015785075724124908, 0.015672212466597557, 0.01189572736620903, 0.015376619063317776, 0.011068975552916527, 0.028176767751574516, 0.027106082066893578, 0.016327304765582085, 0.010011122561991215, 0.022559776902198792, 0.023262523114681244, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 18691, 61057, 76, -134, 14763, -3496, 367, -827, 4530, 11646, -2582, -196, 638, 5025, 4483, -9443, -4010, -1043, -528, 14424, -11590, 15127, -3226, 5284, 26579, -38, -6606, 16588, 14363, -19160, 1893, 22210, 23038, -9612, 3030, 835, -222, -790, 4357, -8170, -5837, -1090, -6743, -297, 30721, -1533, 11745, -1055, -14115, 791, 82, 425, -1471, 16384, -3424, 14964, 17378, 244, 34668, -314, -9347, -830, 893, -83, -1442, 12452, -657, -7197, -2057, 2208, -329, -4624, 1654, 207, -1934, -5514, -508, -1205, 46838, -7621, -6788, -11818, -157, 398, 63167, -12813, -10013, -27312, -6802, 9100, -2471, 36593, 138, -1861, -3038, 452, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012772346963174641, 9.3919195933267474e-05, 0.00012749980669468641, 0.00023301062174141407, 0.00023717450676485896, 0.00023220475122798234, 4.899367195321247e-05, 9.0649562480393797e-05, 0.00026047058054246008, 0.00020870899606961757, 0.00029581331182271242, 0.00012726306158583611, 0.00026926625287160277, 0.00020793794828932732, 0.00040017438004724681, 0.00018012931104749441, 0.00019804555631708354, 0.00015885753964539617, 0.00020368037803564221, 7.4923213105648756e-05, 6.613721780013293e-05, 3.8330548704834655e-05, 0.0001403707719873637, 0.00013418489834293723, 8.5533945821225643e-05, 9.1254609287716448e-05, 0.0001708639319986105, 0.0001945731055457145, 7.7927637903485447e-05, 0.00047165309661068022, 0.00039526176988147199, 0.00023462472017854452, 0.00012328119191806763, 0.00017719155584927648, 0.00027070724172517657, 0.0005256394506432116, 0.00036387040745466948, 0.00021633510186802596, 0.00024022233264986426, 7.4844443588517606e-05, 0.00023362759384326637, 0.00021958710567560047, 0.00035711535019800067, 6.3987936300691217e-05, 0.00037725959555245936, 9.3058552010916173e-05, 0.00010511425352888182, 0.00031998378108255565, 0.00073146162321791053, 0.00011912572517758235, 0.00042728212429210544, 0.00017552482313476503, 0.00034530131961219013, 0.00016822548059280962, 0.00026043830439448357, 0.00011831720621557906, 0.00015740677190478891, 0.00049652421148493886, 4.8801091907080263e-05, 0.00016270084597636014, 0.00028889800887554884, 0.00035023529198952019, 0.00010974184988299385, 0.00014922846457920969, 0.00013968958228360862, 0.00013990778825245798, 0.00032335318974219263, 0.000301280029816553, 0.00021335287601687014, 0.00016111861623357981, 0.00022423469636123627, 0.00010582375398371369, 0.00028908450622111559, 0.00014928137534298003, 0.00037233685725368559, 0.0003370520134922117, 0.00013502506772056222, 7.3438255640212446e-05, 5.5323940614471212e-05, 0.00016759801656007767, 0.00024820203543640673, 0.0002489723265171051, 0.00015582276682835072, 0.00028901943005621433, 5.6173939810832962e-05, 0.00011941655975533649, 7.4820090958382934e-05, 0.00053249491611495614, 0.00026305791107006371, 0.00013050065899733454, 0.00035847767139784992, 2.7903892259928398e-05, 0.0001618402311578393, 0.00011117586836917326, 0.00031284763826988637, 0.00027678479091264307, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -48,-71,-11,127,22,71,76,-58,-14,-19,-15,-4,-30,-1,37,4,-9,-42,26,22,18,-127,127,5,-85,8,50,-29,-127,-127,37,25,15,26,59,-19,-30,-11,30,-9,-12,27,-107,71,25,-68,38,45,-18,52,-25,18,2,-6,17,48,-90,-50,-59,-18,-11,-1,11,38,67,-24,73,15,-9,16,17,127,22,23,24,0,-10,19,127,-3,-13,14,-29,20,127,21,-79,-16,0,-31,-14,-39,1,-24,-15,26, 127,-127,72,106,-43,127,40,-117,71,4,-18,127,127,-99,-12,17,10,127,127,-112,127,-78,82,67,-127,-114,-64,-34,-53,47,-61,-20,-87,51,-127,-84,-43,-14,-54,58,0,127,127,79,-52,-112,-113,-50,-16,-127,43,83,69,-31,46,81,-46,41,-77,-112,-45,-42,-61,67,72,-60,25,31,-82,33,-17,90,115,127,12,20,2,58,-33,50,65,127,127,-23,-9,74,-116,127,-119,-98,6,-127,-89,-127,-37,105, -76,-13,27,-82,15,-25,67,-7,82,-35,-29,19,-19,-5,-8,-9,-9,-16,8,-4,-22,-99,30,-1,-123,95,9,-55,119,50,-16,9,3,14,12,-29,-9,35,19,9,24,11,-119,60,17,-18,38,13,-15,11,-17,4,-9,2,-2,20,-66,7,-34,52,2,39,33,-1,-7,-38,-30,25,8,2,-3,36,9,-25,-4,4,-11,-6,-86,3,-20,-23,-19,3,-111,9,-36,-22,-50,26,-25,-31,30,-26,-14,1, 
  /* [0][1][][] */ -66,-76,71,-36,-48,93,18,127,-51,-22,-1,-116,26,-116,79,33,-2,-58,-16,89,54,-72,47,48,-99,-11,127,-23,-24,63,122,-103,-127,86,-87,-56,-36,32,-29,94,-48,-25,-5,43,-48,127,-23,64,16,96,19,-3,13,-53,28,32,127,121,-74,-83,127,-33,-36,127,71,-37,-16,0,127,40,127,97,-41,103,-5,11,15,14,-32,10,-41,121,-82,110,3,32,-57,30,78,-127,-31,-9,127,-68,-22,2, 68,125,54,-116,127,86,88,37,-127,127,127,-36,-65,-127,-127,127,127,-62,-124,-50,106,93,-123,127,-113,-91,-42,127,-127,109,-127,-127,-89,127,105,127,127,-127,-106,127,-64,-95,109,-127,-127,-35,-127,-127,127,-112,85,42,127,127,127,-127,101,-127,-127,127,19,-78,-127,-98,-127,127,-127,127,-126,-127,-105,-81,-127,-78,127,127,-127,127,-78,127,127,30,-43,-127,59,127,93,46,127,15,127,-3,-68,35,127,-127, -54,-14,-50,38,-57,-97,34,-26,20,-34,-29,92,1,93,14,13,-5,65,-6,127,3,-86,-41,6,-76,103,-71,-20,-67,-17,16,-64,-68,38,3,-17,-29,47,-68,45,127,-4,-40,26,-40,-59,17,44,9,119,-11,6,-38,-71,4,19,95,3,-2,23,-35,127,93,-51,-43,13,37,-11,-79,124,-18,-83,-1,-53,-15,-20,28,16,76,-36,-68,-40,57,14,-47,-18,71,23,14,65,-43,18,-43,97,-26,-5, 
  /* [0][2][][] */ -69,1,-5,-20,13,-43,67,24,56,-28,-37,-2,18,18,-26,2,-7,65,7,1,-53,-83,3,-9,-27,-54,35,-68,90,39,25,25,19,-8,-12,-45,-6,37,-4,0,-14,-5,-67,99,3,31,13,36,-15,-29,11,-20,21,-1,11,15,-70,24,-17,14,15,0,-21,-4,-1,-45,-47,16,-33,15,25,31,12,-19,27,5,18,4,-78,-10,-7,-7,17,14,-127,6,12,-44,-59,-50,-27,-48,9,57,-18,-7, 121,34,-127,-36,-72,-24,37,30,-64,-29,-20,-106,-78,112,-12,39,1,-48,-9,-126,95,-55,-38,0,-109,127,-49,21,-35,-22,-8,-6,-58,17,25,6,-23,-27,127,58,12,-13,68,-36,-38,76,-67,-43,-33,-4,-127,-127,-52,-25,2,39,-64,-8,10,39,-8,-17,10,-47,-54,34,63,-22,115,110,-22,-67,11,-57,3,4,101,4,52,22,14,-95,-50,2,2,7,127,40,-60,40,-18,-110,41,78,-9,26, -55,13,-19,26,15,-68,-127,3,-10,-8,-16,3,15,-27,19,0,-8,-15,6,17,-46,-71,14,1,20,-95,20,4,-50,-40,-6,14,46,-19,-8,-24,-35,6,41,-36,23,-2,-49,-34,2,66,24,16,-9,-2,10,-9,18,6,-3,-5,-62,-14,1,-37,-11,10,85,-10,34,-1,-2,29,0,4,-3,21,-19,17,-1,15,37,1,74,-11,5,-4,-8,-17,73,-1,42,-39,58,41,-16,-52,-7,2,-14,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0054282471537590027, 0.0039915656670928001, 0.0054187416099011898, 0.0099029513075947762, 0.010079916566610336, 0.0098687019199132919, 0.0020822309888899326, 0.0038526062853634357, 0.011069999076426029, 0.0088701322674751282, 0.012572064995765686, 0.0054086800664663315, 0.011443815194070339, 0.0088373627513647079, 0.017007410526275635, 0.0076554953120648861, 0.0084169358015060425, 0.0067514451220631599, 0.0086564160883426666, 0.0031842363532632589, 0.0028108316473662853, 0.0016290482599288225, 0.0059657576493918896, 0.0057028583250939846, 0.0036351925227791071, 0.0038783208001405001, 0.0072617172263562679, 0.0082693565636873245, 0.0033119246363639832, 0.020045256242156029, 0.016798624768853188, 0.0099715506657958031, 0.0052394508384168148, 0.0075306408107280731, 0.011505057103931904, 0.022339677438139915, 0.01546449214220047, 0.0091942418366670609, 0.010209448635578156, 0.0031808887142688036, 0.009929172694683075, 0.0093324519693851471, 0.015177402645349503, 0.0027194872964173555, 0.016033532097935677, 0.0039549884386360645, 0.00446735555306077, 0.01359931007027626, 0.031087117269635201, 0.005062843207269907, 0.018159490078687668, 0.0074598048813641071, 0.014675305224955082, 0.0071495827287435532, 0.011068627238273621, 0.0050284811295568943, 0.0066897873766720295, 0.021102279424667358, 0.0020740462932735682, 0.0069147860631346703, 0.01227816566824913, 0.014884999953210354, 0.0046640285290777683, 0.0063422094099223614, 0.0059368070214986801, 0.005946081131696701, 0.013742510229349136, 0.012804401107132435, 0.0090674972161650658, 0.0068475413136184216, 0.0095299743115901947, 0.0044975094497203827, 0.012286091223359108, 0.0063444580882787704, 0.015824316069483757, 0.01432470977306366, 0.0057385652326047421, 0.0031211257446557283, 0.00235126749612391, 0.0071229157038033009, 0.010548586025834084, 0.010581323876976967, 0.0066224676556885242, 0.0122833251953125, 0.0023873923346400261, 0.0050752037204802036, 0.0031798537820577621, 0.022631032392382622, 0.011179961264133453, 0.005546277854591608, 0.015235301107168198, 0.001185915432870388, 0.0068782097660005093, 0.0047249742783606052, 0.013296023942530155, 0.011763353832066059, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1712, 5985, 14937, 26280, 15832, -2926, -1627, 4903, 28024, -3823, 10803, 4191, 7460, 11971, 31721, 1439, 1954, 5864, 12840, 5683, -227, 564, 11955, -1186, 4049, -34, 12725, 7013, 5539, 36806, 54459, 15387, 6747, -586, 10673, 2846, 1212, 3497, 20987, -825, 15173, 6867, 40505, -3231, 24528, 9076, 5418, 15925, 49975, 8203, -534, 7758, -3812, -313, -2505, 6727, -561, 14481, 5565, 7022, 4910, 14293, 7264, 5678, 8389, 7109, 4829, -5334, 8336, -2774, 3727, 11229, 16019, 5425, -3346, -5192, 6616, 303, 2424, -1007, 12199, 12334, 4876, 12990, 3171, 283, 8575, 74182, 9259, 9158, 5265, -269, 5143, 9092, 3767, 11176, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00023934936325531453, 0.00024568548542447388, 0.00012675303150899708, 8.7292552052531391e-05, 0.0001898048649309203, 0.00035601056879386306, 0.00049324490828439593, 0.00033511492074467242, 8.4288425568956882e-05, 0.00035270772059448063, 0.00025022894260473549, 0.00020263863552827388, 0.00017144768207799643, 0.00019342015730217099, 7.5260562880430371e-05, 0.00039924093289300799, 0.00022911978885531425, 0.00020989723270758986, 0.00017625244800001383, 0.00021370699687395245, 0.00035097400541417301, 0.0004214566433802247, 0.00017102167475968599, 0.00052387977484613657, 0.00064736185595393181, 0.00023842896916903555, 0.00017526955343782902, 0.0001976559724425897, 0.00029816076857969165, 9.532381227472797e-05, 5.2088747906964272e-05, 0.00016021559713408351, 0.00024796643992885947, 0.00035380214103497565, 0.00018909623031504452, 0.0001979363732971251, 0.0004254294908605516, 0.00041885589598678052, 0.00012898475688416511, 0.00071034894790500402, 0.00012415213859640062, 0.00023004703689366579, 6.7519598815124482e-05, 0.00032287847716361284, 0.00013333412061911076, 0.00017149023187812418, 0.00031467198277823627, 0.00017020796076394618, 8.2749371358659118e-05, 0.00025734122027643025, 0.00023267990036401898, 0.00022052726126275957, 0.00028036703588441014, 0.0002825795381795615, 0.00041100356611423194, 0.00016968260752037168, 0.00020913560001645237, 0.00012891004735138267, 0.00036848068702965975, 0.00020965536532457918, 0.00033140424056909978, 9.8965218057855964e-05, 0.00020203327585477382, 0.0001686850591795519, 0.00029564363649114966, 0.00027285877149552107, 0.00026971334591507912, 0.00024800284882076085, 0.00020347000099718571, 0.00024948595091700554, 0.00029020404326729476, 0.00013965665129944682, 0.00012922479072585702, 0.00018863016157411039, 0.0004559667722787708, 0.000259889115113765, 0.0002446201688144356, 0.00038197039975784719, 0.00031771347858011723, 0.00038344974745996296, 0.00016620771202724427, 0.00013251985365059227, 0.0001826317748054862, 0.00014773409930057824, 0.00036665177321992815, 0.00027767822030000389, 0.00027579008019529283, 5.2020564908161759e-05, 0.00015274900943040848, 0.0002466284204274416, 0.00024188055249396712, 0.0004046546237077564, 0.00028855522396042943, 0.00017760538321454078, 0.00029563685529865324, 0.00015154664288274944, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 1,104,-46,79,-2,30,18,-6,33,37,-62,118,22,-127,67,-120, 
  /* [1][0][][] */ 28,48,0,-20,39,-12,127,-126,-3,70,-25,-40,-4,-50,26,8, 
  /* [2][0][][] */ -127,35,-22,-21,-5,12,49,97,-22,50,104,-6,-67,41,25,-46, 
  /* [3][0][][] */ -83,89,51,37,-68,59,70,127,33,103,-104,32,34,-74,-88,-72, 
  /* [4][0][][] */ 8,4,34,73,-23,80,7,41,13,-18,5,-8,17,-2,-127,-18, 
  /* [5][0][][] */ -6,-42,53,-18,7,-13,-21,15,-66,84,-40,-127,-22,13,-67,-16, 
  /* [6][0][][] */ -3,8,27,-22,36,70,-60,-78,-15,-6,54,-6,127,-19,-8,-40, 
  /* [7][0][][] */ 23,22,127,-32,-33,-35,16,0,-92,23,-79,-60,12,1,42,-4, 
  /* [8][0][][] */ 16,18,60,64,-60,72,11,37,26,-7,1,-97,-27,5,-127,-73, 
  /* [9][0][][] */ 30,-114,69,44,16,-22,-6,16,127,-6,67,11,-28,20,-107,-30, 
  /* [10][0][][] */ -29,-68,-3,-36,-127,11,3,37,63,82,61,-56,-46,42,93,-2, 
  /* [11][0][][] */ 53,15,17,-93,12,-25,-124,-127,-51,45,-2,-21,17,-16,43,-69, 
  /* [12][0][][] */ -27,11,7,-37,-41,-29,-81,-13,-36,-71,-13,21,24,127,86,43, 
  /* [13][0][][] */ -34,-84,-67,15,-18,-58,-1,-32,38,-1,-3,-15,17,10,127,37, 
  /* [14][0][][] */ -16,-47,44,25,12,44,16,127,39,50,25,-26,29,57,-69,116, 
  /* [15][0][][] */ 17,-34,3,69,19,-3,98,-1,-3,-127,2,-31,4,-22,-10,-34, 
  /* [16][0][][] */ 40,-91,-44,28,17,3,30,-72,127,75,97,-10,-5,79,64,122, 
  /* [17][0][][] */ -81,-42,55,93,73,65,-24,-71,127,-69,8,-55,-15,20,-104,10, 
  /* [18][0][][] */ -10,0,21,21,-91,-14,-13,42,-74,-20,-37,-65,-8,-127,63,-12, 
  /* [19][0][][] */ 51,-68,50,-83,92,25,-100,80,78,-87,72,50,-32,52,50,127, 
  /* [20][0][][] */ 47,-36,62,-70,-9,3,-36,54,-13,-43,101,-5,23,26,-28,127, 
  /* [21][0][][] */ -55,-30,-6,-56,20,-5,-106,-59,-19,72,3,20,-127,-34,44,1, 
  /* [22][0][][] */ 23,-24,30,-19,18,-76,15,-19,-127,43,-6,-38,-27,-15,85,-26, 
  /* [23][0][][] */ 19,6,21,-2,11,7,-13,8,-3,-1,49,-11,127,-5,5,-43, 
  /* [24][0][][] */ -8,11,12,-80,-22,-2,53,15,-43,16,4,-127,11,-126,51,0, 
  /* [25][0][][] */ -106,1,-40,-6,62,-25,-91,-127,3,55,-38,-30,-37,-94,29,-28, 
  /* [26][0][][] */ 49,0,55,-116,127,-39,-19,5,115,-54,45,-25,23,102,-5,76, 
  /* [27][0][][] */ 104,-27,22,-28,-28,-33,-4,-29,-28,11,-127,10,10,-7,-1,33, 
  /* [28][0][][] */ -118,19,-127,-97,39,-7,81,-48,8,44,-20,33,40,-6,-32,51, 
  /* [29][0][][] */ -76,-46,-10,127,-12,12,-1,-38,-21,-10,-92,56,15,-81,40,-35, 
  /* [30][0][][] */ 79,-17,127,-5,47,40,-35,95,-56,-99,55,-35,-3,55,-97,75, 
  /* [31][0][][] */ 7,-89,-3,-54,-5,-59,9,-48,-12,40,107,23,-14,90,72,127, 
  /* [32][0][][] */ -8,87,-25,43,-127,46,-62,-39,-48,-32,12,62,11,74,25,56, 
  /* [33][0][][] */ 30,-18,28,127,26,-7,17,-35,-93,58,67,-12,4,9,19,92, 
  /* [34][0][][] */ 41,7,8,-1,75,-38,-127,-18,-31,84,-30,20,-18,12,-4,8, 
  /* [35][0][][] */ 94,30,-5,4,26,-127,-32,-13,-33,-18,-90,-9,87,30,-19,22, 
  /* [36][0][][] */ 18,-1,-127,4,39,14,-37,18,-34,-22,6,-10,9,7,-14,12, 
  /* [37][0][][] */ -7,-5,127,2,-56,38,30,-69,-18,25,-75,33,40,0,4,5, 
  /* [38][0][][] */ -122,37,1,45,26,93,12,-33,14,-7,127,-34,-30,-6,-13,-26, 
  /* [39][0][][] */ -14,-14,6,32,22,-23,-127,33,2,30,-14,-39,-2,-21,6,0, 
  /* [40][0][][] */ 1,97,-22,127,19,56,64,31,-70,-31,-26,67,20,43,-90,-31, 
  /* [41][0][][] */ 20,15,-30,-35,-53,-9,127,80,-69,72,-43,-4,-1,67,46,-28, 
  /* [42][0][][] */ 4,-65,-30,-42,23,14,-77,57,50,-127,94,41,-15,32,-78,62, 
  /* [43][0][][] */ -79,-6,25,-13,42,0,-84,-70,-19,70,-15,-13,-127,-32,22,-3, 
  /* [44][0][][] */ -4,11,-15,-17,-11,-15,-6,-59,127,-17,26,34,14,83,5,54, 
  /* [45][0][][] */ -78,-72,19,-119,30,1,-18,59,18,-68,-4,-42,17,124,-43,127, 
  /* [46][0][][] */ -40,11,-30,72,-75,-21,-3,-79,-127,31,-35,-12,1,23,9,-26, 
  /* [47][0][][] */ -17,-33,-119,127,14,49,-22,-47,11,66,59,66,-45,-35,42,-32, 
  /* [48][0][][] */ -8,9,34,-127,27,-20,-18,-14,-27,17,48,-8,-1,50,91,24, 
  /* [49][0][][] */ -31,41,4,112,-56,36,-49,-19,28,-51,-127,-42,-7,-20,-79,-110, 
  /* [50][0][][] */ 12,61,30,-116,63,13,-32,56,127,-29,-28,0,5,-30,8,-16, 
  /* [51][0][][] */ -1,-32,15,-21,48,-15,-54,-127,13,-84,-3,12,-8,-12,-3,-7, 
  /* [52][0][][] */ 23,30,-13,29,38,-13,-72,113,-85,127,-42,-40,82,109,8,-39, 
  /* [53][0][][] */ -1,127,6,-79,-31,15,41,-6,-50,-46,-61,69,31,-125,-115,-13, 
  /* [54][0][][] */ 1,4,17,34,52,-29,6,-33,-1,31,-13,-12,-6,127,-36,-14, 
  /* [55][0][][] */ -127,101,86,-24,40,-38,-33,1,-54,32,103,-21,-20,-38,121,-11, 
  /* [56][0][][] */ 75,2,32,-109,83,4,8,33,79,-24,65,127,-14,13,102,44, 
  /* [57][0][][] */ -39,-2,12,77,-32,22,34,127,0,0,8,-12,17,37,6,23, 
  /* [58][0][][] */ 21,127,1,-127,8,34,-4,22,106,-8,16,83,10,-77,37,49, 
  /* [59][0][][] */ 50,54,59,-103,-36,-1,14,-11,-3,27,23,-76,-23,-127,-88,16, 
  /* [60][0][][] */ 49,-13,104,-39,-29,127,36,-26,1,44,-47,0,33,10,33,-14, 
  /* [61][0][][] */ -29,19,-52,-70,-47,3,120,127,-36,54,-15,3,1,80,24,-20, 
  /* [62][0][][] */ -13,-16,-13,-2,-62,21,-60,11,-34,-15,-11,-48,2,-127,80,-11, 
  /* [63][0][][] */ 5,-50,-15,-107,63,12,-121,-127,-56,109,5,34,76,4,35,-43, 
  /* [64][0][][] */ -22,-6,55,48,92,2,-38,-127,41,-118,8,-59,-19,-20,-6,0, 
  /* [65][0][][] */ -127,16,27,-56,7,52,46,-39,-65,31,45,-13,0,12,-17,-20, 
  /* [66][0][][] */ 64,0,69,16,-45,4,-33,36,-44,-7,57,-86,-8,40,-127,-12, 
  /* [67][0][][] */ 57,-23,-27,87,72,-27,-80,-118,42,-127,-64,-20,-85,10,-93,6, 
  /* [68][0][][] */ 9,-28,-83,64,-81,-78,-4,-81,-37,-23,52,-90,-50,75,127,-9, 
  /* [69][0][][] */ -24,34,-56,73,2,-105,33,91,34,9,52,-21,127,38,-32,-8, 
  /* [70][0][][] */ 18,13,-32,-50,-29,1,127,89,-32,51,-20,1,5,47,15,-13, 
  /* [71][0][][] */ 1,-27,-25,-66,27,-7,12,54,-31,-54,-3,-4,25,-127,92,25, 
  /* [72][0][][] */ 44,13,-5,34,34,-42,-42,-127,16,58,-52,19,45,52,32,40, 
  /* [73][0][][] */ -52,-127,-31,-63,-64,-15,35,-19,-18,12,-27,-23,28,-39,67,3, 
  /* [74][0][][] */ -19,28,67,94,-3,-3,-127,93,22,-42,-47,-43,-6,2,-19,1, 
  /* [75][0][][] */ -62,22,-26,9,-11,86,85,127,-8,50,1,-32,-122,65,15,19, 
  /* [76][0][][] */ 36,-31,-30,-13,47,-101,-127,-84,-10,12,-4,-17,64,-21,71,-37, 
  /* [77][0][][] */ -36,-1,-37,-25,-39,-12,-22,-42,127,16,-67,11,-16,23,33,-79, 
  /* [78][0][][] */ -107,-127,-14,73,62,50,-29,20,-16,-80,-110,65,31,-33,96,66, 
  /* [79][0][][] */ 39,-27,22,-71,127,-21,33,10,69,21,-22,41,-5,-59,30,-37, 
  /* [80][0][][] */ -11,-28,51,-93,-23,-22,13,9,-54,-22,-10,-43,23,127,-39,15, 
  /* [81][0][][] */ 12,-39,66,34,-4,70,-54,-65,-3,-28,-36,-70,-10,19,-127,51, 
  /* [82][0][][] */ -95,-10,34,-105,-23,-37,-6,-32,-26,-18,-28,-94,-26,-127,-75,38, 
  /* [83][0][][] */ 1,6,-26,-72,-41,10,1,50,-87,7,11,-111,1,-127,-5,51, 
  /* [84][0][][] */ 127,30,9,30,-71,12,-70,3,-30,-48,117,-20,-105,11,89,-76, 
  /* [85][0][][] */ 1,-22,24,-24,51,-13,-45,127,-73,-106,-75,-33,-21,65,84,-126, 
  /* [86][0][][] */ 11,-7,3,7,-47,56,-34,31,-86,-57,25,-21,-23,-127,-7,28, 
  /* [87][0][][] */ 124,-33,6,-1,-54,-54,9,-5,-7,29,-127,1,31,-33,-2,39, 
  /* [88][0][][] */ 48,43,-31,7,-13,-23,-2,-2,110,34,44,-1,-35,-7,127,-121, 
  /* [89][0][][] */ 52,74,-73,-15,-33,-18,25,-57,58,42,28,-42,-30,10,-26,-127, 
  /* [90][0][][] */ -26,-7,-10,-64,-79,6,127,-40,84,-71,10,-59,59,-26,-40,-5, 
  /* [91][0][][] */ 24,-14,-4,-113,-26,-9,13,-29,-26,33,63,50,18,-24,36,127, 
  /* [92][0][][] */ 25,14,4,21,44,-14,-77,-127,49,-54,7,-19,-48,-7,7,-27, 
  /* [93][0][][] */ 81,-1,35,-122,-49,-14,-42,73,49,-69,82,-19,-31,127,-18,31, 
  /* [94][0][][] */ -100,61,-87,11,61,-127,-27,3,-18,-64,86,-39,4,-9,-30,-10, 
  /* [95][0][][] */ -25,63,34,-127,2,-23,-52,-8,5,-40,-62,-77,-17,12,-61,-2, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00067912595113739371, 0.00069710396928712726, 0.00035964697599411011, 0.00024768244475126266, 0.00053854921134188771, 0.0010101385414600372, 0.0013995249755680561, 0.00095084955682978034, 0.00023915858764667064, 0.001000767108052969, 0.00070999545278027654, 0.00057496351655572653, 0.00048646281356923282, 0.00054880714742466807, 0.0002135430695489049, 0.0011327996617183089, 0.00065010070102289319, 0.00059555895859375596, 0.00050009577535092831, 0.00060636870330199599, 0.00099584786221385002, 0.0011958341347053647, 0.00048525407328270376, 0.0014864478725939989, 0.0018368138698861003, 0.00067651440622285008, 0.00049730692990124226, 0.00056082580704241991, 0.00084599643014371395, 0.00027047022012993693, 0.00014779575576540083, 0.00045459310058504343, 0.00070357590448111296, 0.0010038723703473806, 0.00053653854411095381, 0.00056162138935178518, 0.0012071066303178668, 0.001188454800285399, 0.00036597921280190349, 0.0020155324600636959, 0.00035226723412051797, 0.00065273168729618192, 0.00019157900533173233, 0.00091613002587109804, 0.00037832005182281137, 0.00048658356536179781, 0.00089284509886056185, 0.00048294526641257107, 0.00023479170340579003, 0.00073017569957301021, 0.00066020211670547724, 0.00062572042224928737, 0.00079550879308953881, 0.00080178648931905627, 0.0011661747703328729, 0.00048145462642423809, 0.00059339788276702166, 0.00036576724960468709, 0.001045520999468863, 0.00059487269027158618, 0.00094032095512375236, 0.0002808022836688906, 0.00057324586668983102, 0.00047862422070465982, 0.0008388543501496315, 0.00077420496381819248, 0.00076528015779331326, 0.00070367922307923436, 0.00057732244022190571, 0.00070788734592497349, 0.00082342018140479922, 0.00039625947829335928, 0.00036666030064225197, 0.00053521612426266074, 0.0012937525752931833, 0.00073740509105846286, 0.00069408124545589089, 0.0010837964946404099, 0.00090147496666759253, 0.0010879939654842019, 0.00047159503446891904, 0.00037600964424200356, 0.00051819637883454561, 0.00041917827911674976, 0.0010403316700831056, 0.00078787963138893247, 0.00078252225648611784, 0.00014760228805243969, 0.00043340752017684281, 0.00069977942621335387, 0.00068630790337920189, 0.0011481603141874075, 0.00081874185707420111, 0.00050393457058817148, 0.00083883514162153006, 0.00042999594006687403, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -3191, -2769, -11656, 32712, 27323, 4935, -4090, -4989, 20506, 597, 28032, 22973, -11460, 12598, 32064, -28494, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00042765765101648867, 0.00024300116638187319, 0.00029333669226616621, 0.00021531185484491289, 0.00035232969094067812, 0.00034413181128911674, 0.00029881822410970926, 0.00036002291017211974, 0.0002099925623042509, 0.00028358050622045994, 0.00037643327959813178, 0.00068278732942417264, 0.00037329996121115983, 0.00040882875327952206, 0.00045788846909999847, 0.00031342718284577131, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -7,18,-16,22,39,61,-40,-21,38,-1,8,1,-9,23,24,60,-6,-14,-1,-2,91,-54,10,-25,-24,-41,-45,-102,-10,-8,47,46,117,-4,11,5,2,-33,-14,-4,-33,5,13,-34,0,-22,-10,30,-21,26,0,-16,-37,-13,18,-3,43,23,-26,-23,-62,29,-1,-16,9,7,63,10,2,11,-7,-19,-61,-12,2,-5,-10,-86,-3,-13,36,-17,-57,-42,33,-21,-5,15,-2,5,20,-37,26,17,-8,127, 
  /* [1][0][][] */ 68,-107,49,95,-14,-93,-29,-45,-27,-82,-8,20,10,-65,-42,-71,-101,-19,22,41,-28,-105,-59,33,127,-85,-86,15,-33,112,-14,41,-11,32,-48,13,-32,-11,76,-29,-12,-75,75,-26,-66,10,57,10,32,37,11,-58,66,-68,34,-11,26,12,-35,-107,25,-60,36,-57,-11,-104,57,56,23,37,-36,-14,-103,42,-15,56,32,98,35,-19,27,-5,-68,56,-89,57,-10,72,-39,9,23,15,-6,-38,38,6, 
  /* [2][0][][] */ 29,14,9,-23,9,4,-2,28,54,-19,9,62,-5,6,50,5,-6,-19,4,-8,-22,-45,9,-42,4,-11,-22,25,4,13,101,-47,17,-60,-12,48,19,127,-43,-23,7,-9,-7,31,-35,-44,-51,19,23,32,-37,-30,25,0,-2,-31,-15,12,6,24,5,-2,74,86,6,-69,5,-65,-7,-7,-17,9,-16,2,-19,19,24,57,3,8,14,70,19,-19,0,0,15,13,25,17,3,-42,-27,-2,-6,58, 
  /* [3][0][][] */ -13,-28,-38,35,29,-11,4,-32,-12,8,0,9,4,-20,46,0,45,-41,19,-1,-20,-3,-3,5,-22,18,13,-4,35,-52,47,-16,25,-15,-19,51,-5,0,-21,8,18,-73,24,-36,3,-10,2,0,-127,46,-20,31,-120,-58,-33,-46,37,16,-6,59,-1,21,-1,16,-14,-81,-43,16,57,21,-7,32,-44,7,-5,-45,-38,-60,21,-46,21,-21,16,62,46,64,31,11,28,-4,-9,13,-31,4,-16,-28, 
  /* [4][0][][] */ -7,-38,27,-62,3,-14,-49,7,-26,-44,-33,5,10,76,8,1,47,-15,11,7,-3,37,49,9,-14,-1,13,12,8,-4,-18,-12,-41,20,4,14,33,-12,-6,-16,23,25,-93,-37,28,-12,-7,-4,-1,92,-18,-17,-28,-4,4,-15,1,-30,31,33,6,-4,11,-9,41,-113,14,-23,-44,26,-8,5,-20,4,-21,40,-15,50,65,4,13,-1,127,-49,49,-22,-6,4,67,19,5,28,-22,29,-5,-38, 
  /* [5][0][][] */ -12,1,-3,-8,-2,-20,-5,116,49,-20,-22,-19,-19,32,41,24,-23,-19,-4,-33,-51,-1,-14,-38,9,10,17,79,80,3,54,49,-57,29,3,-2,-54,-50,-29,-19,-28,0,-17,-9,60,18,6,27,5,21,-19,2,-31,-13,0,-9,-11,-29,-1,27,-52,14,-17,-43,5,16,-16,13,-9,21,4,5,25,-2,-1,6,-1,23,14,111,-8,-52,17,25,10,-8,20,-27,7,-12,23,-127,-24,-21,-6,-108, 
  /* [6][0][][] */ -32,2,-5,-63,-10,-43,-35,24,-7,19,-20,-7,33,-55,2,-24,-16,-83,25,34,2,11,-39,33,89,-22,-13,-3,22,-3,15,-16,-40,15,-34,5,11,8,52,36,-18,-29,-65,-16,-15,-21,26,-127,8,53,27,2,9,-1,-6,-37,48,-28,-12,5,9,28,17,10,25,59,47,-12,-39,-22,15,-27,15,4,57,-18,-31,37,7,5,-31,-11,57,-21,-5,33,18,-23,30,5,-42,-6,-30,6,-6,22, 
  /* [7][0][][] */ 19,11,33,-30,-5,14,1,-29,-1,-13,-11,-14,-3,-90,26,10,3,-27,-18,-18,9,-20,-27,-5,-16,-3,9,-16,8,-3,5,4,-3,-7,-6,-16,6,-3,-43,30,13,-14,-14,27,-2,10,-14,64,3,16,-14,-21,-24,5,-5,-54,34,6,2,-2,3,4,-17,-4,-15,47,7,-31,-4,-4,-1,39,-6,-6,-16,11,45,7,-7,-25,11,-37,33,-7,-29,127,0,-3,-33,-23,-6,20,-19,-1,-4,1, 
  /* [8][0][][] */ -67,35,-39,12,41,-17,-12,19,9,59,-46,26,3,44,59,-21,-14,26,-68,21,17,39,-30,10,-44,-16,7,16,57,-83,-16,-6,25,20,22,-4,-22,29,-39,27,19,37,10,-127,-45,0,49,-9,-54,25,-14,60,-107,78,8,-15,8,-13,-18,-12,-1,-39,13,22,-21,39,22,-23,-6,19,39,91,-30,14,37,46,-2,-94,2,-39,-7,-23,22,-5,-46,10,22,-35,2,44,-17,10,52,0,-11,-3, 
  /* [9][0][][] */ 18,-48,-15,-34,14,44,-6,9,32,-21,7,16,-47,-21,-8,29,-4,12,35,-30,-30,8,-11,-38,34,22,21,-10,-21,-47,-33,3,-2,16,16,28,17,47,-49,20,22,12,-13,-93,10,-8,37,-125,-27,-6,5,23,-18,11,-22,-5,-49,42,7,18,19,7,9,28,27,127,17,37,11,-2,9,-13,-11,-15,-29,16,63,-11,16,4,3,-2,15,-57,18,27,-3,-3,-52,41,-30,11,22,14,10,-14, 
  /* [10][0][][] */ 25,50,-18,38,71,-127,-22,-25,2,49,35,9,-14,14,13,-90,10,34,-29,48,-85,4,-31,-17,-79,-19,-68,51,16,17,-8,34,-30,0,35,-14,78,-8,2,-10,-16,84,41,-20,-64,-16,-41,23,-20,-7,-43,-2,-21,-6,-15,-18,19,23,-23,-15,-13,-2,-17,21,19,40,60,28,23,3,51,58,-50,-33,-55,-4,4,15,-7,4,24,-16,-77,-32,67,-58,97,-3,-11,19,25,-4,93,46,-11,-119, 
  /* [11][0][][] */ 42,35,-23,19,-3,19,60,-3,-7,-20,-25,-5,4,5,42,2,-5,-10,-95,-9,1,17,10,-6,-42,-15,-8,0,6,15,-10,-1,1,7,4,28,12,10,-16,21,11,36,61,-109,32,-34,4,-2,-127,12,8,-47,23,27,-20,8,-17,-5,16,2,17,-17,-14,9,-43,62,-25,8,17,-5,21,16,-59,-37,10,38,-8,-38,-47,0,19,-12,89,39,15,-9,-11,-4,1,24,-19,0,6,10,-18,15, 
  /* [12][0][][] */ -34,-10,10,-1,-21,29,10,7,127,2,-14,-1,3,12,-37,-44,24,18,18,86,51,28,-15,-31,12,0,13,-28,-122,5,34,-38,7,-9,-2,-13,16,-8,37,-17,-58,-29,-7,11,5,35,5,1,10,16,-51,9,14,-10,20,0,74,-24,15,13,18,-15,19,-12,-20,30,-38,7,-6,8,-24,-30,20,13,-78,7,26,0,8,-69,-17,1,41,40,-21,-14,-39,-27,4,11,-1,41,-12,-31,13,5, 
  /* [13][0][][] */ 31,-8,-32,35,30,-7,-1,6,-10,1,4,1,11,-14,15,-21,19,-82,-39,19,-11,-16,1,1,8,8,-1,-3,-11,-31,-1,14,-9,10,15,42,16,2,12,19,-8,8,20,43,20,21,-15,-127,18,-4,4,-1,-16,0,23,8,-10,11,18,10,1,21,-10,4,-12,-20,-15,-53,3,17,-2,-39,-18,39,-13,21,-23,5,14,-1,27,-14,-15,21,9,26,14,15,3,-1,20,-8,7,16,-8,-4, 
  /* [14][0][][] */ -107,-60,29,55,30,-20,-34,18,-10,18,0,8,68,3,-127,-2,85,-9,-9,31,-5,-16,26,19,-111,19,34,-6,-42,-69,-25,-3,-8,-3,16,-66,36,41,7,38,8,31,0,-42,14,112,61,52,-94,32,25,38,-43,-3,25,7,-4,16,68,51,38,56,3,51,11,-17,-42,33,12,76,-43,-92,-69,15,-5,43,-16,43,89,7,60,18,40,32,32,13,51,32,21,42,57,-5,-7,24,22,-33, 
  /* [15][0][][] */ 104,-19,43,0,-10,82,31,-23,-12,61,8,10,-82,-15,-13,37,15,51,50,-13,13,13,-81,60,28,2,61,-7,17,49,-52,-85,18,-62,44,7,37,-44,-56,-109,-9,25,2,40,-4,58,-25,-43,108,-58,-55,29,43,-121,67,-109,1,-66,15,17,-127,10,26,15,86,-14,-57,50,-26,72,-21,7,41,35,8,-1,23,-59,67,-3,-14,9,39,90,-33,1,-7,-61,-1,-15,63,-6,-68,55,25,-21, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018175449222326279, 0.010327549651265144, 0.012466809712350368, 0.0091507537290453911, 0.014974012039601803, 0.014625601470470428, 0.012699774466454983, 0.015300973318517208, 0.0089246835559606552, 0.012052171863615513, 0.015998413786292076, 0.029018459841609001, 0.015865247696638107, 0.017375221475958824, 0.019460259005427361, 0.013320655561983585, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9460, -9369, 2979, 42485, -1623, -4557, -11089, 2834, -3021, 835, 3455, -1949, 1952, -4325, 6106, -5874, -568, 17265, 25377, 2481, 3644, -1890, -91, 400, 17061, -519, -2100, -3786, -5343, -7638, 5780, -9190, -219, -2129, -581, 10573, 1318, -4092, 21023, 620, -225, 1782, -9863, -7439, -7647, 69578, -73, 17000, 29252, -12448, -612, 7133, 7256, -297, -6307, 2170, -10100, 2065, 1464, -7279, -1621, -1290, -12953, -1516, 1383, 15407, 28780, 22677, -11814, 450, -8491, -811, 47164, 11562, -51, 492, 19273, 34569, -346, -5279, -1411, -7747, 1179, -3199, 801, -325, 1858, -637, 1708, -3163, 266, -1021, -921, -479, 44, 49032, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019976352632511407, 0.00012755922216456383, 0.00022529234411194921, 4.8631238314555958e-05, 0.00015447243640664965, 0.00016951440193224698, 0.0003340280381962657, 7.53295753384009e-05, 0.00011155762331327423, 0.00035531795583665371, 0.00015496081323362887, 0.000306606205413118, 9.6377763838972896e-05, 0.00045467755990102887, 0.00016305122699122876, 0.0001374573475914076, 0.00010924049274763092, 0.00031762014259584248, 6.0083701100666076e-05, 0.00020020263036713004, 4.1576484363758937e-05, 0.0001857904571807012, 0.00014983746223151684, 0.0003399128036107868, 0.000209501275094226, 0.00027404582942835987, 0.00012418134429026395, 0.00019520614296197891, 0.00010691840725485235, 0.00010965512774419039, 0.00013747264165431261, 0.00018298196664545685, 0.00013506978575605899, 9.512849646853283e-05, 0.00020249153021723032, 0.00021972689137328416, 0.00044123220141045749, 0.00012801436241716146, 6.7735018092207611e-05, 0.00015193679428193718, 0.00020181400759611279, 0.0003283278492745012, 0.00037474851706065238, 0.00016926928947214037, 0.00016735165263526142, 5.3942192607792094e-05, 0.00022275085211731493, 0.00019694807997439057, 9.0113375335931778e-05, 0.00020253279944881797, 0.00015415444795507938, 0.00017899942758958787, 0.00023584018344990909, 0.00028266929439269006, 0.0002894396020565182, 0.00047280671424232423, 0.0004260717541910708, 0.00021277944324538112, 0.00010906028910540044, 8.0456164141651243e-05, 0.00032332187402062118, 0.00013123983808327466, 0.000272424949798733, 0.00013004867651034147, 0.00019195341155864298, 0.00018883583834394813, 9.1726957180071622e-05, 7.9825411376077682e-05, 0.00032708802609704435, 0.00023943131964188069, 0.00021792012557853013, 0.00012853372027166188, 0.00012219281052239239, 0.00016458562458865345, 0.00015537906438112259, 0.00024513452081009746, 0.00053701206343248487, 5.4487674788106233e-05, 0.00027386832516640425, 0.00035570817999541759, 0.00015793656348250806, 0.00026550077018328011, 0.00010161216778215021, 0.00017124423175118864, 0.00013623081031255424, 9.5495437562931329e-05, 0.00013619294622913003, 0.0001773783442331478, 0.0002084646257571876, 0.000110873173980508, 0.00021043099695816636, 0.00011018665827577934, 0.00015127698134165257, 0.000455867761047557, 0.027724906802177429, 8.054689533310011e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,6,-19,104,-17,21,-61,-53,18,-6,98,-9,3,-9,-4,53,5,17,-35,4,73,2,32,-35,3,18,45,47,21,13,23,49,-6,27,10,-14,4,49,-63,-26,20,9,28,18,-85,-57,26,-5,-12,-19,-7,-7,49,6,-8,1,-3,-35,28,-31,28,-2,127,27,-13,-11,10,-55,66,36,2,-5,78,-32,69,5,17,-127,29,64,0,14,127,-14,37,29,-27,-19,34,-7,-15,81,1,20,-2,14, -48,12,-8,11,51,-8,-10,-127,37,13,-127,-5,-18,-13,5,92,17,-30,-15,-15,77,-97,127,25,-61,-31,-104,-16,26,36,-49,18,120,12,-14,0,-24,127,-67,-127,8,-19,-29,15,46,-127,127,-44,-77,51,50,6,39,-63,32,56,36,42,-98,85,127,35,4,-20,42,-38,-97,-2,37,-30,-17,50,-47,-48,106,-3,-29,-61,-34,64,-68,62,-17,8,-11,48,55,-41,-28,52,-13,72,-127,-31,23,-127, 1,-4,-22,-72,7,20,38,22,-4,-2,3,62,0,-12,-10,5,-13,18,-13,19,5,24,24,-33,1,-30,11,11,-8,5,45,-79,44,17,9,-22,11,5,-34,-20,8,4,-15,9,23,-35,20,1,6,-7,5,-6,5,6,-4,8,-6,44,8,-3,11,-18,2,-16,-27,-18,30,-52,-107,-8,42,-18,-127,-24,-11,16,10,-11,5,11,-14,22,-38,-4,-41,22,27,37,-24,-17,24,-11,21,6,-2,-45, 
  /* [0][1][][] */ -40,58,-17,38,-86,-15,-9,-44,25,96,-45,-22,-32,-25,-7,63,127,-25,-95,-13,60,-127,-29,15,-35,-46,-126,-4,37,36,-50,28,-127,-75,-57,4,66,-2,-51,47,-19,86,2,-2,34,-51,-12,-31,127,42,-3,20,44,10,-35,-17,32,9,-123,127,-36,-87,21,127,-59,-36,-86,126,-37,127,-19,54,-33,-54,38,9,-36,-71,127,47,127,35,4,-1,127,29,-101,47,-38,-35,-102,40,98,101,28,-60, 127,127,127,127,-46,-127,127,24,127,-127,16,-127,-109,127,127,127,-16,-127,-62,-127,127,22,-66,127,127,127,-54,-127,127,127,-127,127,-9,-127,-123,127,-127,-44,91,108,-127,-127,127,127,127,-117,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-41,41,-107,-27,-68,-67,127,127,-70,127,127,-108,-127,127,-40,127,-127,-127,-127,123,-76,127,-44,127,76,127,-38,-127,-27,-106,-127,-127,-22,-127,-21,-127,-127,118, -23,65,-37,3,127,73,-20,49,4,23,-13,-5,-27,-30,-12,-6,-104,-22,-127,39,33,75,-12,-118,-34,-40,127,72,9,36,72,8,125,-47,127,-3,56,6,-90,14,35,24,-22,0,-22,-55,-12,-41,81,17,-11,39,-6,-4,-72,-14,26,20,127,-91,2,127,0,-35,-109,-28,-74,100,14,-18,115,23,-18,-55,12,47,-29,-8,-44,-3,-47,8,46,24,-90,34,127,-46,32,-22,127,-10,-112,34,33,17, 
  /* [0][2][][] */ -4,-37,-20,-59,-5,14,41,32,-2,10,-21,51,23,-34,-8,6,41,3,8,23,-9,29,-16,-26,1,-23,11,3,-9,-7,48,-75,-36,67,-27,-25,31,-34,-67,16,10,9,-33,18,13,-80,-12,0,-9,6,18,-8,7,1,-20,7,0,44,-48,34,-5,-12,6,17,-6,-10,22,-55,-57,10,-22,-13,-115,-32,1,18,13,-13,56,18,22,22,-42,16,12,25,-21,10,4,25,22,-4,21,40,-7,-30, -27,-9,-26,25,-45,78,-24,66,5,-6,53,-12,127,-6,-18,-17,-1,-40,-61,24,-20,77,-44,-113,-47,-46,104,69,13,45,53,-2,-123,64,-14,-22,-28,-26,-127,-4,44,-13,-15,36,-26,-47,-18,-47,-61,28,69,24,-12,-81,31,53,19,25,75,-55,20,-58,-8,1,19,-26,-127,-56,-11,-27,-60,22,38,-46,-29,-7,-46,22,-56,1,49,34,16,11,5,61,-95,127,15,127,-31,-18,116,-21,46,81, -8,-31,-25,29,12,66,-42,13,3,-6,0,13,11,-49,-9,-13,-44,-4,14,20,-22,5,-20,4,-3,20,0,51,-2,-6,33,28,17,44,19,-22,-6,-25,-32,8,11,-11,21,8,-74,-35,-13,5,-2,-14,-1,-5,-9,8,-15,-5,0,-49,13,-29,-21,49,8,-28,-10,-2,37,-56,46,6,55,-22,30,-55,-17,22,10,10,-5,22,-31,31,88,-13,-18,53,40,-7,108,12,2,-18,12,-22,-6,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0084899496287107468, 0.0054212668910622597, 0.0095749245956540108, 0.0020668276119977236, 0.0065650786273181438, 0.007204362191259861, 0.014196191914379597, 0.003201507031917572, 0.0047411988489329815, 0.015101012773811817, 0.0065858345478773117, 0.0130307637155056, 0.0040960549376904964, 0.019323796033859253, 0.0069296769797801971, 0.0058419373817741871, 0.0046427207998931408, 0.013498855754733086, 0.0025535572785884142, 0.0085086114704608917, 0.0017670005327090621, 0.0078960945829749107, 0.0063680917955935001, 0.01444629393517971, 0.0089038042351603508, 0.01164694782346487, 0.0052777072414755821, 0.0082962606102228165, 0.004544032271951437, 0.0046603428199887276, 0.0058425874449312687, 0.0077767334878444672, 0.0057404660619795322, 0.0040429611690342426, 0.0086058899760246277, 0.0093383928760886192, 0.018752368167042732, 0.0054406099952757359, 0.0028787381015717983, 0.0064573138952255249, 0.0085770953446626663, 0.013953933492302895, 0.015926811844110489, 0.0071939448826014996, 0.0071124453097581863, 0.0022925431840121746, 0.0094669107347726822, 0.0083702933043241501, 0.0038298184517771006, 0.0086076436564326286, 0.0065515637397766113, 0.0076074753887951374, 0.010023207403719425, 0.012013444676995277, 0.012301182374358177, 0.020094284787774086, 0.018108049407601357, 0.0090431263670325279, 0.0046350620687007904, 0.0034193869214504957, 0.013741179369390011, 0.0055776927620172501, 0.011578060686588287, 0.0055270683951675892, 0.0081580197438597679, 0.0080255232751369476, 0.0038983954582363367, 0.0033925799652934074, 0.0139012411236763, 0.010175830684602261, 0.009261605329811573, 0.0054626832716166973, 0.0051931943744421005, 0.0069948886521160603, 0.00660361023619771, 0.010418216697871685, 0.022823013365268707, 0.0023157261312007904, 0.01163940317928791, 0.01511759776622057, 0.0067123039625585079, 0.011283782310783863, 0.004318517167121172, 0.0072778793983161449, 0.0057898093946278095, 0.0040585561655461788, 0.005788200069218874, 0.0075385794043540955, 0.0088597461581230164, 0.0047121099196374416, 0.0089433174580335617, 0.0046829329803586006, 0.0064292717725038528, 0.019374379888176918, 1.1783084869384766, 0.0034232430625706911, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 14195, 1011, 7197, -631, 4626, 5057, 13774, 5350, -1091, 13549, 5282, 1246, 7632, 33807, -195, -1872, 9829, 9870, 1390, -96, -593, 13179, 4685, 3227, 6526, 5477, 4038, 4945, 50, -13, 5777, 8665, 14559, 1332, 7524, -831, 19192, 7892, 871, 4227, 712, 10093, 9560, 4108, 2718, 12655, 14026, 6189, 4569, 2995, 288, -604, 17584, 6358, 6860, 14274, -280, 7138, 2464, 3763, 12279, 4904, 2453, 5157, 5464, 4209, 5478, -727, 15992, 7479, 9462, -1159, -1460, 3530, 1390, 3019, 20492, 12355, 11252, -2340, 5832, -4461, -1535, 608, 5398, 4039, 6261, 3646, 10679, 4206, 7811, 3627, 16175, 17076, -10810, 12843, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018188920512329787, 0.00035395639133639634, 0.00018536038987804204, 0.00092642800882458687, 0.00034694542409852147, 0.00018120819004252553, 0.00022589167929254472, 0.00065842911135405302, 0.00040583862573839724, 0.00013336300617083907, 0.00027644107467494905, 0.00064657401526346803, 0.00036407102015800774, 0.00014178469427861273, 0.00037457043072208762, 0.00038035528268665075, 0.000226162577746436, 0.00023811311984900385, 0.00030535488622263074, 0.00095039879670366645, 0.00038131567998789251, 0.00018915331747848541, 0.00031908709206618369, 0.00024800334358587861, 0.00027341788518242538, 0.00037900981260463595, 0.00034618659992702305, 0.0001885702513391152, 0.00079524482134729624, 0.00036583223845809698, 0.00024968487559817731, 0.00021895756071899086, 0.00013700348790735006, 0.0008032206678763032, 0.00022349557548295707, 0.00038751651300117373, 0.00011831581650767475, 0.000331358693074435, 0.00059867574600502849, 0.00022757271653972566, 0.00071510369889438152, 0.00018448522314429283, 0.00022330910724122077, 0.00017841740918811411, 0.00041252587107010186, 0.0002596029662527144, 0.00020347992540337145, 0.00023922846594359726, 0.00034408131614327431, 0.00028593034949153662, 0.00045950268395245075, 0.0010739690624177456, 0.00015167689707595855, 0.000249737553531304, 0.00033483986044302583, 0.00013048223627265543, 0.00039368719444610178, 0.00024702431983314455, 0.00032280426239594817, 0.00043549595284275711, 0.00013769013457931578, 0.00028407174977473915, 0.00041028967825695872, 0.00053528003627434373, 0.00018876005196943879, 0.00026819293270818889, 0.0003540690231602639, 0.00046747323358431458, 0.00016768716159276664, 0.00015398988034576178, 0.00020869827130809426, 0.00041822707862593234, 0.00027768820291385055, 0.00036707133403979242, 0.00030083119054324925, 0.0004168758459854871, 0.00011665876809274778, 0.0003634069871623069, 0.00014844114775769413, 0.00051553105004131794, 0.00018697147606872022, 0.00046803508303128183, 0.00023736176081001759, 0.00046866250340826809, 0.00029602475115098059, 0.00038553372723981738, 0.00026318209711462259, 0.00038135627983137965, 0.00015968571824487299, 0.00038145971484482288, 0.00017828043201006949, 0.00046852996456436813, 0.00013190886238589883, 0.00016122320084832609, 0.00027214406873099506, 0.00025595416082069278, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 30,-11,127,94,72,-13,30,-30,104,-10,-27,-66,16,78,-31,-82, 
  /* [1][0][][] */ 46,55,-8,-18,94,-23,-19,22,49,50,-43,127,-11,-37,83,-69, 
  /* [2][0][][] */ 58,-51,13,21,-56,74,-49,112,-97,-112,0,112,-6,-127,100,-115, 
  /* [3][0][][] */ 127,114,7,40,-105,-9,-55,-24,9,5,110,-55,-55,99,-59,-45, 
  /* [4][0][][] */ -6,-7,9,11,-29,31,-3,43,-79,-41,6,6,2,-127,21,8, 
  /* [5][0][][] */ 87,-41,-22,-11,-25,-127,-40,18,-16,16,-119,-19,24,-25,-4,32, 
  /* [6][0][][] */ -106,-71,-16,93,-40,-8,-47,12,-127,-94,-76,-30,14,52,19,98, 
  /* [7][0][][] */ 2,16,-77,61,41,-127,-28,42,14,-38,8,-9,-7,29,-41,10, 
  /* [8][0][][] */ 32,-48,-4,-8,15,30,-57,-57,-7,17,-67,11,-127,6,-5,20, 
  /* [9][0][][] */ 29,-63,75,127,1,14,-8,-71,117,-83,14,-20,-12,64,-70,28, 
  /* [10][0][][] */ -127,-63,-32,-42,87,40,38,67,76,-65,-63,23,60,-103,-96,77, 
  /* [11][0][][] */ 38,-21,-127,17,55,24,-21,41,-8,-30,-16,-7,0,22,-39,7, 
  /* [12][0][][] */ 93,-54,-6,8,-16,-64,-92,-52,52,-7,-127,-29,-71,-22,12,73, 
  /* [13][0][][] */ 66,-83,6,-37,81,-20,-116,-127,6,-50,-14,27,17,-25,-6,23, 
  /* [14][0][][] */ -66,24,-85,-42,87,-127,52,-64,55,48,-14,-103,12,81,-5,29, 
  /* [15][0][][] */ 29,-7,59,60,53,-49,-40,-10,24,-61,-81,-14,-127,-51,-12,38, 
  /* [16][0][][] */ -124,62,2,15,-11,79,48,69,-20,33,127,10,12,15,19,-47, 
  /* [17][0][][] */ -3,-11,-39,-27,-22,13,46,79,-14,127,-17,16,-6,83,51,-7, 
  /* [18][0][][] */ 9,127,-42,-12,14,-8,45,-58,44,105,-49,96,13,-46,29,-94, 
  /* [19][0][][] */ 0,-23,21,13,-1,44,-6,23,12,2,-40,-17,-127,6,-6,34, 
  /* [20][0][][] */ 114,-65,-3,-81,-30,30,18,-101,-66,12,-127,-55,27,20,62,-2, 
  /* [21][0][][] */ 55,10,127,53,-30,51,21,-9,-9,36,-22,-19,-16,68,15,-16, 
  /* [22][0][][] */ 25,11,33,22,-6,2,33,127,27,12,21,51,8,40,26,19, 
  /* [23][0][][] */ -33,31,-89,14,10,-127,20,45,-4,-12,-4,-9,-58,10,-11,42, 
  /* [24][0][][] */ 32,-46,2,-59,49,-6,-27,-2,36,41,67,103,-31,68,127,47, 
  /* [25][0][][] */ -127,-120,-51,21,30,29,24,-49,-54,-20,-103,21,-2,65,16,36, 
  /* [26][0][][] */ 16,-16,56,10,2,0,-51,72,-75,-56,-21,15,20,-127,43,-18, 
  /* [27][0][][] */ -101,46,-56,24,17,-3,12,29,37,-32,127,4,-27,19,-9,-8, 
  /* [28][0][][] */ -23,1,19,30,-3,-2,7,79,26,17,-27,-2,-127,-18,-6,41, 
  /* [29][0][][] */ -15,64,44,-37,43,-15,21,-25,-127,35,-39,14,8,33,-94,17, 
  /* [30][0][][] */ -9,0,-127,-28,20,-48,7,16,-26,-24,-3,-14,-37,-18,6,13, 
  /* [31][0][][] */ 127,-29,-90,15,46,2,-32,69,-13,5,-58,-32,22,3,-84,18, 
  /* [32][0][][] */ -127,26,20,31,30,86,13,34,33,-19,100,16,-35,17,-6,-20, 
  /* [33][0][][] */ 7,-4,127,-17,-54,39,17,-36,-6,3,-10,18,-8,24,29,10, 
  /* [34][0][][] */ -24,-22,-54,-109,36,9,5,-44,-33,-63,-36,-127,-10,-11,66,12, 
  /* [35][0][][] */ 5,-41,49,49,66,-29,7,-6,-102,44,-10,31,-17,127,-45,-38, 
  /* [36][0][][] */ -115,55,-29,-7,-10,38,26,88,-6,30,127,-16,-11,22,13,-31, 
  /* [37][0][][] */ -44,22,127,-38,-95,-77,34,-32,24,32,-1,7,-4,-70,70,16, 
  /* [38][0][][] */ 13,-3,-15,39,25,-51,-54,24,-5,6,70,-15,127,17,-17,11, 
  /* [39][0][][] */ -20,-32,-4,-34,-65,-99,70,127,-41,-24,9,-83,-14,67,72,62, 
  /* [40][0][][] */ 58,-9,-21,-17,-15,64,-20,7,20,4,23,-9,127,-1,-18,-6, 
  /* [41][0][][] */ -7,-2,-37,-127,12,8,-21,-52,-8,-27,28,-45,-6,-12,-15,39, 
  /* [42][0][][] */ 42,30,-7,107,-100,6,-80,-3,-72,-59,79,-80,-58,127,-49,2, 
  /* [43][0][][] */ 5,96,-31,127,18,29,39,-78,-52,69,-13,31,8,-44,50,30, 
  /* [44][0][][] */ -21,-35,-127,21,45,71,-32,48,-13,-21,27,-29,12,-29,-54,12, 
  /* [45][0][][] */ -7,14,-33,-127,-43,-19,46,-19,-29,19,-48,10,-14,-108,30,-17, 
  /* [46][0][][] */ 7,26,67,-23,23,14,-60,46,20,-57,-39,13,-3,127,62,-23, 
  /* [47][0][][] */ 18,-24,29,-52,-36,24,-69,47,-27,-48,16,30,-8,-127,46,15, 
  /* [48][0][][] */ 16,-23,19,-127,2,-18,-6,3,15,-34,9,-16,4,41,-10,49, 
  /* [49][0][][] */ 50,-45,1,107,93,-15,-12,60,-65,6,12,35,-3,44,127,4, 
  /* [50][0][][] */ -39,-44,65,-35,-8,127,-66,-108,55,-62,125,30,100,-25,11,-77, 
  /* [51][0][][] */ 20,41,3,14,21,-12,-44,20,40,1,-7,127,13,32,27,-47, 
  /* [52][0][][] */ -30,44,127,2,27,-34,4,-59,-18,-7,5,16,-13,81,-115,-28, 
  /* [53][0][][] */ -8,-22,-39,-127,-40,4,8,-48,-20,29,11,-12,3,-28,49,9, 
  /* [54][0][][] */ 20,13,-30,-53,22,13,-18,9,58,-10,11,-23,1,127,18,26, 
  /* [55][0][][] */ -11,-31,-27,-15,7,-44,-10,-127,2,-87,-19,2,-24,-68,-50,-16, 
  /* [56][0][][] */ 45,39,32,60,8,-28,7,127,18,-27,-5,-27,81,-19,-52,33, 
  /* [57][0][][] */ 73,-6,127,-14,-67,-44,-6,-27,21,29,-98,28,52,-53,62,12, 
  /* [58][0][][] */ 93,82,3,83,-127,-32,-15,42,-21,8,64,-43,-54,-43,-16,-64, 
  /* [59][0][][] */ 125,-49,-9,-2,-19,-23,-1,9,-32,20,-127,-14,5,-14,6,31, 
  /* [60][0][][] */ -127,42,-3,-6,12,11,17,19,10,14,89,9,-29,-12,17,-13, 
  /* [61][0][][] */ -108,82,23,23,28,-10,-81,-44,127,-104,78,-2,58,-36,-100,-61, 
  /* [62][0][][] */ -48,-25,-127,54,50,103,18,80,26,-74,34,-21,-85,-13,-87,-3, 
  /* [63][0][][] */ -40,16,127,-44,-56,-53,29,-18,10,27,12,18,-2,-35,59,17, 
  /* [64][0][][] */ 14,78,-9,34,47,5,99,-111,-9,127,10,-8,-6,-107,-13,57, 
  /* [65][0][][] */ 8,18,13,-18,78,13,17,-127,-39,-76,-26,-61,-17,-42,47,12, 
  /* [66][0][][] */ -127,8,-4,17,-42,33,25,-29,-64,-26,-77,61,65,26,46,82, 
  /* [67][0][][] */ -7,-39,8,127,18,5,-22,31,49,22,23,-5,-16,-38,-100,-35, 
  /* [68][0][][] */ 14,-4,-13,127,-44,-14,7,-21,-46,23,8,-23,-27,-49,-29,-43, 
  /* [69][0][][] */ 76,75,14,127,45,-7,67,-123,13,104,20,74,10,-35,33,-5, 
  /* [70][0][][] */ 29,-33,10,-94,127,-38,55,32,92,-25,65,-49,46,123,53,119, 
  /* [71][0][][] */ 12,55,11,88,49,-127,-34,103,40,-92,14,20,14,-55,-65,36, 
  /* [72][0][][] */ -127,-73,-1,50,19,41,-28,23,-54,-40,-88,44,44,29,-3,94, 
  /* [73][0][][] */ -3,-5,-6,83,26,-36,1,19,86,47,-2,23,50,127,-59,-41, 
  /* [74][0][][] */ 42,-53,30,-20,-18,12,20,-33,-31,-19,-98,17,-127,-12,32,26, 
  /* [75][0][][] */ -14,-7,-16,127,-28,10,5,-10,-59,24,-25,-15,7,-37,-23,-27, 
  /* [76][0][][] */ -7,-20,-5,41,29,9,-32,-127,18,-114,6,22,-33,-24,41,-38, 
  /* [77][0][][] */ 127,-25,16,56,-43,-6,-48,8,44,-15,-38,48,23,22,-60,31, 
  /* [78][0][][] */ -24,-14,47,-2,17,-10,-57,36,50,-24,-31,-34,14,127,39,-19, 
  /* [79][0][][] */ -1,22,52,22,50,57,-55,-52,17,-44,71,-16,127,-20,-38,-46, 
  /* [80][0][][] */ -125,-111,-82,127,-3,39,46,-19,-86,32,-89,17,59,-74,-2,55, 
  /* [81][0][][] */ 75,6,-81,38,127,99,-55,-32,-8,-113,-21,-88,-37,-11,-104,30, 
  /* [82][0][][] */ 92,126,-15,27,-127,-28,-75,-9,-67,-1,92,-61,-36,77,7,-22, 
  /* [83][0][][] */ 127,35,11,-20,4,-18,-14,26,38,13,77,-35,-52,-27,-16,-74, 
  /* [84][0][][] */ 18,-44,-69,-6,31,18,15,-127,-25,-24,26,3,-18,-10,-6,-33, 
  /* [85][0][][] */ -28,-10,-53,-61,-14,-27,57,91,-17,127,-9,-44,46,51,74,-15, 
  /* [86][0][][] */ 74,-20,-3,17,7,-24,10,-28,-6,0,-127,16,18,17,-16,23, 
  /* [87][0][][] */ -22,18,13,-27,-11,52,-37,47,-3,-31,25,6,11,-127,21,5, 
  /* [88][0][][] */ -10,1,-89,-50,50,21,-25,-127,2,-32,17,-16,-34,-2,32,-4, 
  /* [89][0][][] */ 27,-11,23,-127,28,12,-52,97,87,-77,20,-7,-16,47,44,48, 
  /* [90][0][][] */ -13,10,-35,55,100,-2,113,-114,87,127,-50,49,11,12,-36,-31, 
  /* [91][0][][] */ 29,-23,-38,-13,2,-127,-11,1,-1,-2,-52,4,33,-7,11,31, 
  /* [92][0][][] */ 28,16,127,67,36,20,-2,44,-22,36,-62,9,11,89,4,-21, 
  /* [93][0][][] */ 112,-34,-51,-21,-37,-58,-2,41,-29,39,-127,-2,-2,25,7,58, 
  /* [94][0][][] */ 22,-26,49,91,116,-39,-7,67,0,-13,-4,65,-5,127,-31,-80, 
  /* [95][0][][] */ -96,48,32,39,24,45,28,1,7,17,127,5,-9,24,-16,-18, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00053144199773669243, 0.0010341861052438617, 0.00054158410057425499, 0.0027068278286606073, 0.0010137015487998724, 0.00052945222705602646, 0.00066000799415633082, 0.0019237914821133018, 0.0011857751524075866, 0.00038965867133811116, 0.0008077027159743011, 0.0018891533836722374, 0.0010637389495968819, 0.00041426505777053535, 0.0010944160167127848, 0.0011113181244581938, 0.00066079950192943215, 0.00069571647327393293, 0.0008921827538870275, 0.0027768653817474842, 0.0011141241993755102, 0.00055266619892790914, 0.0009323053527623415, 0.00072461360832676291, 0.00079886952880769968, 0.0011073870118707418, 0.0010114844189956784, 0.00055096263531595469, 0.002323538064956665, 0.0010688848560675979, 0.00072952668415382504, 0.00063974794466048479, 0.00040029536467045546, 0.0023468418512493372, 0.00065300706773996353, 0.0011322417994961143, 0.00034569393028505147, 0.00096816039877012372, 0.0017492045881226659, 0.00066491961479187012, 0.0020893826149404049, 0.00053902703803032637, 0.00065246224403381348, 0.00052129814866930246, 0.001205313834361732, 0.00075850530993193388, 0.00059452553978189826, 0.00069897528737783432, 0.0010053332662209868, 0.00083542836364358664, 0.0013425701763480902, 0.0031379119027405977, 0.00044316798448562622, 0.00072968058520928025, 0.00097833166364580393, 0.00038124163984321058, 0.0011502711568027735, 0.00072175310924649239, 0.00094316620379686356, 0.0012724276166409254, 0.00040230160811915994, 0.00082999787991866469, 0.0011987801408395171, 0.0015639757039025426, 0.00055151717970147729, 0.00078360334737226367, 0.0010345152113586664, 0.0013658584794029593, 0.00048994662938639522, 0.00044992603943683207, 0.00060977245448157191, 0.0012219715863466263, 0.00081134651554748416, 0.0010725052561610937, 0.00087896548211574554, 0.0012180235935375094, 0.00034085239167325199, 0.0010617987718433142, 0.00043371383799239993, 0.0015062734019011259, 0.0005462913541123271, 0.001367500051856041, 0.00069352117134258151, 0.0013693332439288497, 0.00086492206901311874, 0.0011264485074207187, 0.00076896278187632561, 0.0011142428265884519, 0.00046656807535327971, 0.0011145450407639146, 0.00052089791279286146, 0.0013689460465684533, 0.00038540994864888489, 0.00047106030979193747, 0.00079514773096889257, 0.00074784422758966684, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -40006, 2638, 994, -8445, 1532, -7280, -10861, -42337, 6139, 27820, 30880, -8707, -2040, -21033, 41180, -43310, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00059114786563441157, 0.00088464858708903193, 0.0009417789988219738, 0.0011491321492940187, 0.0006917659193277359, 0.0010477973846718669, 0.0012981964973732829, 0.0005826718988828361, 0.00078877730993553996, 0.00077010737732052803, 0.00081233156379312277, 0.00056677829707041383, 0.0011492554331198335, 0.0013159023365005851, 0.00047959067160263658, 0.00061302486574277282, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -21,-1,-28,4,22,2,8,114,-61,19,44,-8,13,-15,-8,15,15,-18,-14,-11,64,-10,16,127,-24,91,1,-8,25,-14,26,-26,-13,50,23,-54,12,44,23,-9,-115,-22,10,42,38,30,-126,-46, 
  /* [1][0][][] */ -38,-3,16,17,-28,13,-3,53,-49,-32,4,-37,-20,-11,9,-6,-25,122,-7,14,11,3,-31,-19,27,-40,23,25,-30,-77,-37,20,-17,-8,30,-1,-8,-39,-1,14,-22,-27,127,12,6,-4,25,-9, 
  /* [2][0][][] */ -23,-10,-12,-34,-4,-65,9,-19,-1,12,14,28,15,13,-15,9,-2,-22,-28,-13,-7,2,-5,-127,-14,75,-12,7,1,-17,0,-3,-10,56,11,-6,20,8,29,4,-37,6,-21,-8,-1,-10,13,7, 
  /* [3][0][][] */ -7,31,7,-28,-2,-1,3,-2,-19,-4,2,41,-127,1,-6,-1,3,5,-19,-2,-32,9,7,17,-8,-13,3,24,-9,16,6,18,4,3,16,19,-9,24,42,4,13,7,22,-28,9,-5,3,15, 
  /* [4][0][][] */ 33,-35,10,12,19,28,27,-27,-29,-1,-15,-17,1,12,0,19,24,-12,-79,2,-5,14,9,70,2,-28,-1,45,10,-73,17,14,9,-36,35,-127,15,33,-3,20,-20,18,10,-26,-12,-18,14,2, 
  /* [5][0][][] */ 28,1,-19,57,-2,-5,11,25,0,-4,37,9,2,55,2,4,-22,18,26,0,7,4,-2,-27,0,-47,4,-18,-5,-5,4,6,63,-127,5,27,-17,-14,15,11,-90,58,18,-6,-5,-5,-98,-4, 
  /* [6][0][][] */ 25,3,3,5,-12,-4,0,-15,0,7,-4,7,-17,14,10,2,-2,-10,127,2,5,7,14,-39,3,4,24,-8,-15,2,-4,3,2,-16,30,-40,-3,-41,68,12,-3,-4,-7,7,-8,-1,9,-5, 
  /* [7][0][][] */ -43,-19,-7,34,-12,77,-4,51,-6,29,-11,127,81,-8,-13,0,-3,-23,-11,-12,-32,-4,-14,73,-2,-40,-54,-33,-9,-18,-8,-5,-1,5,-27,6,10,-59,98,-3,28,25,-65,-58,22,-7,-1,0, 
  /* [8][0][][] */ -52,-59,0,5,-7,3,6,30,-3,-73,-3,43,52,2,8,13,-7,60,-29,6,-48,23,-12,-15,-3,-5,0,41,-6,114,-16,27,-8,3,-17,-127,-114,64,30,37,19,-5,108,-20,3,31,24,28, 
  /* [9][0][][] */ -27,-4,2,26,14,-35,-2,1,52,-45,5,51,-51,-2,8,6,-1,15,-40,-27,45,8,-15,-17,0,2,45,-30,15,9,6,2,-13,20,74,-104,-7,-127,-93,13,-25,22,52,10,6,10,-14,-40, 
  /* [10][0][][] */ -27,-8,-39,-127,51,88,7,-7,3,33,19,12,55,-45,-28,27,38,-44,60,-41,30,-24,35,51,-52,-110,8,-35,49,38,41,-41,-35,-83,30,-11,20,-49,5,-33,-38,-65,-9,10,9,10,22,-34, 
  /* [11][0][][] */ 0,43,-3,69,31,-70,-80,-22,-4,69,-24,-7,-5,55,-9,-79,28,49,4,-7,-66,-101,14,5,10,-39,29,-18,58,-49,27,-93,41,-17,-44,-96,98,17,9,-127,2,71,92,-81,-3,-56,29,30, 
  /* [12][0][][] */ 119,-1,-17,9,-3,19,4,99,15,-9,-55,-20,0,17,-8,-5,-11,5,-8,-10,6,4,2,21,-4,18,0,8,-4,16,-5,-5,1,-59,-10,6,-18,-19,-25,0,-15,-77,1,-127,-54,-11,73,-5, 
  /* [13][0][][] */ 7,2,-2,5,6,-10,2,2,0,6,4,21,-3,5,7,2,6,0,7,0,9,-11,8,-5,1,1,18,127,11,-3,7,-4,5,-3,-37,16,6,-6,5,-13,-14,-1,0,4,-2,-3,-8,-11, 
  /* [14][0][][] */ 67,-27,45,-71,53,26,32,-100,-52,-59,-3,117,-66,-4,68,10,50,27,-49,67,24,7,83,-15,28,55,-33,-117,30,-43,59,39,-8,73,-127,-45,-33,49,85,9,-35,2,52,5,0,-1,14,-30, 
  /* [15][0][][] */ -2,-45,-78,-31,56,30,71,-56,-2,18,-8,-37,77,21,-95,61,53,51,80,-74,-96,-20,61,-18,-87,42,31,51,55,48,53,-50,28,52,98,127,-14,-102,-13,-39,88,60,118,-48,-6,-29,-11,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.025123784318566322, 0.037597563117742538, 0.040025606751441956, 0.048838116228580475, 0.029400050640106201, 0.044531386345624924, 0.055173348635435104, 0.024763554334640503, 0.033523034304380417, 0.032729562371969223, 0.034524090588092804, 0.024088077247142792, 0.048843353986740112, 0.055925846099853516, 0.020382603630423546, 0.026053557172417641, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 4565, 37544, -1124, 44354, 4505, 133166, -1860, 51084, 7590, 30639, 29110, 3038, -2154, 34405, -1654, -2883, -299, 582, 1913, -2096, 98, -2979, 139, -22867, -4912, 42353, 131360, 99899, 2683, 2963, -2987, 91, 26980, -1418, 25878, 3454, 37941, 5634, 63930, 2196, -1664, 61527, 1678, 4627, 47259, 108, 3277, 50841, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.9732937845401466e-05, 4.5390454033622518e-05, 0.00016819614393170923, 5.2385486924322322e-05, 0.00014398476923815906, 5.8331028412794694e-05, 0.00016345598851330578, 0.00011281803017482162, 5.5752880143700168e-05, 4.3100819311803207e-05, 5.5420743592549115e-05, 9.0802815975621343e-05, 4.8846424760995433e-05, 4.2852665501413867e-05, 0.00016542577941436321, 0.00018607413221616298, 0.00017789265257306397, 6.531149847432971e-05, 0.0001331455132458359, 0.00015695374167989939, 9.9720644357148558e-05, 0.00019060060731135309, 0.00011082930723205209, 0.00015154921857174486, 0.00011689380335155874, 0.00010796501010190696, 3.1389005016535521e-05, 7.1165035478770733e-05, 0.00012551306281238794, 0.00012763931590598077, 0.00011560644634300843, 0.00014715977886226028, 5.2192168368492275e-05, 0.00019995836191810668, 3.1698458769824356e-05, 5.059124669060111e-05, 0.0001549451844766736, 7.6411502959672362e-05, 8.7226340838242322e-05, 9.5302544650621712e-05, 0.00014574297529179603, 9.5537878223694861e-05, 6.9421985244844109e-05, 7.8117940574884415e-05, 2.7978110665571876e-05, 0.00015755752974655479, 8.978848927654326e-05, 2.6851361326407641e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-93,97,71,53,-34,107,-65,61,-88,-79,48,51,-42,-72,-89,101,78,48,78,66,-73,-82,51,-31,-40,-65,-64,-67,62,-62,-113,-13,41,68,64,-65,53,-49,-23,51,-73,57,62,-93,10,76,-33, 82,-96,127,85,-77,-68,-56,-84,96,-103,-64,75,79,-110,-95,93,-39,94,82,127,83,-114,52,72,-51,-77,-70,-80,56,80,-30,-127,-85,79,80,83,-83,81,-82,-16,76,-95,82,89,-73,-127,93,-102, 35,-47,70,38,18,-41,-47,-39,42,-32,6,34,28,-80,-55,0,-55,36,34,69,33,-54,31,25,-28,-46,-45,-23,32,30,88,-89,-86,44,35,34,-30,39,-38,-9,40,-42,35,43,-6,-9,37,-71, 
  /* [0][1][][] */ 91,-112,-42,92,55,-83,127,-89,87,-113,-71,82,83,-110,-12,-127,127,106,74,-39,84,107,-127,73,72,-75,-93,-99,-127,86,-68,-9,-89,72,106,96,-85,79,-81,88,84,-101,88,90,-90,107,94,-90, 127,-127,-65,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-22,97,-66,127,127,-50,127,127,68,127,127,-127,-127,-127,54,127,-28,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-81,-32,66,38,-62,-49,-64,56,-42,-60,58,48,-54,-17,11,-63,49,59,-30,57,64,50,64,65,-66,-62,-45,36,55,127,15,-63,70,49,50,-49,60,-60,57,61,-58,53,62,-61,-67,58,-57, 
  /* [0][2][][] */ 45,-53,-46,49,26,-53,63,-42,40,-74,-5,39,56,-73,83,-79,74,51,36,-31,27,-10,-76,31,-24,-44,-47,-49,-74,31,-41,90,-75,37,49,42,-26,38,-42,-88,48,-50,41,45,-22,16,40,-74, 72,-75,-49,80,-57,-64,-72,-68,50,-77,-66,60,74,-48,127,32,-47,58,63,-44,55,-17,40,67,-48,-66,-76,-61,32,62,-24,117,-55,65,57,58,-50,61,-68,-107,70,-67,60,63,-86,50,62,-54, 40,-44,-27,45,29,-21,-17,-35,15,-27,-52,28,31,6,67,23,-36,21,29,-33,29,1,39,42,-24,-30,-47,-25,33,34,61,66,0,34,16,23,-23,30,-30,-55,29,-31,25,29,-64,9,31,-6, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.002963649807497859, 0.0019290943164378405, 0.007148335687816143, 0.0022263831924647093, 0.0061193527653813362, 0.0024790687020868063, 0.0069468794390559196, 0.0047947661951184273, 0.002369497437030077, 0.0018317848443984985, 0.0023553816135972738, 0.0038591197226196527, 0.0020759729668498039, 0.0018212383147329092, 0.0070305955596268177, 0.0079081505537033081, 0.0075604375451803207, 0.0027757384814321995, 0.0056586842983961105, 0.0066705336794257164, 0.0042381272651255131, 0.008100525476038456, 0.0047102454118430614, 0.0064408415928483009, 0.0049679866060614586, 0.0045885127037763596, 0.0013340327423065901, 0.0030245140660554171, 0.0053343051113188267, 0.0054246708750724792, 0.0049132737331092358, 0.0062542902305722237, 0.0022181670647114515, 0.008498230017721653, 0.0013471845304593444, 0.0021501278970390558, 0.0065851705148816109, 0.0032474887557327747, 0.0037071194965392351, 0.0040503581985831261, 0.0061940765008330345, 0.0040603596717119217, 0.0029504343401640654, 0.0033200124744325876, 0.0011890697060152888, 0.006696194875985384, 0.0038160106632858515, 0.0011411828454583883, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 657, 727, 1946, 446, 9299, 15905, 2184, -85, -636, -517, 1066, 880, 2653, 1171, 20048, 2717, 1837, -1080, -389, 2902, -1618, 8791, 8740, 9634, 4746, 170, 3800, 3943, 7931, -448, 8916, 5308, 600, -293, 4275, 3718, -1767, 215, -498, 3871, 884, -637, -799, 101, 995, 3136, 685, 951, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00038275608676485717, 0.00095771468477323651, 0.0002889518509618938, 0.00031394007964991033, 0.00023624420282430947, 0.00025496137095615268, 0.00050700845895335078, 0.00023537881497759372, 0.0004051218566019088, 0.00086051708785817027, 0.00095265015261247754, 0.00033567994250915945, 0.00046670003212057054, 0.00066011952003464103, 0.00017938045493792742, 0.00046308586024679244, 0.00027372996555641294, 0.00040249654557555914, 0.00027399603277444839, 0.00032194057712331414, 0.00037567695835605264, 0.00029136257944628596, 0.00042235408909618855, 0.00016332244558725506, 0.00034040838363580406, 0.00032344463397748768, 0.0018249668646603823, 0.00047109895967878401, 0.00021524312614928931, 0.00051132624503225088, 0.00029500125674530864, 0.00022483603970613331, 0.00066544651053845882, 0.00024936159024946392, 0.00086604204261675477, 0.00049401982687413692, 0.00078335055150091648, 0.00040446507045999169, 0.00026766740484163165, 0.00048299090121872723, 0.00016465854423586279, 0.00023963899002410471, 0.00037991040153428912, 0.00030964435427449644, 0.0019531636498868465, 0.00044211652129888535, 0.00032727420330047607, 0.0012507106876000762, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,7,1,83,-38,44,23,-34, 
  /* [1][0][][] */ 36,66,47,27,10,-54,105,127, 
  /* [2][0][][] */ -31,-2,-1,1,-127,-15,9,-4, 
  /* [3][0][][] */ 90,2,-8,-116,-127,24,36,-23, 
  /* [4][0][][] */ -127,68,-30,-3,79,-26,81,34, 
  /* [5][0][][] */ -112,-21,27,-12,-127,13,8,85, 
  /* [6][0][][] */ -14,-127,24,-16,9,-5,-1,35, 
  /* [7][0][][] */ -76,-8,1,104,127,-36,-35,4, 
  /* [8][0][][] */ 83,-10,5,-127,-5,-21,-42,-41, 
  /* [9][0][][] */ 0,-127,-17,-5,9,73,-52,81, 
  /* [10][0][][] */ -94,-8,-2,28,-127,73,60,-16, 
  /* [11][0][][] */ 109,10,43,16,-61,-47,-28,-127, 
  /* [12][0][][] */ 5,10,42,-3,10,-85,127,68, 
  /* [13][0][][] */ 57,-31,-10,-22,126,127,121,-41, 
  /* [14][0][][] */ 127,38,-26,32,-85,-6,-34,-13, 
  /* [15][0][][] */ -9,-127,10,-11,3,2,8,38, 
  /* [16][0][][] */ -55,-11,3,3,-127,-7,21,14, 
  /* [17][0][][] */ -22,92,-115,5,17,-127,97,-79, 
  /* [18][0][][] */ 127,-21,-40,9,-52,25,7,101, 
  /* [19][0][][] */ 127,-38,-12,-2,35,-3,27,0, 
  /* [20][0][][] */ 127,32,-4,107,1,36,3,-60, 
  /* [21][0][][] */ 15,27,-62,5,-20,90,-127,-84, 
  /* [22][0][][] */ -127,20,20,-13,-33,4,-47,-22, 
  /* [23][0][][] */ -38,-59,-3,26,-127,62,73,-15, 
  /* [24][0][][] */ 127,-4,-18,4,-82,-12,5,3, 
  /* [25][0][][] */ 27,-21,1,-26,127,48,52,-28, 
  /* [26][0][][] */ 13,-98,5,-52,3,-127,78,-60, 
  /* [27][0][][] */ -19,-127,22,-11,-5,-57,33,-11, 
  /* [28][0][][] */ -118,23,-33,12,-12,-32,127,115, 
  /* [29][0][][] */ -12,37,12,2,-1,38,-102,-127, 
  /* [30][0][][] */ 127,-25,22,1,-83,13,-71,-48, 
  /* [31][0][][] */ -29,-44,77,-20,46,-116,127,87, 
  /* [32][0][][] */ -82,27,10,0,-127,-103,-106,49, 
  /* [33][0][][] */ -26,10,-4,25,-127,-63,-49,20, 
  /* [34][0][][] */ 14,-127,54,-8,-2,91,-82,61, 
  /* [35][0][][] */ -24,-48,-127,-7,-5,-66,43,-58, 
  /* [36][0][][] */ 8,127,57,8,-14,11,-20,-40, 
  /* [37][0][][] */ -127,34,29,-16,58,-31,-12,-102, 
  /* [38][0][][] */ -127,-22,-49,-12,32,18,33,106, 
  /* [39][0][][] */ -2,-37,58,5,3,-68,127,80, 
  /* [40][0][][] */ -38,-24,-18,-39,-127,113,126,-31, 
  /* [41][0][][] */ -127,55,3,-81,-90,-97,-90,57, 
  /* [42][0][][] */ -39,-127,-105,-5,-2,60,-113,-71, 
  /* [43][0][][] */ -65,10,-16,-127,97,54,57,3, 
  /* [44][0][][] */ 127,-15,7,-94,30,-38,-11,49, 
  /* [45][0][][] */ -26,-127,-3,-18,-6,-67,72,9, 
  /* [46][0][][] */ 115,-9,-7,-20,127,-40,-29,6, 
  /* [47][0][][] */ 127,4,7,108,-5,30,11,-54, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0006662844680249691, 0.0016671463381499052, 0.00050299428403377533, 0.00054649263620376587, 0.00041124320705421269, 0.00044382520718500018, 0.00088257732568308711, 0.0004097367636859417, 0.00070521776797249913, 0.0014979491243138909, 0.0016583302058279514, 0.00058433640515431762, 0.00081241026055067778, 0.0011491061886772513, 0.0003122573543805629, 0.00080611888552084565, 0.00047649673069827259, 0.00070064776809886098, 0.00047695988905616105, 0.00056041957577690482, 0.00065396144054830074, 0.00050719076534733176, 0.00073521485319361091, 0.00028430431848391891, 0.00059256749227643013, 0.00056303775636479259, 0.0031768195331096649, 0.00082006771117448807, 0.00037468547816388309, 0.00089009350631386042, 0.00051352480659261346, 0.00039138438296504319, 0.001158379134722054, 0.00043407737393863499, 0.0015075667761266232, 0.00085996731650084257, 0.0013636210933327675, 0.00070407445309683681, 0.00046594330342486501, 0.00084076868370175362, 0.00028663012199103832, 0.00041715268162079155, 0.00066133082145825028, 0.00053901487262919545, 0.0033999786246567965, 0.00076961639570072293, 0.00056970410514622927, 0.0021771804895251989, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -39454, 27659, -12710, -11776, 23179, -3536, 29677, 43143, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.0004460526688490063, 0.00074793270323425531, 0.0015389412874355912, 0.0015826259041205049, 0.00079739867942407727, 0.00059665186563506722, 0.00073298119241371751, 0.0010523987002670765, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -51,-26,-34,15,9,-22,-1,-3,-117,127,-46,112,119,22,79,-24,-5,-30,4,9,-8,-2,-24,-30,38,-98,9,56,-12,13,11,-35,-7,-72,103,22,-3,-2,6,-23,109,9,51,-31,-28,22,-10,-20, 
  /* [1][0][][] */ -2,31,127,4,-5,-25,2,-80,26,1,20,3,-22,6,-6,-120,9,-58,9,10,-27,34,22,-31,-17,-11,10,2,13,1,8,-2,-10,9,13,9,-17,-32,70,-57,6,43,-11,22,-15,5,25,-9, 
  /* [2][0][][] */ 5,-56,13,-46,32,28,-8,-21,8,1,-8,12,-16,57,10,5,-35,127,-24,-29,-18,30,-40,-9,121,2,1,-6,-25,-6,0,-36,-11,-15,-5,8,-12,-4,-11,4,10,-18,-23,-4,3,23,-25,-44, 
  /* [3][0][][] */ -3,-92,-5,4,1,-4,-15,-2,-10,-11,19,18,14,-8,47,-1,-11,-21,4,22,-8,20,-26,5,4,57,-4,5,-8,5,127,0,10,8,-5,3,-27,-18,-13,11,-8,9,-11,29,-8,-3,0,35, 
  /* [4][0][][] */ -97,5,-3,3,4,-34,-5,3,44,-41,15,-19,-34,9,-7,-10,2,7,-1,21,9,-22,11,13,0,40,4,106,-4,1,-12,-28,-3,-127,-34,8,4,-7,7,-1,-55,0,-8,9,-57,-1,9,8, 
  /* [5][0][][] */ -31,21,16,6,-49,2,3,47,14,8,7,4,-10,-43,12,38,-5,-82,21,4,37,-33,4,41,9,5,-77,-36,-35,-32,13,-3,-3,-70,2,-65,54,10,-37,10,19,-38,6,3,127,-15,-39,-5, 
  /* [6][0][][] */ -24,-22,-17,-3,38,-25,2,-28,-8,-7,35,-18,-9,38,-1,-58,-3,2,-1,-27,-34,38,-9,-79,2,-8,-50,-64,18,43,-11,-4,4,-53,-12,64,-61,-50,7,-51,-2,10,15,40,127,-23,36,18, 
  /* [7][0][][] */ 10,33,-78,24,-22,9,2,53,-9,0,58,-26,10,-25,-6,-2,-20,-127,33,-41,55,34,11,-51,23,-24,21,4,-27,30,-12,0,4,36,3,-24,-7,-59,-40,-67,-8,-22,42,57,-28,-22,-3,0, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018957238644361496, 0.031787138432264328, 0.065405003726482391, 0.067261599004268646, 0.033889442682266235, 0.025357702746987343, 0.031151700764894485, 0.044726941734552383, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52555, -182, 8760, 877, 5317, -5525, 1643, 23896, 669, 32019, -2449, 24921, -5740, -1024, 25718, 3265, 172, 19115, 35798, 10860, -213, -379, 316, 12975, -8158, 25557, 46043, 35352, 3514, 431, -1600, 1408, 1340, 17065, -6910, 13524, -11372, 15772, -22378, 115675, 19781, 21823, 10616, -1789, 16031, 3567, 1347, -646, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034524535294622183, 0.00029084371635690331, 0.00017992008361034095, 0.00023989270266611129, 0.00015228870324790478, 0.00010370329982833937, 0.00066562485881149769, 0.00014471501344814897, 0.00016888703976292163, 0.00015174911823123693, 9.9543409305624664e-05, 0.00017453223699703813, 0.00033839367097243667, 0.00022729598276782781, 9.7679461759980768e-05, 0.0004776153655257076, 0.00017921441758517176, 0.00021420573466457427, 6.5877960878424346e-05, 0.00016999903891701251, 0.00022210270981304348, 0.0001900529459817335, 0.00017941692203748971, 0.00016550661530345678, 0.00016674924700055271, 0.00014384168025571853, 0.00067066331394016743, 9.5302711997646838e-05, 0.00020260432211216539, 0.0017988737672567368, 9.4794668257236481e-05, 0.0001619488321011886, 0.00060040218522772193, 0.00017112170462496579, 0.00018431588250678033, 0.00018592218111734837, 0.00036902326974086463, 0.00015233877638820559, 0.00028630404267460108, 2.2019226889824495e-05, 0.00016403369954787195, 6.4407831814605743e-05, 0.00015462645387742668, 0.00015605834778398275, 0.00015205383533611894, 0.00010573161125648767, 0.00022862124023959041, 0.00012619378685485572, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,21,106,5,80,0,28,15,8,9,7,-10,-9,-45,8,-2,8,-23,-113,-6,-22,127,-10,-3,7,-5,8,-5,5,15,99,20,29,37,-28,1,35,-1,1,17,-68,-9,-8,16,2,-6,-9, 127,9,15,-127,28,87,12,11,124,127,7,43,-53,-24,5,7,127,-56,-58,-55,-99,25,-110,15,17,72,-31,-83,22,21,10,-125,6,-62,127,9,-39,-46,-5,115,-79,-97,-31,3,-35,-9,-127,23, -32,-3,8,13,0,64,4,18,29,8,-13,31,-16,-4,15,3,-103,29,-2,79,-31,-12,-18,-7,-5,-59,-3,29,-17,5,4,-23,8,-24,16,-19,0,48,42,-12,50,38,-16,11,-44,2,-2,-6, 
  /* [0][1][][] */ 126,6,1,-98,14,-27,36,-16,8,9,-12,53,-8,-2,18,-33,0,-50,-57,-85,11,-74,-125,-19,4,99,-14,-127,-9,33,12,-109,18,-54,-3,127,-3,59,-40,41,-62,-127,39,-88,-45,-15,-12,-4, 28,-127,-127,112,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-42,127,-127,127,127,127,-81,127,127,127,-123,101,108, 54,6,49,-14,6,-61,44,19,-23,14,-104,-8,0,-41,127,4,63,-66,-70,86,15,-46,11,-34,1,6,-37,68,19,40,0,3,33,-45,8,66,-5,65,68,-10,-81,8,-85,-31,26,-17,-11,6, 
  /* [0][2][][] */ -53,-7,26,-17,7,34,-37,23,9,-24,12,32,6,-7,-38,17,5,22,-12,106,7,-32,-16,-13,-4,22,0,51,-11,3,47,-32,-18,-44,-32,-40,-1,32,9,-22,9,-5,43,-36,-37,18,-11,18, 69,126,75,21,16,-20,123,35,19,-3,43,26,-5,-1,-92,24,-58,-57,-34,123,-36,49,12,19,32,-63,-41,30,75,1,127,21,86,-26,7,-36,-25,-17,-13,118,-27,-13,-40,46,20,-33,7,-127, -42,-3,7,-3,5,-5,-61,8,-18,-11,-40,-40,20,-10,-9,11,33,23,-8,-127,23,-10,5,-9,-6,10,-10,-53,-15,8,6,8,-21,88,-37,-23,-4,37,24,-60,4,7,-38,7,-44,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014672926627099514, 0.012360857799649239, 0.0076466035097837448, 0.010195439681410789, 0.0064722700044512749, 0.0044073900207877159, 0.028289055451750755, 0.0061503881588578224, 0.0071776993572711945, 0.0064493375830352306, 0.0042305947281420231, 0.0074176196940243244, 0.014381730929017067, 0.0096600791439414024, 0.0041513768956065178, 0.020298652350902557, 0.0076166125945746899, 0.0091037433594465256, 0.0027998131699860096, 0.0072249593213200569, 0.0094393650069832802, 0.0080772498622536659, 0.0076252189464867115, 0.0070340312086045742, 0.0070868427865207195, 0.0061132712289690971, 0.028503190726041794, 0.0040503651835024357, 0.0086106834933161736, 0.076452136039733887, 0.0040287734009325504, 0.0068828249350190163, 0.025517091155052185, 0.0072726723738014698, 0.0078334249556064606, 0.0079016927629709244, 0.015683488920331001, 0.0064743976108729839, 0.012167921289801598, 0.00093581713736057281, 0.0069714323617517948, 0.00273733283393085, 0.0065716244280338287, 0.0066324793733656406, 0.0064622876234352589, 0.0044935932382941246, 0.0097164027392864227, 0.0053632357157766819, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 45750, 6118, 5373, 5946, 1283, 9652, -1525, -231, 794, 1818, 2936, 272, 1665, -665, 626, -1689, 4589, 10298, -214, 23631, 3398, 2670, 6405, -461, 2971, 4157, 24659, 9156, -52, -2186, 132, 2006, -1479, 8318, 2580, 5964, 5958, 4057, 16612, 1614, -863, 2254, 996, 3285, 3968, 2029, -1218, 2311, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 9.4074304797686636e-05, 0.00036742197698913515, 0.00028482882771641016, 0.00054394931066781282, 0.0017473333282396197, 0.00052365096053108573, 0.001257853233255446, 0.0013161016395315528, 0.0007149864686653018, 0.00075957889202982187, 0.00076205207733437419, 0.00060481944819912314, 0.00060878414660692215, 0.00069107738090679049, 0.00068285950692370534, 0.0021366425789892673, 0.0003634774184320122, 0.00041423080256208777, 0.0023500171955674887, 0.00011459503002697602, 0.00036221937625668943, 0.00037680930108763278, 0.0006218202761374414, 0.0011744122020900249, 0.00040816375985741615, 0.00028350719367153943, 0.00016490975394845009, 0.0004010906268376857, 0.00093386473599821329, 0.0012003558222204447, 0.0006245402037166059, 0.00042379787191748619, 0.0013371985405683517, 0.00026222478481940925, 0.0004140046366956085, 0.00031395710539072752, 0.00061597570311278105, 0.00032352152629755437, 0.00014001621457282454, 0.0028115243185311556, 0.00070935784606263041, 0.0012266684789210558, 0.00050941127119585872, 0.00044881887151859701, 0.00029994730721227825, 0.00054274010471999645, 0.00093180977273732424, 0.0011464492417871952, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 59,34,7,-9,127,28,-46,-24, 
  /* [1][0][][] */ -8,1,3,127,16,-5,9,13, 
  /* [2][0][][] */ 37,-127,-16,42,-15,-70,81,14, 
  /* [3][0][][] */ 127,-18,2,20,-12,-22,25,-2, 
  /* [4][0][][] */ 6,-38,127,-20,-4,-46,5,-94, 
  /* [5][0][][] */ 74,6,-4,-2,127,7,-8,2, 
  /* [6][0][][] */ -28,77,-14,127,23,42,-72,-41, 
  /* [7][0][][] */ -3,127,-2,3,6,-12,15,-4, 
  /* [8][0][][] */ 127,55,-1,9,-52,-25,-5,-38, 
  /* [9][0][][] */ -127,6,6,17,43,10,-7,5, 
  /* [10][0][][] */ -84,-1,21,127,45,22,-18,0, 
  /* [11][0][][] */ -127,0,18,-62,36,-2,-30,-34, 
  /* [12][0][][] */ 127,28,5,19,-48,-11,0,-50, 
  /* [13][0][][] */ -12,71,-127,-2,-3,105,-70,82, 
  /* [14][0][][] */ -51,-22,-6,127,20,6,-2,-19, 
  /* [15][0][][] */ 1,127,3,-5,-2,-15,11,-50, 
  /* [16][0][][] */ -13,-127,-24,4,-14,-125,120,-30, 
  /* [17][0][][] */ 12,127,5,-8,8,80,-88,-22, 
  /* [18][0][][] */ 3,39,-127,1,-2,51,-24,59, 
  /* [19][0][][] */ -62,13,-5,-5,-127,-4,17,26, 
  /* [20][0][][] */ -127,-19,-5,5,66,-34,29,0, 
  /* [21][0][][] */ -64,-2,3,0,-127,-3,18,13, 
  /* [22][0][][] */ -127,-22,-2,9,73,-9,33,41, 
  /* [23][0][][] */ -17,-26,-6,-7,-3,86,-127,-93, 
  /* [24][0][][] */ -8,44,-127,5,7,51,-19,80, 
  /* [25][0][][] */ 97,-43,1,127,-70,-6,7,-48, 
  /* [26][0][][] */ -1,-17,0,1,-8,122,127,-31, 
  /* [27][0][][] */ 67,-8,-7,19,127,24,31,-20, 
  /* [28][0][][] */ -2,127,-58,5,3,81,-29,110, 
  /* [29][0][][] */ -9,15,-2,-7,0,89,-127,-88, 
  /* [30][0][][] */ 3,-2,4,-127,-8,6,-6,-18, 
  /* [31][0][][] */ -58,-3,-1,3,-127,7,13,-3, 
  /* [32][0][][] */ -14,15,-8,-127,-11,27,-72,-90, 
  /* [33][0][][] */ -64,-11,1,3,-127,40,45,5, 
  /* [34][0][][] */ -127,78,7,28,52,-30,16,18, 
  /* [35][0][][] */ -10,127,-10,-7,-5,-88,80,-43, 
  /* [36][0][][] */ -8,43,4,-27,-4,95,-127,-30, 
  /* [37][0][][] */ 44,-86,1,26,15,-127,120,-2, 
  /* [38][0][][] */ 10,-127,5,0,0,53,-50,63, 
  /* [39][0][][] */ 5,-127,-12,-4,-5,-17,-37,-84, 
  /* [40][0][][] */ 122,46,21,11,-42,82,-127,-112, 
  /* [41][0][][] */ 5,-127,20,0,-6,84,-60,121, 
  /* [42][0][][] */ 54,5,5,-127,-40,-7,-4,-26, 
  /* [43][0][][] */ -104,-24,24,-127,66,15,-31,-1, 
  /* [44][0][][] */ 3,-31,-5,20,-18,89,127,-18, 
  /* [45][0][][] */ -127,-51,-20,6,23,-3,33,-18, 
  /* [46][0][][] */ 14,79,127,7,-1,10,16,28, 
  /* [47][0][][] */ -1,4,15,127,11,7,0,2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00019704850274138153, 0.00076960388105362654, 0.00059660390252247453, 0.0011393589666113257, 0.0036599731538444757, 0.0010968418791890144, 0.0026347055099904537, 0.0027567129582166672, 0.0014976141974329948, 0.0015910177025943995, 0.0015961980680003762, 0.0012668578419834375, 0.0012751623289659619, 0.0014475340722128749, 0.0014303209027275443, 0.004475422203540802, 0.00076134159462526441, 0.00086764991283416748, 0.0049223578535020351, 0.00024003132421057671, 0.00075870647560805082, 0.00078926660353317857, 0.001302467891946435, 0.0024599295575171709, 0.00085494184168055654, 0.00059383554616943002, 0.00034542079083621502, 0.00084012642037123442, 0.0019560777582228184, 0.0025142712984234095, 0.0013081650249660015, 0.00088768912246450782, 0.0028009028173983097, 0.00054925732547417283, 0.00086717616068199277, 0.00065761612495407462, 0.0012902257731184363, 0.00067764980485662818, 0.00029327865922823548, 0.0058890329673886299, 0.0014858244685456157, 0.0025693858042359352, 0.0010670153424143791, 0.00094009825261309743, 0.00062827114015817642, 0.0011368261184543371, 0.0019517734181135893, 0.0024013582151383162, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -5843, -27001, 24401, 20193, 4625, 439, 37725, 10174, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011913267662748694, 0.00071491289418190718, 0.0013377168215811253, 0.0011569160269573331, 0.0011254962300881743, 0.0011655838461592793, 0.00089221273083239794, 0.00081984128337353468, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -10,2,9,-97,10,28,5,8,4,7,5,-7,98,0,0,8,0,-7,-6,-1,78,-4,2,6,30,36,17,9,5,4,5,-127,11,8,-3,-2,-25,2,-18,32,8,-28,-10,5,0,-2,5,5, 
  /* [1][0][][] */ -35,-5,1,-4,45,26,-27,76,18,7,-31,-19,12,0,19,38,0,43,18,-47,-5,22,127,21,-27,1,58,6,20,-5,18,-12,14,-6,-11,-19,7,-55,14,2,-8,-9,-81,-8,-35,6,-47,-96, 
  /* [2][0][][] */ -63,18,2,17,43,-15,27,28,-17,53,9,-10,4,0,8,57,0,15,-127,25,0,14,7,-8,-35,-1,43,11,10,30,23,8,4,-9,-8,-10,14,5,3,7,37,-5,-35,4,22,-56,23,14, 
  /* [3][0][][] */ 4,2,0,8,-6,28,3,0,65,19,-5,1,24,0,-30,-5,0,1,-11,1,-5,2,8,-19,-11,-5,-10,-5,-8,-3,-1,-8,-49,47,-55,-4,5,2,6,-127,-2,1,-1,-53,-4,-1,-2,3, 
  /* [4][0][][] */ -1,-2,77,34,6,-19,0,-1,4,-3,-4,-12,-82,0,-11,6,0,13,10,0,68,8,0,-3,-13,29,-4,42,-7,0,2,100,2,6,-1,-2,15,-12,-13,-20,-3,-127,5,3,-1,-4,2,3, 
  /* [5][0][][] */ -9,44,6,-6,1,47,25,13,-21,31,8,53,27,0,-127,-2,0,15,-38,21,-11,11,-12,39,-20,0,30,-3,-15,21,23,-13,52,28,-41,-3,7,19,-43,16,25,-11,-11,29,23,58,22,25, 
  /* [6][0][][] */ -22,-56,-1,6,36,-45,-20,12,30,-24,-15,85,-4,0,-127,37,0,-6,47,-19,-3,5,24,-31,29,-1,-7,-14,45,-11,-11,-4,93,-29,25,-3,-5,-12,-69,-21,-12,-16,-4,-29,-21,-81,-20,-29, 
  /* [7][0][][] */ -119,-25,-12,11,127,25,66,35,14,11,24,-39,-32,0,88,102,0,17,2,63,-14,2,-28,50,17,3,53,5,51,61,52,-7,-10,-16,-26,-25,4,22,27,40,71,1,-31,-10,56,6,64,79, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.050631385296583176, 0.030383797362446785, 0.056852962821722031, 0.04916892945766449, 0.047833587974309921, 0.049537312239408493, 0.037919040769338608, 0.034843254834413528, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 58291, 53677, 61751, 43365, -268, 14055, 3322, 26354, 24350, 25752, 28584, 1087, -46916, -127, 39734, 187, -204, 35914, 2025, 1519, -15463, 10774, 51635, 36498, -17678, 41206, 36379, 21965, -2534, 15265, -7649, -50417, 11916, 117357, 28773, 1955, 63721, -196, 157164, -24944, 15128, -27034, 2253, 115962, -1299, 72619, 1302, -22783, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010363128967583179, 7.408583041979e-05, 0.00015583343338221312, 0.00011168682249262929, 0.00018228781118523329, 0.00019253602658864111, 0.00015361401892732829, 6.5551415900699794e-05, 9.1224283096380532e-05, 3.4166019759140909e-05, 8.7890206486918032e-05, 2.6292866095900536e-05, 0.00017689637024886906, 0.005541567225009203, 6.4736799686215818e-05, 0.0002502125280443579, 0.0027484172023832798, 2.1596491933451034e-05, 9.1424175479914993e-05, 0.00017308651877101511, 0.00010820027091540396, 0.00015834167425055057, 0.00011181741865584627, 3.4968874388141558e-05, 7.6776945206802338e-05, 6.7487068008631468e-05, 3.8895741454325616e-05, 4.4049829739378765e-05, 0.00024038858828134835, 5.6098549976013601e-05, 5.1492366765160114e-05, 0.00018843678117264062, 0.00020610784122254699, 8.198626346711535e-06, 8.6095154983922839e-05, 0.00016718021652195603, 1.3333745300769806e-05, 0.0004894417361356318, 2.9651946533704177e-05, 8.6660642409697175e-05, 6.5909800468944013e-05, 0.0001786098291631788, 0.00011327290849294513, 8.6324862422770821e-06, 0.0001787661894923076, 8.159186108969152e-05, 0.00024414877407252789, 0.00013312070223037153, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-23,-7,-17,7,-39,-79,-68,-26,-50,8,66,34,-71,114,-43,-113,-85,37,-7,-1,-71,-111,-80,-35,-126,-63,-20,70,15,95,26,-127,-89,-7,54,19,48,-127,79,-77,-14,104,-109,-2,-35,-88,107, 76,11,-28,-29,58,-127,-127,-81,60,-76,-116,108,38,-82,-1,62,-52,-113,59,7,11,-113,-127,-70,-5,-127,-120,-40,-55,21,-56,54,29,-127,64,84,13,73,-94,127,-127,6,124,-127,2,-22,-127,94, -33,42,6,-6,-64,-110,-59,-17,88,-8,-127,38,7,-71,-100,-11,-127,-26,26,12,-15,-76,-35,-24,-11,-30,-58,-11,-10,17,-24,9,106,-88,71,31,15,36,-4,16,-79,4,7,-80,-18,6,-56,15, 
  /* [0][1][][] */ -86,-127,-44,-44,-10,54,99,-105,-25,-109,-22,113,90,-64,27,-96,-121,-95,90,-77,41,-88,-101,-127,42,-118,-78,-37,127,-61,127,83,-44,-85,-14,84,-35,-77,-107,91,42,59,105,-111,-91,-117,81,120, 127,-82,-127,-127,127,41,94,-127,101,-127,-110,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-119,127,-98,-127,-127,-120,-127,-71,127,28,-110,127,127,-69,-127,-98,90,60,127,127,-116,-113,-127,123,127, -54,31,-61,-86,-119,-24,31,-37,127,-20,-76,35,55,-70,-25,-43,-37,-30,54,-71,56,-82,-38,-23,48,-5,-46,-58,15,-89,-35,20,29,-99,118,24,-36,-62,2,-15,36,54,11,-75,-58,-37,64,35, 
  /* [0][2][][] */ -62,-106,-34,-34,0,35,-5,-34,-38,-59,-16,61,78,-127,-127,-63,-43,-19,63,76,52,-35,-12,-61,32,-55,-11,-58,76,29,78,61,109,-26,-38,-10,-96,35,-17,31,9,37,15,-57,96,-77,4,31, 88,-73,-88,-86,82,20,7,-47,48,-72,-33,56,84,-26,16,92,-24,-31,77,119,82,-55,-18,-57,94,-67,-21,-99,-50,39,-45,111,-18,-49,67,6,-127,50,-16,-1,10,32,16,-67,127,-100,-12,41, -29,29,-42,-38,-79,-18,22,-12,60,-4,-13,32,32,-43,111,-29,-93,-5,29,60,74,-29,-1,-3,43,1,-4,-62,-13,28,-20,39,-91,-43,66,5,-20,21,27,-39,6,36,-5,-16,63,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0044043296948075294, 0.0031486477237194777, 0.0066229207441210747, 0.0047466899268329144, 0.0077472315169870853, 0.0081827808171510696, 0.0065285959281027317, 0.002785935066640377, 0.0038770318496972322, 0.0014520557597279549, 0.0037353336811065674, 0.0011174468090757728, 0.0075180954299867153, 0.23551659286022186, 0.0027513138484209776, 0.01063403207808733, 0.1168077290058136, 0.00091785087715834379, 0.0038855273742228746, 0.0073561770841479301, 0.0045985113829374313, 0.006729520857334137, 0.0047522401437163353, 0.0014861772069707513, 0.0032630201894789934, 0.0028682001866400242, 0.0016530689317733049, 0.0018721177475526929, 0.010216514579951763, 0.0023841883521527052, 0.0021884255111217499, 0.0080085629597306252, 0.0087595833465456963, 0.00034844159381464124, 0.0036590441595762968, 0.0071051591075956821, 0.00056668417528271675, 0.020801274105906487, 0.0012602077331393957, 0.0036830771714448929, 0.0028011663816869259, 0.0075909178704023361, 0.0048140985891222954, 0.00036688067484647036, 0.0075975628569722176, 0.0034676541108638048, 0.010376322083175182, 0.0056576295755803585, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3573, 44, 7779, 5395, 6158, 5591, 8415, -31, 59, -262, 1756, 356, 10698, -64399932, 2318, 15359, -51986968, -92, -362, 8194, 3385, -12, 7, 332, 2882, -640, 52, 578, 3365, 1392, 1969, 10697, 3188, 244, 152, -1305, 248, 2987, -105, 9819, 1802, 9395, -231, -70, 10404, 111, 7213, 3841, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00057785405078902841, 0.00056910683633759618, 0.00040670362068340182, 0.00034854767727665603, 0.00032819007174111903, 0.00037534677539952099, 0.00045259663602337241, 0.0019399477168917656, 0.00055831688223406672, 0.0028474179562181234, 0.0008281787158921361, 0.0024380204267799854, 0.00020810791465919465, 2.5183823915142511e-09, 0.0011319415643811226, 0.00021520580048672855, 2.5183823915142511e-09, 0.0080206887796521187, 0.00051147904014214873, 0.00047023661318235099, 0.00031990569550544024, 0.0056387507356703281, 0.00041451808647252619, 0.0018310896120965481, 0.0013102097436785698, 0.00084878253983333707, 0.0028233469929546118, 0.0021630674600601196, 0.00033335306216031313, 0.0020898999646306038, 0.0015022441511973739, 0.0002188210200984031, 0.00023855567269492894, 0.013099834322929382, 0.00069275760324671865, 0.00088084983872249722, 0.0061564808711409569, 0.00043080770410597324, 0.0034252423793077469, 0.00035215297248214483, 0.0015650999266654253, 0.00023667416826356202, 0.00070718064671382308, 0.01213427260518074, 0.00048626816715113819, 0.00065422081388533115, 0.00039250683039426804, 0.00023082656844053417, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,49,-42,25,-16,-49,21, 
  /* [1][0][][] */ 79,80,-18,-92,4,-4,-89,127, 
  /* [2][0][][] */ 34,9,-41,119,44,127,52,88, 
  /* [3][0][][] */ 84,78,-77,127,-99,-10,-9,12, 
  /* [4][0][][] */ -38,-103,85,13,13,34,-44,-127, 
  /* [5][0][][] */ 16,0,-42,41,6,-33,41,127, 
  /* [6][0][][] */ 70,-1,-127,-117,116,20,70,-47, 
  /* [7][0][][] */ 127,13,19,-17,26,-7,87,-58, 
  /* [8][0][][] */ 15,-88,10,93,5,14,-21,-127, 
  /* [9][0][][] */ 107,-127,6,4,-7,4,-126,90, 
  /* [10][0][][] */ -127,-41,-119,20,-21,12,-96,43, 
  /* [11][0][][] */ -24,-45,-8,-105,-127,-32,48,-19, 
  /* [12][0][][] */ 13,3,-41,68,-76,-24,63,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -6,-29,-3,10,37,127,46,40, 
  /* [15][0][][] */ 44,4,14,-127,70,41,-57,74, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 20,18,127,24,-26,-12,28,34, 
  /* [18][0][][] */ 86,-125,27,36,-10,26,-127,-3, 
  /* [19][0][][] */ -127,-11,32,81,-63,-65,-86,68, 
  /* [20][0][][] */ 31,35,-45,127,-21,-125,-2,64, 
  /* [21][0][][] */ 58,20,127,12,-12,-9,72,12, 
  /* [22][0][][] */ -73,-19,-127,5,8,12,-95,4, 
  /* [23][0][][] */ -105,127,-24,-17,12,-19,124,-77, 
  /* [24][0][][] */ 6,-49,-51,91,-15,-59,98,127, 
  /* [25][0][][] */ 8,40,27,20,127,123,-77,-51, 
  /* [26][0][][] */ -83,-32,-127,2,5,10,-90,-4, 
  /* [27][0][][] */ 0,-28,-31,10,-45,127,75,42, 
  /* [28][0][][] */ 6,-18,-18,37,30,127,51,62, 
  /* [29][0][][] */ 85,33,127,3,-28,-24,90,-10, 
  /* [30][0][][] */ -81,127,-27,-35,13,-11,98,-43, 
  /* [31][0][][] */ -42,-91,-19,10,31,-65,127,103, 
  /* [32][0][][] */ 7,5,-46,122,-18,107,89,127, 
  /* [33][0][][] */ 1,61,-15,-101,12,-15,-8,127, 
  /* [34][0][][] */ -16,80,0,-89,23,-8,7,127, 
  /* [35][0][][] */ 127,11,-18,-42,13,43,102,-44, 
  /* [36][0][][] */ -127,-4,27,72,-47,19,-119,81, 
  /* [37][0][][] */ -10,-27,-15,21,37,127,50,47, 
  /* [38][0][][] */ 12,22,5,81,127,-5,-18,33, 
  /* [39][0][][] */ 3,33,40,-126,30,-3,-36,127, 
  /* [40][0][][] */ 99,27,127,8,-6,-4,87,-4, 
  /* [41][0][][] */ 0,-30,-34,74,44,127,72,97, 
  /* [42][0][][] */ -74,-6,127,14,-36,21,-34,70, 
  /* [43][0][][] */ -11,-52,7,102,-16,0,11,-127, 
  /* [44][0][][] */ 33,-2,-63,-127,55,-21,-3,-99, 
  /* [45][0][][] */ -86,127,-4,-49,7,1,68,-59, 
  /* [46][0][][] */ -127,-17,47,37,-26,45,-94,42, 
  /* [47][0][][] */ 121,27,123,2,46,-31,127,-10, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00090336397988721728, 0.00088968937052413821, 0.00063580309506505728, 0.00054488744353875518, 0.00051306223031133413, 0.00058678269851952791, 0.00070754805346950889, 0.0030327362474054098, 0.00087282137246802449, 0.0044513917528092861, 0.001294698566198349, 0.0038113775663077831, 0.00032533681951463223, 3.937008052901092e-09, 0.001769573544152081, 0.00033643300412222743, 3.937008052901092e-09, 0.012538808397948742, 0.00079959939466789365, 0.00073512474773451686, 0.00050011120038107038, 0.0088151050731539726, 0.00064801954431459308, 0.0028625575359910727, 0.002048261696472764, 0.0013269087066873908, 0.0044137616641819477, 0.0033815409988164902, 0.00052113359561190009, 0.0032671578228473663, 0.0023484707344323397, 0.000342084706062451, 0.00037293604691512883, 0.020479079335927963, 0.0010829936945810914, 0.001377039821818471, 0.0096244774758815765, 0.00067348522134125233, 0.0053547094576060772, 0.00055052363313734531, 0.0024467336479574442, 0.00036999466829001904, 0.0011055413633584976, 0.018969608470797539, 0.00076018704567104578, 0.0010227487655356526, 0.0006136091542430222, 0.00036085306783206761, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -666, -43913, -8734, -12412, -31715, -2010, -24886, -28018, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021739096846431494, 0.0026115274522453547, 0.002462195698171854, 0.0013420776231214404, 0.0011298431782051921, 0.002368557034060359, 0.00172897067386657, 0.0010658149840310216, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,-2,0,127,0,-3,2,-1,-125,-91,-4,0,124,-3,0, 
  /* [1][0][][] */ 0,-30,0,93,75,12,24,6,0,-8,127,-42,0,29,-15,0, 
  /* [2][0][][] */ 0,2,1,-9,-59,2,14,0,-1,5,-21,2,0,127,-7,0, 
  /* [3][0][][] */ 0,-13,-23,-127,80,26,65,20,-2,61,1,39,0,0,19,0, 
  /* [4][0][][] */ 0,51,-25,38,-56,30,127,5,-1,-65,17,-10,0,-9,18,0, 
  /* [5][0][][] */ 0,-18,-6,1,-25,-24,-15,15,-1,9,-4,-46,0,-5,127,0, 
  /* [6][0][][] */ 0,16,-1,1,52,-22,-26,-6,0,-106,114,61,0,127,63,0, 
  /* [7][0][][] */ 0,8,-18,127,14,-2,14,13,1,72,-51,79,0,-7,54,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.092391163110733032, 0.11098991334438324, 0.104643315076828, 0.057038299739360809, 0.048018332570791245, 0.10066366940736771, 0.073481254279613495, 0.045297134667634964, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 17202, 42251, 7984, 9119, 56918, 13810, 42463, -11088, 4389, 28635, 15061, -445, 24926, 11183, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00015151442494243383, 9.5239658548962325e-05, 0.00043682855903171003, 0.00019388720102142543, 5.8413890656083822e-05, 0.00038620803388766944, 9.1954992967657745e-05, 2.072745883197058e-05, 0.00038578853127546608, 0.00021405183360911906, 0.00080871890531852841, 0.00072724185883998871, 0.00027442877762950957, 0.00018567848019301891, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,52,-105,6,127,-25, 24,-24,90,-2,-73,67,-95,77,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-29,13,-28,0,3,-110,-49,9,-30,-14, -78,-41,-58,-14,-8,-26,7,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,2,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-7,39,-40,51,-76,0,0,5,40,2,-27,23, 23,-4,31,-2,-27,40,-35,20,-125,-13,0,85,-58,0,-28,-111, 21,-7,18,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0064393626525998116, 0.0040476853027939796, 0.018565213307738304, 0.00824020616710186, 0.0024825902655720711, 0.016413841396570206, 0.003908087033778429, 0.00088091701036319137, 0.016396012157201767, 0.0090972026810050011, 0.034370552748441696, 0.030907778069376945, 0.011663222685456276, 0.0078913355246186256, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 10847, -45553, 2286, 114136, 18333, 43094, 9664, -123880, 14247, 8665, 482165, -1073741824, 16288, 30392, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00039697901229374111, 0.00042496318928897381, 7.9487610491923988e-05, 2.457531081745401e-05, 0.00038903701351955533, 0.00010053444566437975, 0.00049926229985430837, 9.3089984147809446e-06, 8.350722782779485e-05, 0.00032857785117812455, 1.2321463145781308e-05, 1.1533876076441629e-09, 0.00023194242385216057, 0.00013371977547649294, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 46,-10,28, -2,-30,12, -117,-127,-62, 
  /* [1][1][][] */ 5,-7,1, -17,0,-3, 10,-33,11, 
  /* [1][2][][] */ -1,15,1, -2,5,1, 45,-19,18, 
  /* [2][0][][] */ 28,-1,-7, 64,112,-2, 33,-39,4, 
  /* [2][1][][] */ 11,17,0, 65,127,-26, 15,-5,-8, 
  /* [2][2][][] */ 52,-56,24, 76,-35,-15, 32,-50,16, 
  /* [3][0][][] */ 8,36,3, 30,95,18, -2,3,-7, 
  /* [3][1][][] */ 25,44,6, 64,127,23, -17,-23,0, 
  /* [3][2][][] */ 11,11,5, 31,36,13, -2,-5,3, 
  /* [4][0][][] */ 30,59,-14, 11,70,-13, -24,-5,-8, 
  /* [4][1][][] */ 40,87,47, 30,114,29, 28,49,-18, 
  /* [4][2][][] */ 62,87,36, 52,127,16, -22,24,18, 
  /* [5][0][][] */ 3,3,-121, -6,3,-101, -7,30,-25, 
  /* [5][1][][] */ 1,-40,-127, -4,-43,-113, -4,13,-24, 
  /* [5][2][][] */ -5,11,-16, -1,-2,-11, -2,12,-13, 
  /* [6][0][][] */ 21,-65,30, 43,-89,36, 6,-23,5, 
  /* [6][1][][] */ 34,-96,58, 61,-127,67, 6,-30,14, 
  /* [6][2][][] */ 20,-34,12, 15,-43,24, -12,8,-1, 
  /* [7][0][][] */ -26,13,7, -105,-49,3, -22,14,0, 
  /* [7][1][][] */ -11,-15,3, -127,-109,-6, -5,-15,3, 
  /* [7][2][][] */ -25,24,-9, -15,2,-1, -22,17,-4, 
  /* [8][0][][] */ 119,123,83, 119,127,80, 117,125,70, 
  /* [8][1][][] */ 113,106,70, 112,111,66, 106,109,53, 
  /* [8][2][][] */ 117,94,61, 118,100,58, 115,90,46, 
  /* [9][0][][] */ -17,3,10, -8,0,3, 9,10,-6, 
  /* [9][1][][] */ 94,112,-13, 75,127,12, 2,26,30, 
  /* [9][2][][] */ -22,-22,17, 5,-30,-1, 16,8,-16, 
  /* [10][0][][] */ -24,-83,-18, 34,95,21, -8,-13,-2, 
  /* [10][1][][] */ -59,-103,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,3, 36,23,-11, -8,-1,8, 
  /* [11][0][][] */ -19,-32,-5, 4,-50,1, 3,-113,-62, 
  /* [11][1][][] */ -54,-50,-24, -43,-72,-43, -22,-69,-63, 
  /* [11][2][][] */ -15,-49,-90, 117,127,60, -48,7,-57, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -9,-17,-5, 
  /* [13][1][][] */ 62,114,16, 58,127,25, 8,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 0,4,-4, 
  /* [14][0][][] */ 43,-7,-41, 76,-27,-54, 30,-10,-23, 
  /* [14][1][][] */ 89,-16,-76, 127,-40,-91, 57,-19,-41, 
  /* [14][2][][] */ 56,-8,-47, 74,-21,-55, 24,-7,-22, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.10122964531183243, 0.10836561024188995, 0.02026933990418911, 0.0062667038291692734, 0.09920443594455719, 0.025636281818151474, 0.12731188535690308, 0.0023737945593893528, 0.02129434235394001, 0.083787344396114349, 0.0031419729348272085, 2.9411381774480105e-07, 0.059145312756299973, 0.034098539501428604, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.63966912031173706, } };
const TfArray<1, int> quant46_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.4774169921875, } };
const TfArray<1, int> quant50_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.55279815196990967, } };
const TfArray<1, int> quant53_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.57446348667144775, } };
const TfArray<1, int> quant54_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.34225597977638245, } };
const TfArray<1, int> quant58_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20763082802295685, } };
const TfArray<1, int> quant61_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.35243737697601318, } };
const TfArray<1, int> quant62_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.27021339535713196, } };
const TfArray<1, int> quant65_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.45352047681808472, } };
const TfArray<1, int> quant66_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.058966841548681259, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.083861082792282104, } };
const TfArray<1, int> quant69_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 688, (TfLiteIntArray*)&tensor_dimension69, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
